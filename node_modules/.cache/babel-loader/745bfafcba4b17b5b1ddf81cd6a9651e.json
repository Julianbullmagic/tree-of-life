{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Julia\\\\OneDrive\\\\Documents\\\\completed-apps\\\\tree-of-life-main\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport logo from './logo.svg';\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [animals, setAnimals] = useState([]);\n  useEffect(() => {\n    fetch('https://api.allorigins.win/get?url=https://api.gbif.org/v1/species?limit=500').then(response => response.json()).then(response => JSON.parse(response.contents)).then(response => setAnimals(response.results)).catch(err => console.error(err));\n  }, []); //kingdom,phylum,class,order,family,genus,species\n\n  useEffect(() => {\n    let taxonomy = {};\n\n    for (let animal of animals) {\n      console.log(animal);\n\n      if (animal.hasOwnProperty('kingdom')) {\n        console.log(\"kingdom\", animal.kingdom);\n\n        if (animal.kingdom) {\n          if (!Object.keys(taxonomy).includes(animal.kingdom)) {\n            taxonomy[`${animal.kingdom}`] = {};\n          }\n        }\n      }\n\n      if (animal.hasOwnProperty('phylum')) {\n        console.log(\"phylum\", animal.phylum);\n\n        if (animal.phylum) {\n          if (!Object.keys(taxonomy[`${animal.kingdom}`]).includes(animal.phylum)) {\n            taxonomy[`${animal.kingdom}`][`${animal.phylum}`] = {};\n          }\n        }\n      }\n\n      if (animal.hasOwnProperty('class')) {\n        console.log(\"class\", animal.class);\n\n        if (animal.class) {\n          if (!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`]).includes(animal.class)) {\n            taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`] = {};\n          }\n        }\n      } // if(animal.hasOwnProperty('order')){\n      //   console.log(\"order\",animal.order)\n      //   if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`]).includes(animal.order)){\n      //     taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`]={}\n      //   }\n      // }\n      // if(animal.family){\n      //   console.log(\"family\",animal.family)\n      //   if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`]).includes(animal.family)){\n      //     taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`]={}\n      //   }\n      // }\n      // if(animal.genus){\n      //   console.log(\"genus\",animal.genus)\n      //   if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`]).includes(animal.genus)){\n      //     taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`]={}\n      //   }\n      // }\n      // if(animal.species){\n      //   console.log(\"species\",animal.species)\n      //   if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`]).includes(animal.species)){\n      //     taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`][`${animal.species}`]={}\n      //   }\n      // }\n\n    }\n\n    console.log(taxonomy, animals);\n  }, [animals]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"tMDm78NK8kLY0yURoGtNyZ1g+9k=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","React","useState","useEffect","App","animals","setAnimals","fetch","then","response","json","JSON","parse","contents","results","catch","err","console","error","taxonomy","animal","log","hasOwnProperty","kingdom","Object","keys","includes","phylum","class"],"sources":["C:/Users/Julia/OneDrive/Documents/completed-apps/tree-of-life-main/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport React, {useState, useEffect} from 'react'\n\nfunction App() {\n  const [animals,setAnimals] = useState([]);\n\nuseEffect(()=>{\nfetch('https://api.allorigins.win/get?url=https://api.gbif.org/v1/species?limit=500')\n  .then(response => response.json())\n  .then(response =>JSON.parse(response.contents))\n  .then(response =>setAnimals(response.results))\n  .catch(err => console.error(err));\n},[])\n//kingdom,phylum,class,order,family,genus,species\nuseEffect(()=>{\n  let taxonomy={}\n  for (let animal of animals){\n    console.log(animal)\n    if(animal.hasOwnProperty('kingdom')){\n      console.log(\"kingdom\",animal.kingdom)\n      if(animal.kingdom){\n        if(!Object.keys(taxonomy).includes(animal.kingdom)){\n          taxonomy[`${animal.kingdom}`]={}\n        }  \n      }\n    }\n    if(animal.hasOwnProperty('phylum')){\n      console.log(\"phylum\",animal.phylum)\n      if(animal.phylum){\n        if(!Object.keys(taxonomy[`${animal.kingdom}`]).includes(animal.phylum)){\n          taxonomy[`${animal.kingdom}`][`${animal.phylum}`]={}\n        }\n      }\n    }\n    if(animal.hasOwnProperty('class')){\n      console.log(\"class\",animal.class)\n      if(animal.class){\n        if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`]).includes(animal.class)){\n          taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`]={}\n        }\n      }\n    }\n    // if(animal.hasOwnProperty('order')){\n    //   console.log(\"order\",animal.order)\n    //   if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`]).includes(animal.order)){\n    //     taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`]={}\n    //   }\n    // }\n    // if(animal.family){\n    //   console.log(\"family\",animal.family)\n    //   if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`]).includes(animal.family)){\n    //     taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`]={}\n    //   }\n    // }\n    // if(animal.genus){\n    //   console.log(\"genus\",animal.genus)\n    //   if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`]).includes(animal.genus)){\n    //     taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`]={}\n    //   }\n    // }\n    // if(animal.species){\n    //   console.log(\"species\",animal.species)\n    //   if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`]).includes(animal.species)){\n    //     taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`][`${animal.species}`]={}\n    //   }\n    // }\n\n  }\n  console.log(taxonomy,animals)\n},[animals])\n\n  return (\n    <div>\n\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}