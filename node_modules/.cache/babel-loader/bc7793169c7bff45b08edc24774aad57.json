{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Julia\\\\OneDrive\\\\Documents\\\\completed-apps\\\\tree-of-life-main\\\\src\\\\Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { ReactP5Wrapper } from \"react-p5-wrapper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tree(props) {\n  _s();\n\n  const [organisms, setOrganisms] = useState([]);\n  const [taxonomyTree, setTaxonomyTree] = useState('');\n  useEffect(() => {\n    fetch('https://api.allorigins.win/get?url=https://api.gbif.org/v1/species?limit=1000').then(response => response.json()).then(response => JSON.parse(response.contents)).then(response => setOrganisms(response.results)).catch(err => console.error(err)); // narrowOptions(\"Hominidae\")\n  }, []);\n  useEffect(() => {\n    console.log(taxonomyTree);\n  }, [taxonomyTree]); // async function narrowOptions(term){\n  //   let highertaxonkey=await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/match?name=${term}`)\n  //     .then(response => response.json())\n  //     .then(response =>JSON.parse(response.contents))\n  //     .then(response =>{\n  //       return response.usageKey})\n  //     .catch(err => console.error(err));\n  //     await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/search?limit=100%26highertaxon_key=${highertaxonkey}`  )\n  //       .then(response => response.json())\n  //       .then(response =>JSON.parse(response.contents))\n  //       .then(response =>{\n  //         setOrganisms(response.results)\n  //       }).catch(err => console.error(err));\n  // }\n  //kingdom,phylum,class,order,family,genus,species\n\n  useEffect(() => {\n    let taxonomy = {};\n\n    for (let animal of organisms) {\n      if (animal.kingdom) {\n        if (!Object.keys(taxonomy).includes(animal.kingdom)) {\n          taxonomy[`${animal.kingdom}`] = {};\n        }\n      }\n\n      if (animal.kingdom && animal.phylum) {\n        if (taxonomy[`${animal.kingdom}`]) {\n          if (!Object.keys(taxonomy[`${animal.kingdom}`]).includes(animal.phylum)) {\n            taxonomy[`${animal.kingdom}`][`${animal.phylum}`] = {};\n          }\n        }\n      }\n\n      if (animal.kingdom && animal.phylum & animal.class) {\n        if (taxonomy[`${animal.kingdom}`][`${animal.phylum}`]) {\n          if (!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`]).includes(animal.class)) {\n            taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`] = {};\n          }\n        }\n      }\n\n      if (animal.kingdom && animal.phylum && animal.class && animal.order) {\n        if (taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`]) {\n          if (!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`]).includes(animal.order)) {\n            taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`] = {};\n          }\n        }\n      }\n\n      if (animal.kingdom && animal.phylum && animal.class && animal.order && animal.family) {\n        if (taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`]) {\n          if (!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`]).includes(animal.family)) {\n            taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`] = {};\n          }\n        }\n      }\n\n      if (animal.kingdom && animal.phylum && animal.class && animal.order && animal.family && animal.genus) {\n        if (taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`]) {\n          if (!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`]).includes(animal.genus)) {\n            taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`] = {};\n          }\n        }\n      }\n\n      if (animal.kingdom && animal.phylum && animal.class && animal.order && animal.family && animal.genus && animal.species) {\n        if (taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`]) {\n          if (!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`]).includes(animal.species)) {\n            taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`][`${animal.species}`] = {};\n          }\n        }\n      }\n    }\n\n    console.log(taxonomy);\n    setTaxonomyTree(JSON.stringify(taxonomy));\n  }, [organisms]);\n\n  const sketch = p5 => {\n    let theta, input, button;\n    let numberofgroups = 0;\n\n    p5.setup = () => {\n      p5.createCanvas(1000, 1000);\n      p5.background(p5.color(255, 255, 255));\n      p5.stroke(255);\n      p5.strokeWeight(30); // Let's pick an angle 0 to 90 degrees based on the mouse position\n\n      let a = 15; // Convert it to radians\n\n      theta = p5.radians(a); // Start the tree from the bottom of the screen\n\n      p5.translate(p5.width / 2, p5.height); // Draw a line 120 pixels\n\n      p5.stroke(101, 67, 33);\n      p5.line(0, 0, 0, -200);\n\n      function check_value(value) {\n        return value % 2 == 0 ? \"even\" : \"odd\";\n      }\n\n      (async function () {\n        p5.translate(0, -200);\n        p5.rotate(-1.5708);\n        let taxonomy = JSON.parse(taxonomyTree);\n        let keys = Object.keys(taxonomy);\n        let radiangapbetweenbranches = 180 / keys.length * (Math.PI / 180);\n        let oddoreven = check_value(keys.length);\n        p5.rotate(radiangapbetweenbranches / 2);\n        console.log(\"TAXONOMY!\", taxonomy);\n\n        for (let [index, group] of keys.entries()) {\n          p5.push();\n          p5.translate(0, -100);\n          p5.stroke(101, 67, 33);\n          p5.line(0, 0, 0, -200);\n          p5.rotate(-1.5708);\n          p5.textSize(23);\n          p5.strokeWeight(2);\n          p5.stroke(0);\n          p5.fill(255);\n          console.log(\"GROUP\", group);\n          p5.text(group, 10, 5);\n          p5.pop();\n          p5.rotate(radiangapbetweenbranches); // let keys=Object.keys(taxonomy[`${group}`])\n          // branch()\n        }\n      })();\n    };\n\n    async function branch() {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(ReactP5Wrapper, {\n    sketch: sketch\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Tree, \"gg2rnW5XmuYh05X1jdsxByeeT2g=\");\n\n_c = Tree;\n\nconst areEqual = (prevProps, nextProps) => true;\n\nexport default _c2 = /*#__PURE__*/React.memo(Tree, areEqual);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Tree\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useRef","useState","useEffect","ReactP5Wrapper","Tree","props","organisms","setOrganisms","taxonomyTree","setTaxonomyTree","fetch","then","response","json","JSON","parse","contents","results","catch","err","console","error","log","taxonomy","animal","kingdom","Object","keys","includes","phylum","class","order","family","genus","species","stringify","sketch","p5","theta","input","button","numberofgroups","setup","createCanvas","background","color","stroke","strokeWeight","a","radians","translate","width","height","line","check_value","value","rotate","radiangapbetweenbranches","length","Math","PI","oddoreven","index","group","entries","push","textSize","fill","text","pop","branch","areEqual","prevProps","nextProps","memo"],"sources":["C:/Users/Julia/OneDrive/Documents/completed-apps/tree-of-life-main/src/Tree.js"],"sourcesContent":["import React, {useRef,useState,useEffect} from \"react\";\r\nimport { ReactP5Wrapper } from \"react-p5-wrapper\";\r\n\r\nfunction Tree(props) {\r\n  const [organisms,setOrganisms] = useState([]);\r\n  const [taxonomyTree,setTaxonomyTree] = useState('');\r\n\r\nuseEffect(()=>{\r\n  fetch('https://api.allorigins.win/get?url=https://api.gbif.org/v1/species?limit=1000')\r\n    .then(response => response.json())\r\n    .then(response =>JSON.parse(response.contents))\r\n    .then(response =>setOrganisms(response.results))\r\n    .catch(err => console.error(err));\r\n  // narrowOptions(\"Hominidae\")\r\n},[])\r\n\r\nuseEffect(()=>{\r\nconsole.log(taxonomyTree)\r\n},[taxonomyTree])\r\n\r\n// async function narrowOptions(term){\r\n//   let highertaxonkey=await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/match?name=${term}`)\r\n//     .then(response => response.json())\r\n//     .then(response =>JSON.parse(response.contents))\r\n//     .then(response =>{\r\n//       return response.usageKey})\r\n//     .catch(err => console.error(err));\r\n//     await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/search?limit=100%26highertaxon_key=${highertaxonkey}`  )\r\n//       .then(response => response.json())\r\n//       .then(response =>JSON.parse(response.contents))\r\n//       .then(response =>{\r\n//         setOrganisms(response.results)\r\n//       }).catch(err => console.error(err));\r\n// }\r\n\r\n\r\n//kingdom,phylum,class,order,family,genus,species\r\nuseEffect(()=>{\r\n  let taxonomy={}\r\n  for (let animal of organisms){\r\n      if(animal.kingdom){\r\n        if(!Object.keys(taxonomy).includes(animal.kingdom)){\r\n          taxonomy[`${animal.kingdom}`]={}\r\n        }\r\n      }\r\n\r\n      if (animal.kingdom&&animal.phylum){\r\n          if(taxonomy[`${animal.kingdom}`]){\r\n            if(!Object.keys(taxonomy[`${animal.kingdom}`]).includes(animal.phylum)){\r\n              taxonomy[`${animal.kingdom}`][`${animal.phylum}`]={}\r\n            }\r\n          }\r\n        }\r\n\r\n\r\n      if(animal.kingdom&&animal.phylum&animal.class){\r\n          if(taxonomy[`${animal.kingdom}`][`${animal.phylum}`]){\r\n            if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`]).includes(animal.class)){\r\n              taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`]={}\r\n            }\r\n          }\r\n        }\r\n\r\n\r\n      if(animal.kingdom&&animal.phylum&&animal.class&&animal.order){\r\n        if(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`]){\r\n          if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`]).includes(animal.order)){\r\n            taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`]={}\r\n          }\r\n        }\r\n      }\r\n\r\n\r\n      if(animal.kingdom&&animal.phylum&&animal.class&&animal.order&&animal.family){\r\n      if(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`]){\r\n        if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`]).includes(animal.family)){\r\n          taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`]={}\r\n        }\r\n      }\r\n    }\r\n\r\n      if(animal.kingdom&&animal.phylum&&animal.class&&animal.order&&animal.family&&animal.genus){\r\n      if(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`]){\r\n        if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`]).includes(animal.genus)){\r\n          taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`]={}\r\n        }\r\n      }\r\n    }\r\n    if(animal.kingdom&&animal.phylum&&animal.class&&animal.order&&animal.family&&animal.genus&&animal.species){\r\n      if(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`]){\r\n        if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`]).includes(animal.species)){\r\n          taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`][`${animal.species}`]={}\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n  console.log(taxonomy)\r\n  setTaxonomyTree(JSON.stringify(taxonomy))\r\n},[organisms])\r\n\r\n\r\n  const sketch = (p5) => {\r\n\t\tlet theta,input,button\r\n    let numberofgroups=0\r\n\r\n    p5.setup = () => {\r\n\t\t\tp5.createCanvas(1000, 1000);\r\n\t\t   p5.background(p5.color(255,255,255));\r\n\t\t   p5.stroke(255);\r\n\t\t   p5.strokeWeight(30)\r\n\r\n\t\t   // Let's pick an angle 0 to 90 degrees based on the mouse position\r\n\t\t   let a = 15\r\n\t\t   // Convert it to radians\r\n\t\t   theta = p5.radians(a);\r\n\t\t   // Start the tree from the bottom of the screen\r\n\t\t   p5.translate(p5.width/2,p5.height);\r\n\t\t   // Draw a line 120 pixels\r\n\r\n\t\t   p5.stroke(101, 67, 33)\r\n\t\t   p5.line(0,0,0,-200);\r\n\r\n       function check_value(value) { return value % 2 == 0 ? \"even\" : \"odd\"; }\r\n\r\n\r\n\t\t\t (async function(){\r\n         p5.translate(0,-200);\r\n\r\n         p5.rotate(-1.5708)\r\n         let taxonomy=JSON.parse(taxonomyTree)\r\n         let keys=Object.keys(taxonomy)\r\n         let radiangapbetweenbranches=(180/keys.length) * (Math.PI / 180);\r\n         let oddoreven=check_value(keys.length)\r\n         p5.rotate(radiangapbetweenbranches/2)\r\n\r\n\r\n         console.log(\"TAXONOMY!\",taxonomy)\r\n         for (let [index, group] of keys.entries()){\r\n           p5.push()\r\n           p5.translate(0,-100);\r\n\r\n           p5.stroke(101, 67, 33)\r\n    \t\t   p5.line(0,0,0,-200);\r\n           p5.rotate(-1.5708)\r\n          p5.textSize(23);\r\n          p5.strokeWeight(2)\r\n          p5.stroke(0)\r\n          p5.fill(255);\r\n          console.log(\"GROUP\",group)\r\n          p5.text(group, 10, 5)\r\n          p5.pop()\r\n          p5.rotate(radiangapbetweenbranches)\r\n\r\n         // let keys=Object.keys(taxonomy[`${group}`])\r\n         // branch()\r\n         }\r\n\t\t  })()\r\n\t\t};\r\n\r\n\r\n\r\n\r\n\r\n\t\tasync function branch(){\r\n\r\n\t\t}\r\n\r\n\r\n\r\n  };\r\n\r\n  return <ReactP5Wrapper sketch={sketch} />;\r\n}\r\nconst areEqual = (prevProps, nextProps) => true;\r\n\r\nexport default React.memo(Tree, areEqual);\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAsBC,QAAtB,EAA+BC,SAA/B,QAA+C,OAA/C;AACA,SAASC,cAAT,QAA+B,kBAA/B;;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;EAAA;;EACnB,MAAM,CAACC,SAAD,EAAWC,YAAX,IAA2BN,QAAQ,CAAC,EAAD,CAAzC;EACA,MAAM,CAACO,YAAD,EAAcC,eAAd,IAAiCR,QAAQ,CAAC,EAAD,CAA/C;EAEFC,SAAS,CAAC,MAAI;IACZQ,KAAK,CAAC,+EAAD,CAAL,CACGC,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQC,QAAQ,IAAGE,IAAI,CAACC,KAAL,CAAWH,QAAQ,CAACI,QAApB,CAFnB,EAGGL,IAHH,CAGQC,QAAQ,IAAGL,YAAY,CAACK,QAAQ,CAACK,OAAV,CAH/B,EAIGC,KAJH,CAISC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAJhB,EADY,CAMZ;EACD,CAPQ,EAOP,EAPO,CAAT;EASAjB,SAAS,CAAC,MAAI;IACdkB,OAAO,CAACE,GAAR,CAAYd,YAAZ;EACC,CAFQ,EAEP,CAACA,YAAD,CAFO,CAAT,CAbqB,CAiBrB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGA;;EACAN,SAAS,CAAC,MAAI;IACZ,IAAIqB,QAAQ,GAAC,EAAb;;IACA,KAAK,IAAIC,MAAT,IAAmBlB,SAAnB,EAA6B;MACzB,IAAGkB,MAAM,CAACC,OAAV,EAAkB;QAChB,IAAG,CAACC,MAAM,CAACC,IAAP,CAAYJ,QAAZ,EAAsBK,QAAtB,CAA+BJ,MAAM,CAACC,OAAtC,CAAJ,EAAmD;UACjDF,QAAQ,CAAE,GAAEC,MAAM,CAACC,OAAQ,EAAnB,CAAR,GAA8B,EAA9B;QACD;MACF;;MAED,IAAID,MAAM,CAACC,OAAP,IAAgBD,MAAM,CAACK,MAA3B,EAAkC;QAC9B,IAAGN,QAAQ,CAAE,GAAEC,MAAM,CAACC,OAAQ,EAAnB,CAAX,EAAiC;UAC/B,IAAG,CAACC,MAAM,CAACC,IAAP,CAAYJ,QAAQ,CAAE,GAAEC,MAAM,CAACC,OAAQ,EAAnB,CAApB,EAA2CG,QAA3C,CAAoDJ,MAAM,CAACK,MAA3D,CAAJ,EAAuE;YACrEN,QAAQ,CAAE,GAAEC,MAAM,CAACC,OAAQ,EAAnB,CAAR,CAA+B,GAAED,MAAM,CAACK,MAAO,EAA/C,IAAkD,EAAlD;UACD;QACF;MACF;;MAGH,IAAGL,MAAM,CAACC,OAAP,IAAgBD,MAAM,CAACK,MAAP,GAAcL,MAAM,CAACM,KAAxC,EAA8C;QAC1C,IAAGP,QAAQ,CAAE,GAAEC,MAAM,CAACC,OAAQ,EAAnB,CAAR,CAA+B,GAAED,MAAM,CAACK,MAAO,EAA/C,CAAH,EAAqD;UACnD,IAAG,CAACH,MAAM,CAACC,IAAP,CAAYJ,QAAQ,CAAE,GAAEC,MAAM,CAACC,OAAQ,EAAnB,CAAR,CAA+B,GAAED,MAAM,CAACK,MAAO,EAA/C,CAAZ,EAA+DD,QAA/D,CAAwEJ,MAAM,CAACM,KAA/E,CAAJ,EAA0F;YACxFP,QAAQ,CAAE,GAAEC,MAAM,CAACC,OAAQ,EAAnB,CAAR,CAA+B,GAAED,MAAM,CAACK,MAAO,EAA/C,EAAmD,GAAEL,MAAM,CAACM,KAAM,EAAlE,IAAqE,EAArE;UACD;QACF;MACF;;MAGH,IAAGN,MAAM,CAACC,OAAP,IAAgBD,MAAM,CAACK,MAAvB,IAA+BL,MAAM,CAACM,KAAtC,IAA6CN,MAAM,CAACO,KAAvD,EAA6D;QAC3D,IAAGR,QAAQ,CAAE,GAAEC,MAAM,CAACC,OAAQ,EAAnB,CAAR,CAA+B,GAAED,MAAM,CAACK,MAAO,EAA/C,EAAmD,GAAEL,MAAM,CAACM,KAAM,EAAlE,CAAH,EAAwE;UACtE,IAAG,CAACJ,MAAM,CAACC,IAAP,CAAYJ,QAAQ,CAAE,GAAEC,MAAM,CAACC,OAAQ,EAAnB,CAAR,CAA+B,GAAED,MAAM,CAACK,MAAO,EAA/C,EAAmD,GAAEL,MAAM,CAACM,KAAM,EAAlE,CAAZ,EAAkFF,QAAlF,CAA2FJ,MAAM,CAACO,KAAlG,CAAJ,EAA6G;YAC3GR,QAAQ,CAAE,GAAEC,MAAM,CAACC,OAAQ,EAAnB,CAAR,CAA+B,GAAED,MAAM,CAACK,MAAO,EAA/C,EAAmD,GAAEL,MAAM,CAACM,KAAM,EAAlE,EAAsE,GAAEN,MAAM,CAACO,KAAM,EAArF,IAAwF,EAAxF;UACD;QACF;MACF;;MAGD,IAAGP,MAAM,CAACC,OAAP,IAAgBD,MAAM,CAACK,MAAvB,IAA+BL,MAAM,CAACM,KAAtC,IAA6CN,MAAM,CAACO,KAApD,IAA2DP,MAAM,CAACQ,MAArE,EAA4E;QAC5E,IAAGT,QAAQ,CAAE,GAAEC,MAAM,CAACC,OAAQ,EAAnB,CAAR,CAA+B,GAAED,MAAM,CAACK,MAAO,EAA/C,EAAmD,GAAEL,MAAM,CAACM,KAAM,EAAlE,EAAsE,GAAEN,MAAM,CAACO,KAAM,EAArF,CAAH,EAA2F;UACzF,IAAG,CAACL,MAAM,CAACC,IAAP,CAAYJ,QAAQ,CAAE,GAAEC,MAAM,CAACC,OAAQ,EAAnB,CAAR,CAA+B,GAAED,MAAM,CAACK,MAAO,EAA/C,EAAmD,GAAEL,MAAM,CAACM,KAAM,EAAlE,EAAsE,GAAEN,MAAM,CAACO,KAAM,EAArF,CAAZ,EAAqGH,QAArG,CAA8GJ,MAAM,CAACQ,MAArH,CAAJ,EAAiI;YAC/HT,QAAQ,CAAE,GAAEC,MAAM,CAACC,OAAQ,EAAnB,CAAR,CAA+B,GAAED,MAAM,CAACK,MAAO,EAA/C,EAAmD,GAAEL,MAAM,CAACM,KAAM,EAAlE,EAAsE,GAAEN,MAAM,CAACO,KAAM,EAArF,EAAyF,GAAEP,MAAM,CAACQ,MAAO,EAAzG,IAA4G,EAA5G;UACD;QACF;MACF;;MAEC,IAAGR,MAAM,CAACC,OAAP,IAAgBD,MAAM,CAACK,MAAvB,IAA+BL,MAAM,CAACM,KAAtC,IAA6CN,MAAM,CAACO,KAApD,IAA2DP,MAAM,CAACQ,MAAlE,IAA0ER,MAAM,CAACS,KAApF,EAA0F;QAC1F,IAAGV,QAAQ,CAAE,GAAEC,MAAM,CAACC,OAAQ,EAAnB,CAAR,CAA+B,GAAED,MAAM,CAACK,MAAO,EAA/C,EAAmD,GAAEL,MAAM,CAACM,KAAM,EAAlE,EAAsE,GAAEN,MAAM,CAACO,KAAM,EAArF,EAAyF,GAAEP,MAAM,CAACQ,MAAO,EAAzG,CAAH,EAA+G;UAC7G,IAAG,CAACN,MAAM,CAACC,IAAP,CAAYJ,QAAQ,CAAE,GAAEC,MAAM,CAACC,OAAQ,EAAnB,CAAR,CAA+B,GAAED,MAAM,CAACK,MAAO,EAA/C,EAAmD,GAAEL,MAAM,CAACM,KAAM,EAAlE,EAAsE,GAAEN,MAAM,CAACO,KAAM,EAArF,EAAyF,GAAEP,MAAM,CAACQ,MAAO,EAAzG,CAAZ,EAAyHJ,QAAzH,CAAkIJ,MAAM,CAACS,KAAzI,CAAJ,EAAoJ;YAClJV,QAAQ,CAAE,GAAEC,MAAM,CAACC,OAAQ,EAAnB,CAAR,CAA+B,GAAED,MAAM,CAACK,MAAO,EAA/C,EAAmD,GAAEL,MAAM,CAACM,KAAM,EAAlE,EAAsE,GAAEN,MAAM,CAACO,KAAM,EAArF,EAAyF,GAAEP,MAAM,CAACQ,MAAO,EAAzG,EAA6G,GAAER,MAAM,CAACS,KAAM,EAA5H,IAA+H,EAA/H;UACD;QACF;MACF;;MACD,IAAGT,MAAM,CAACC,OAAP,IAAgBD,MAAM,CAACK,MAAvB,IAA+BL,MAAM,CAACM,KAAtC,IAA6CN,MAAM,CAACO,KAApD,IAA2DP,MAAM,CAACQ,MAAlE,IAA0ER,MAAM,CAACS,KAAjF,IAAwFT,MAAM,CAACU,OAAlG,EAA0G;QACxG,IAAGX,QAAQ,CAAE,GAAEC,MAAM,CAACC,OAAQ,EAAnB,CAAR,CAA+B,GAAED,MAAM,CAACK,MAAO,EAA/C,EAAmD,GAAEL,MAAM,CAACM,KAAM,EAAlE,EAAsE,GAAEN,MAAM,CAACO,KAAM,EAArF,EAAyF,GAAEP,MAAM,CAACQ,MAAO,EAAzG,EAA6G,GAAER,MAAM,CAACS,KAAM,EAA5H,CAAH,EAAkI;UAChI,IAAG,CAACP,MAAM,CAACC,IAAP,CAAYJ,QAAQ,CAAE,GAAEC,MAAM,CAACC,OAAQ,EAAnB,CAAR,CAA+B,GAAED,MAAM,CAACK,MAAO,EAA/C,EAAmD,GAAEL,MAAM,CAACM,KAAM,EAAlE,EAAsE,GAAEN,MAAM,CAACO,KAAM,EAArF,EAAyF,GAAEP,MAAM,CAACQ,MAAO,EAAzG,EAA6G,GAAER,MAAM,CAACS,KAAM,EAA5H,CAAZ,EAA4IL,QAA5I,CAAqJJ,MAAM,CAACU,OAA5J,CAAJ,EAAyK;YACvKX,QAAQ,CAAE,GAAEC,MAAM,CAACC,OAAQ,EAAnB,CAAR,CAA+B,GAAED,MAAM,CAACK,MAAO,EAA/C,EAAmD,GAAEL,MAAM,CAACM,KAAM,EAAlE,EAAsE,GAAEN,MAAM,CAACO,KAAM,EAArF,EAAyF,GAAEP,MAAM,CAACQ,MAAO,EAAzG,EAA6G,GAAER,MAAM,CAACS,KAAM,EAA5H,EAAgI,GAAET,MAAM,CAACU,OAAQ,EAAjJ,IAAoJ,EAApJ;UACD;QACF;MACF;IAEF;;IACDd,OAAO,CAACE,GAAR,CAAYC,QAAZ;IACAd,eAAe,CAACK,IAAI,CAACqB,SAAL,CAAeZ,QAAf,CAAD,CAAf;EACD,CA9DQ,EA8DP,CAACjB,SAAD,CA9DO,CAAT;;EAiEE,MAAM8B,MAAM,GAAIC,EAAD,IAAQ;IACvB,IAAIC,KAAJ,EAAUC,KAAV,EAAgBC,MAAhB;IACE,IAAIC,cAAc,GAAC,CAAnB;;IAEAJ,EAAE,CAACK,KAAH,GAAW,MAAM;MAClBL,EAAE,CAACM,YAAH,CAAgB,IAAhB,EAAsB,IAAtB;MACEN,EAAE,CAACO,UAAH,CAAcP,EAAE,CAACQ,KAAH,CAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,CAAd;MACAR,EAAE,CAACS,MAAH,CAAU,GAAV;MACAT,EAAE,CAACU,YAAH,CAAgB,EAAhB,EAJgB,CAMhB;;MACA,IAAIC,CAAC,GAAG,EAAR,CAPgB,CAQhB;;MACAV,KAAK,GAAGD,EAAE,CAACY,OAAH,CAAWD,CAAX,CAAR,CATgB,CAUhB;;MACAX,EAAE,CAACa,SAAH,CAAab,EAAE,CAACc,KAAH,GAAS,CAAtB,EAAwBd,EAAE,CAACe,MAA3B,EAXgB,CAYhB;;MAEAf,EAAE,CAACS,MAAH,CAAU,GAAV,EAAe,EAAf,EAAmB,EAAnB;MACAT,EAAE,CAACgB,IAAH,CAAQ,CAAR,EAAU,CAAV,EAAY,CAAZ,EAAc,CAAC,GAAf;;MAEE,SAASC,WAAT,CAAqBC,KAArB,EAA4B;QAAE,OAAOA,KAAK,GAAG,CAAR,IAAa,CAAb,GAAiB,MAAjB,GAA0B,KAAjC;MAAyC;;MAG1E,CAAC,kBAAgB;QACZlB,EAAE,CAACa,SAAH,CAAa,CAAb,EAAe,CAAC,GAAhB;QAEAb,EAAE,CAACmB,MAAH,CAAU,CAAC,MAAX;QACA,IAAIjC,QAAQ,GAACT,IAAI,CAACC,KAAL,CAAWP,YAAX,CAAb;QACA,IAAImB,IAAI,GAACD,MAAM,CAACC,IAAP,CAAYJ,QAAZ,CAAT;QACA,IAAIkC,wBAAwB,GAAE,MAAI9B,IAAI,CAAC+B,MAAV,IAAqBC,IAAI,CAACC,EAAL,GAAU,GAA/B,CAA7B;QACA,IAAIC,SAAS,GAACP,WAAW,CAAC3B,IAAI,CAAC+B,MAAN,CAAzB;QACArB,EAAE,CAACmB,MAAH,CAAUC,wBAAwB,GAAC,CAAnC;QAGArC,OAAO,CAACE,GAAR,CAAY,WAAZ,EAAwBC,QAAxB;;QACA,KAAK,IAAI,CAACuC,KAAD,EAAQC,KAAR,CAAT,IAA2BpC,IAAI,CAACqC,OAAL,EAA3B,EAA0C;UACxC3B,EAAE,CAAC4B,IAAH;UACA5B,EAAE,CAACa,SAAH,CAAa,CAAb,EAAe,CAAC,GAAhB;UAEAb,EAAE,CAACS,MAAH,CAAU,GAAV,EAAe,EAAf,EAAmB,EAAnB;UACFT,EAAE,CAACgB,IAAH,CAAQ,CAAR,EAAU,CAAV,EAAY,CAAZ,EAAc,CAAC,GAAf;UACEhB,EAAE,CAACmB,MAAH,CAAU,CAAC,MAAX;UACDnB,EAAE,CAAC6B,QAAH,CAAY,EAAZ;UACA7B,EAAE,CAACU,YAAH,CAAgB,CAAhB;UACAV,EAAE,CAACS,MAAH,CAAU,CAAV;UACAT,EAAE,CAAC8B,IAAH,CAAQ,GAAR;UACA/C,OAAO,CAACE,GAAR,CAAY,OAAZ,EAAoByC,KAApB;UACA1B,EAAE,CAAC+B,IAAH,CAAQL,KAAR,EAAe,EAAf,EAAmB,CAAnB;UACA1B,EAAE,CAACgC,GAAH;UACAhC,EAAE,CAACmB,MAAH,CAAUC,wBAAV,EAdyC,CAgB1C;UACA;QACC;MACL,CA/BD;IAgCD,CApDC;;IA0DF,eAAea,MAAf,GAAuB,CAEtB;EAIA,CApED;;EAsEA,oBAAO,QAAC,cAAD;IAAgB,MAAM,EAAElC;EAAxB;IAAA;IAAA;IAAA;EAAA,QAAP;AACD;;GA1KQhC,I;;KAAAA,I;;AA2KT,MAAMmE,QAAQ,GAAG,CAACC,SAAD,EAAYC,SAAZ,KAA0B,IAA3C;;AAEA,kCAAe1E,KAAK,CAAC2E,IAAN,CAAWtE,IAAX,EAAiBmE,QAAjB,CAAf"},"metadata":{},"sourceType":"module"}