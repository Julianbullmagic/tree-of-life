{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Julia\\\\OneDrive\\\\Documents\\\\completed-apps\\\\tree-of-life-main\\\\src\\\\Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { ReactP5Wrapper } from \"react-p5-wrapper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tree(props) {\n  _s();\n\n  useEffect(props => {\n    console.log(\"TAXONOMY\", props.taxonomy);\n  }, [props]);\n\n  const sketch = p5 => {\n    let theta, input, button;\n    let numberofgroups = 0;\n\n    p5.setup = () => {\n      p5.createCanvas(1000, 1000);\n      p5.background(p5.color(255, 255, 255));\n      p5.stroke(255);\n      p5.strokeWeight(30); // Let's pick an angle 0 to 90 degrees based on the mouse position\n\n      let a = 15; // Convert it to radians\n\n      theta = p5.radians(a); // Start the tree from the bottom of the screen\n\n      p5.translate(p5.width / 2, p5.height); // Draw a line 120 pixels\n\n      p5.stroke(101, 67, 33);\n      p5.line(0, 0, 0, -200);\n\n      (async function () {// for (let group in props.taxonomy){\n        //   p5.push()\n        //  p5.rotate(-1.5708)\n        //  p5.textSize(23);\n        //  p5.strokeWeight(2)\n        //  p5.stroke(0)\n        //  p5.fill(255);\n        //  console.log(group)\n        //  p5.text(group, 10, 5)\n        //  p5.pop()\n        // p5.translate(0,-200);\n        // let keys=Object.keys(props.taxonomy[`${group}`])\n        // branch(200,25,0,10,keys.length,props.taxonomy[`${group}`],group.countminusone,0)\n        // }\n      })();\n    };\n\n    async function branch(h, t, d, l, b, g, c, r) {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(ReactP5Wrapper, {\n    sketch: sketch\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Tree, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Tree;\n\nconst areEqual = (prevProps, nextProps) => true;\n\nexport default _c2 = /*#__PURE__*/React.memo(Tree, areEqual);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Tree\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useRef","useState","useEffect","ReactP5Wrapper","Tree","props","console","log","taxonomy","sketch","p5","theta","input","button","numberofgroups","setup","createCanvas","background","color","stroke","strokeWeight","a","radians","translate","width","height","line","branch","h","t","d","l","b","g","c","r","areEqual","prevProps","nextProps","memo"],"sources":["C:/Users/Julia/OneDrive/Documents/completed-apps/tree-of-life-main/src/Tree.js"],"sourcesContent":["import React, {useRef,useState,useEffect} from \"react\";\r\nimport { ReactP5Wrapper } from \"react-p5-wrapper\";\r\n\r\nfunction Tree(props) {\r\n\r\n  useEffect((props)=>{\r\n    console.log(\"TAXONOMY\",props.taxonomy)\r\n  },[props])\r\n  const sketch = (p5) => {\r\n\t\tlet theta,input,button\r\n    let numberofgroups=0\r\n\r\n    p5.setup = () => {\r\n\t\t\tp5.createCanvas(1000, 1000);\r\n\t\t   p5.background(p5.color(255,255,255));\r\n\t\t   p5.stroke(255);\r\n\t\t   p5.strokeWeight(30)\r\n\r\n\t\t   // Let's pick an angle 0 to 90 degrees based on the mouse position\r\n\t\t   let a = 15\r\n\t\t   // Convert it to radians\r\n\t\t   theta = p5.radians(a);\r\n\t\t   // Start the tree from the bottom of the screen\r\n\t\t   p5.translate(p5.width/2,p5.height);\r\n\t\t   // Draw a line 120 pixels\r\n\r\n\t\t   p5.stroke(101, 67, 33)\r\n\t\t   p5.line(0,0,0,-200);\r\n\r\n\r\n\r\n\r\n\t\t\t (async function(){\r\n         // for (let group in props.taxonomy){\r\n         //   p5.push()\r\n         //  p5.rotate(-1.5708)\r\n         //  p5.textSize(23);\r\n         //  p5.strokeWeight(2)\r\n         //  p5.stroke(0)\r\n         //  p5.fill(255);\r\n         //  console.log(group)\r\n         //  p5.text(group, 10, 5)\r\n         //  p5.pop()\r\n         // p5.translate(0,-200);\r\n         // let keys=Object.keys(props.taxonomy[`${group}`])\r\n         // branch(200,25,0,10,keys.length,props.taxonomy[`${group}`],group.countminusone,0)\r\n         // }\r\n\t\t  })()\r\n\t\t};\r\n\r\n\r\n\r\n\r\n\r\n\t\tasync function branch(h,t,d,l,b,g,c,r){\r\n\r\n\t\t}\r\n\r\n\r\n\r\n  };\r\n\r\n  return <ReactP5Wrapper sketch={sketch} />;\r\n}\r\nconst areEqual = (prevProps, nextProps) => true;\r\n\r\nexport default React.memo(Tree, areEqual);\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAsBC,QAAtB,EAA+BC,SAA/B,QAA+C,OAA/C;AACA,SAASC,cAAT,QAA+B,kBAA/B;;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;EAAA;;EAEnBH,SAAS,CAAEG,KAAD,IAAS;IACjBC,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBF,KAAK,CAACG,QAA7B;EACD,CAFQ,EAEP,CAACH,KAAD,CAFO,CAAT;;EAGA,MAAMI,MAAM,GAAIC,EAAD,IAAQ;IACvB,IAAIC,KAAJ,EAAUC,KAAV,EAAgBC,MAAhB;IACE,IAAIC,cAAc,GAAC,CAAnB;;IAEAJ,EAAE,CAACK,KAAH,GAAW,MAAM;MAClBL,EAAE,CAACM,YAAH,CAAgB,IAAhB,EAAsB,IAAtB;MACEN,EAAE,CAACO,UAAH,CAAcP,EAAE,CAACQ,KAAH,CAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,CAAd;MACAR,EAAE,CAACS,MAAH,CAAU,GAAV;MACAT,EAAE,CAACU,YAAH,CAAgB,EAAhB,EAJgB,CAMhB;;MACA,IAAIC,CAAC,GAAG,EAAR,CAPgB,CAQhB;;MACAV,KAAK,GAAGD,EAAE,CAACY,OAAH,CAAWD,CAAX,CAAR,CATgB,CAUhB;;MACAX,EAAE,CAACa,SAAH,CAAab,EAAE,CAACc,KAAH,GAAS,CAAtB,EAAwBd,EAAE,CAACe,MAA3B,EAXgB,CAYhB;;MAEAf,EAAE,CAACS,MAAH,CAAU,GAAV,EAAe,EAAf,EAAmB,EAAnB;MACAT,EAAE,CAACgB,IAAH,CAAQ,CAAR,EAAU,CAAV,EAAY,CAAZ,EAAc,CAAC,GAAf;;MAKD,CAAC,kBAAgB,CACZ;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACJ,CAfD;IAgBD,CApCC;;IA0CF,eAAeC,MAAf,CAAsBC,CAAtB,EAAwBC,CAAxB,EAA0BC,CAA1B,EAA4BC,CAA5B,EAA8BC,CAA9B,EAAgCC,CAAhC,EAAkCC,CAAlC,EAAoCC,CAApC,EAAsC,CAErC;EAIA,CApDD;;EAsDA,oBAAO,QAAC,cAAD;IAAgB,MAAM,EAAE1B;EAAxB;IAAA;IAAA;IAAA;EAAA,QAAP;AACD;;GA5DQL,I;;KAAAA,I;;AA6DT,MAAMgC,QAAQ,GAAG,CAACC,SAAD,EAAYC,SAAZ,KAA0B,IAA3C;;AAEA,kCAAevC,KAAK,CAACwC,IAAN,CAAWnC,IAAX,EAAiBgC,QAAjB,CAAf"},"metadata":{},"sourceType":"module"}