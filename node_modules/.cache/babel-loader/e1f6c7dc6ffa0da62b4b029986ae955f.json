{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Julia\\\\OneDrive\\\\Documents\\\\completed-apps\\\\tree-of-life-main\\\\src\\\\Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { ReactP5Wrapper } from \"react-p5-wrapper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet first = false;\nlet searchlevel = \"kingdom\";\n\nfunction Tree(props) {\n  _s();\n\n  const [organisms, setOrganisms] = useState([]);\n  const [taxonomyTree, setTaxonomyTree] = useState('');\n  useEffect(() => {\n    fetch('https://api.allorigins.win/get?url=https://api.gbif.org/v1/species?limit=1000').then(response => response.json()).then(response => JSON.parse(response.contents)).then(response => setOrganisms(response.results)).catch(err => console.error(err));\n  }, []);\n  useEffect(() => {\n    console.log(taxonomyTree);\n  }, [taxonomyTree]);\n\n  async function narrowOptions(term) {\n    searchlevel = term.target.value.split(': ')[0];\n    console.log(\"narrowing options!!!!!\", term.target.value);\n    let highertaxonkey = await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/match?name=${term.target.value}`).then(response => response.json()).then(response => JSON.parse(response.contents)).then(response => {\n      console.log(response);\n      return response.usageKey;\n    }).catch(err => console.error(err));\n    console.log(highertaxonkey);\n    await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/search?limit=100%26highertaxon_key=${highertaxonkey}`).then(response => response.json()).then(response => JSON.parse(response.contents)).then(response => {\n      console.log(response.results);\n      setOrganisms(response.results);\n    }).catch(err => console.error(err));\n  } //kingdom,phylum,class,order,family,genus,species\n\n\n  useEffect(() => {\n    let taxonomy = {};\n\n    for (let animal of organisms) {\n      console.log(animal, taxonomy);\n\n      if (searchlevel == \"kingdom\") {\n        if (animal.kingdom) {\n          if (!Object.keys(taxonomy).includes(`Kingdom: ${animal.kingdom}`)) {\n            taxonomy[`Kingdom: ${animal.kingdom}`] = {};\n          }\n        }\n\n        if (animal.phylum) {\n          if (!Object.keys(taxonomy[`Kingdom: ${animal.kingdom}`]).includes(`Phylum: ${animal.phylum}`)) {\n            taxonomy[`Kingdom: ${animal.kingdom}`][`Phylum: ${animal.phylum}`] = {};\n          }\n        }\n      } //\n      // if(animal.phylum&animal.class){\n      //       if(!Object.keys(taxonomy[`${animal.phylum}`]).includes(animal.class)){\n      //         taxonomy[`${animal.phylum}`][`${animal.class}`]={}\n      //       }\n      //   }\n      //\n      //\n      // if(animal.class&&animal.order){\n      //     if(!Object.keys(taxonomy[`${animal.class}`]).includes(animal.order)){\n      //       taxonomy[`${animal.class}`][`${animal.order}`]={}\n      //     }\n      // }\n      //   if(animal.kingdom&&animal.phylum&&animal.class&&animal.order&&animal.family){\n      //   if(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`]){\n      //     if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`]).includes(animal.family)){\n      //       taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`]={}\n      //     }\n      //   }\n      // }\n      //\n      //   if(animal.kingdom&&animal.phylum&&animal.class&&animal.order&&animal.family&&animal.genus){\n      //   if(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`]){\n      //     if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`]).includes(animal.genus)){\n      //       taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`]={}\n      //     }\n      //   }\n      // }\n      // if(animal.kingdom&&animal.phylum&&animal.class&&animal.order&&animal.family&&animal.genus&&animal.species){\n      //   if(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`]){\n      //     if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`]).includes(animal.species)){\n      //       taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`][`${animal.species}`]={}\n      //     }\n      //   }\n      // }\n\n    }\n\n    console.log(taxonomy);\n    setTaxonomyTree(JSON.stringify(taxonomy));\n  }, [organisms]);\n\n  const sketch = p5 => {\n    let theta, input, button;\n    let numberofgroups = 0;\n\n    p5.setup = () => {\n      p5.createCanvas(1000, 1000);\n      p5.background(p5.color(255, 255, 255));\n      p5.stroke(255);\n      p5.strokeWeight(40); // Let's pick an angle 0 to 90 degrees based on the mouse position\n\n      let a = 15; // Convert it to radians\n\n      theta = p5.radians(a); // Start the tree from the bottom of the screen\n\n      p5.translate(p5.width / 2, p5.height); // Draw a line 120 pixels\n\n      p5.stroke(101, 67, 33);\n      p5.line(0, 0, 0, -200);\n\n      (async function () {\n        p5.translate(0, -200);\n        p5.rotate(-1.5708);\n        let taxonomy = JSON.parse(taxonomyTree);\n        delete taxonomy[`Kingdom: incertae sedis`];\n        let keys = Object.keys(taxonomy);\n        keys = keys.sort(() => Math.random() - 0.5);\n        keys = keys.slice(0, 6);\n        let radiangapbetweenbranches = 180 / keys.length * (Math.PI / 180);\n        p5.rotate(radiangapbetweenbranches / 2);\n        let radianprogress = -1.5708;\n\n        for (let [index, group] of keys.entries()) {\n          p5.push();\n          p5.rotate(1.5708);\n          p5.rotate(radianprogress);\n          p5.stroke(101, 67, 33);\n          p5.strokeWeight(30);\n          p5.line(0, 0, 0, -200);\n          p5.push();\n\n          if (radianprogress > -0.1) {\n            p5.translate(0, -90);\n            p5.rotate(-1.5708);\n          }\n\n          if (radianprogress <= -0.1) {\n            p5.translate(0, -180);\n            p5.rotate(1.5708);\n          }\n\n          p5.textSize(23);\n          p5.strokeWeight(2);\n          p5.stroke(0);\n          p5.fill(255);\n          p5.text(group.split(': ')[1], 10, 5);\n          p5.pop();\n          p5.translate(0, -200);\n          radianprogress = radianprogress + radiangapbetweenbranches;\n          branch(taxonomy[`${group}`], 160, radianprogress, group);\n          p5.pop();\n        }\n      })();\n    };\n\n    async function branch(group, size, radianprog, gr) {\n      p5.rotate(-1.5708);\n      let radianprogres = radianprog;\n      radianprogres = radianprogres - 1.5708;\n      let key = Object.keys(group);\n\n      if (key.length > 6) {\n        key = key.sort(() => Math.random() - 0.5);\n        key = key.slice(0, 6);\n      }\n\n      let radiangapbetweenbranches = 180 / key.length * (Math.PI / 180);\n      p5.rotate(radiangapbetweenbranches / 2);\n\n      for (let [index, grou] of key.entries()) {\n        p5.push();\n        p5.stroke(101, 67, 33);\n        p5.strokeWeight(size / 8);\n        p5.line(0, 0, 0, -size);\n        p5.push();\n        p5.stroke(0, 128, 0);\n        let x = Math.random();\n\n        if (x < 0.5) {\n          p5.ellipse(size / 4, 0, size / 4, size / 16);\n          p5.ellipse(-size / 4, -size / 2, size / 4, size / 16);\n          p5.ellipse(size / 4, -size, size / 4, size / 16);\n        } else {\n          p5.ellipse(-size / 4, 0, size / 4, size / 16);\n          p5.ellipse(size / 4, -size / 2, size / 4, size / 16);\n          p5.ellipse(-size / 4, -size, size / 4, size / 16);\n        }\n\n        p5.ellipse(0, -size, size / 16, size / 4);\n        p5.pop();\n        p5.push();\n\n        if (radianprogres > -0) {\n          p5.translate(0, -size / 10);\n          p5.rotate(-1.5708);\n        } else {\n          p5.translate(0, -size);\n          p5.rotate(1.5708);\n        }\n\n        p5.textSize(size / 10);\n        p5.strokeWeight(2);\n        p5.stroke(0);\n        p5.fill(255);\n        p5.text(grou.split(': ')[1], 10, 5);\n        p5.pop();\n        p5.pop();\n        radianprogres = radianprogres + radiangapbetweenbranches;\n        p5.rotate(radiangapbetweenbranches);\n      }\n    }\n\n    ;\n  };\n\n  let taxonom;\n  let keys;\n\n  if (taxonomyTree) {\n    taxonom = JSON.parse(taxonomyTree);\n    keys = Object.keys(taxonom);\n  }\n\n  let colors = [\"green\", \"red\", \"purple\", \"blue\", \"orange\", \"yellow\", \"pink\", \"green\", \"red\", \"purple\", \"blue\", \"orange\", \"yellow\", \"pink\"];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        width: \"100vw\"\n      },\n      children: keys && keys.map((key, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            backgroundColor: colors[index]\n          },\n          onClick: narrowOptions,\n          value: key,\n          children: key\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 39\n        }, this), taxonom[`${key}`] && Object.keys(taxonom[`${key}`]).map(item => /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            backgroundColor: colors[index]\n          },\n          onClick: narrowOptions,\n          value: item,\n          children: item\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 66\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 34\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(ReactP5Wrapper, {\n      sketch: sketch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Tree, \"gg2rnW5XmuYh05X1jdsxByeeT2g=\");\n\n_c = Tree;\n\nconst areEqual = (prevProps, nextProps) => true;\n\nexport default _c2 = /*#__PURE__*/React.memo(Tree, areEqual);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Tree\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useRef","useState","useEffect","ReactP5Wrapper","first","searchlevel","Tree","props","organisms","setOrganisms","taxonomyTree","setTaxonomyTree","fetch","then","response","json","JSON","parse","contents","results","catch","err","console","error","log","narrowOptions","term","target","value","split","highertaxonkey","usageKey","taxonomy","animal","kingdom","Object","keys","includes","phylum","stringify","sketch","p5","theta","input","button","numberofgroups","setup","createCanvas","background","color","stroke","strokeWeight","a","radians","translate","width","height","line","rotate","sort","Math","random","slice","radiangapbetweenbranches","length","PI","radianprogress","index","group","entries","push","textSize","fill","text","pop","branch","size","radianprog","gr","radianprogres","key","grou","x","ellipse","taxonom","colors","display","map","backgroundColor","item","areEqual","prevProps","nextProps","memo"],"sources":["C:/Users/Julia/OneDrive/Documents/completed-apps/tree-of-life-main/src/Tree.js"],"sourcesContent":["import React, {useRef,useState,useEffect} from \"react\";\r\nimport { ReactP5Wrapper } from \"react-p5-wrapper\";\r\nlet first=false\r\nlet searchlevel=\"kingdom\"\r\nfunction Tree(props) {\r\n  const [organisms,setOrganisms] = useState([]);\r\n  const [taxonomyTree,setTaxonomyTree] = useState('');\r\n\r\nuseEffect(()=>{\r\n  fetch('https://api.allorigins.win/get?url=https://api.gbif.org/v1/species?limit=1000')\r\n    .then(response => response.json())\r\n    .then(response =>JSON.parse(response.contents))\r\n    .then(response =>setOrganisms(response.results))\r\n    .catch(err => console.error(err));\r\n},[])\r\n\r\nuseEffect(()=>{\r\nconsole.log(taxonomyTree)\r\n},[taxonomyTree])\r\n\r\nasync function narrowOptions(term){\r\n  searchlevel=term.target.value.split(': ')[0]\r\n  console.log(\"narrowing options!!!!!\",term.target.value)\r\n  let highertaxonkey=await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/match?name=${term.target.value}`)\r\n    .then(response => response.json())\r\n    .then(response =>JSON.parse(response.contents))\r\n    .then(response =>{\r\n      console.log(response);\r\n      return response.usageKey})\r\n    .catch(err => console.error(err));\r\n    console.log(highertaxonkey)\r\n    await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/search?limit=100%26highertaxon_key=${highertaxonkey}`  )\r\n      .then(response => response.json())\r\n      .then(response =>JSON.parse(response.contents))\r\n      .then(response =>{\r\n        console.log(response.results);\r\n        setOrganisms(response.results);\r\n      }).catch(err => console.error(err));\r\n}\r\n\r\n\r\n//kingdom,phylum,class,order,family,genus,species\r\nuseEffect(()=>{\r\n  let taxonomy={}\r\n  for (let animal of organisms){\r\n    console.log(animal,taxonomy)\r\n    if(searchlevel==\"kingdom\"){\r\n      if(animal.kingdom){\r\n        if(!Object.keys(taxonomy).includes(`Kingdom: ${animal.kingdom}`)){\r\n          taxonomy[`Kingdom: ${animal.kingdom}`]={}\r\n        }\r\n      }\r\n\r\n      if (animal.phylum){\r\n            if(!Object.keys(taxonomy[`Kingdom: ${animal.kingdom}`]).includes(`Phylum: ${animal.phylum}`)){\r\n              taxonomy[`Kingdom: ${animal.kingdom}`][`Phylum: ${animal.phylum}`]={}\r\n            }\r\n          }\r\n    }\r\n\r\n\r\n\r\n      //\r\n      // if(animal.phylum&animal.class){\r\n      //       if(!Object.keys(taxonomy[`${animal.phylum}`]).includes(animal.class)){\r\n      //         taxonomy[`${animal.phylum}`][`${animal.class}`]={}\r\n      //       }\r\n      //   }\r\n      //\r\n      //\r\n      // if(animal.class&&animal.order){\r\n      //     if(!Object.keys(taxonomy[`${animal.class}`]).includes(animal.order)){\r\n      //       taxonomy[`${animal.class}`][`${animal.order}`]={}\r\n      //     }\r\n      // }\r\n\r\n\r\n    //   if(animal.kingdom&&animal.phylum&&animal.class&&animal.order&&animal.family){\r\n    //   if(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`]){\r\n    //     if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`]).includes(animal.family)){\r\n    //       taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`]={}\r\n    //     }\r\n    //   }\r\n    // }\r\n    //\r\n    //   if(animal.kingdom&&animal.phylum&&animal.class&&animal.order&&animal.family&&animal.genus){\r\n    //   if(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`]){\r\n    //     if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`]).includes(animal.genus)){\r\n    //       taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`]={}\r\n    //     }\r\n    //   }\r\n    // }\r\n    // if(animal.kingdom&&animal.phylum&&animal.class&&animal.order&&animal.family&&animal.genus&&animal.species){\r\n    //   if(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`]){\r\n    //     if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`]).includes(animal.species)){\r\n    //       taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`][`${animal.species}`]={}\r\n    //     }\r\n    //   }\r\n    // }\r\n\r\n  }\r\n  console.log(taxonomy)\r\n  setTaxonomyTree(JSON.stringify(taxonomy))\r\n},[organisms])\r\n\r\n\r\n  const sketch = (p5) => {\r\n\t\tlet theta,input,button\r\n    let numberofgroups=0\r\n\r\n    p5.setup = () => {\r\n\t\t\tp5.createCanvas(1000, 1000);\r\n\t\t   p5.background(p5.color(255,255,255));\r\n\t\t   p5.stroke(255);\r\n\t\t   p5.strokeWeight(40)\r\n\r\n\t\t   // Let's pick an angle 0 to 90 degrees based on the mouse position\r\n\t\t   let a = 15\r\n\t\t   // Convert it to radians\r\n\t\t   theta = p5.radians(a);\r\n\t\t   // Start the tree from the bottom of the screen\r\n\t\t   p5.translate(p5.width/2,p5.height);\r\n\t\t   // Draw a line 120 pixels\r\n\r\n\t\t   p5.stroke(101, 67, 33)\r\n\t\t   p5.line(0,0,0,-200);\r\n\r\n\r\n\r\n\t\t\t (async function(){\r\n         p5.translate(0,-200);\r\n         p5.rotate(-1.5708)\r\n         let taxonomy=JSON.parse(taxonomyTree)\r\n         delete taxonomy[`Kingdom: incertae sedis`]\r\n         let keys=Object.keys(taxonomy)\r\n         keys=keys.sort(() => Math.random() - 0.5);\r\n\r\n         keys=keys.slice(0,6)\r\n         let radiangapbetweenbranches=(180/keys.length) * (Math.PI / 180);\r\n         p5.rotate(radiangapbetweenbranches/2)\r\n         let radianprogress=-1.5708\r\n\r\n         for (let [index, group] of keys.entries()){\r\n           p5.push()\r\n           p5.rotate(1.5708)\r\n           p5.rotate(radianprogress)\r\n           p5.stroke(101, 67, 33)\r\n           p5.strokeWeight(30)\r\n    \t\t   p5.line(0,0,0,-200)\r\n           p5.push()\r\n           if(radianprogress>-0.1){\r\n             p5.translate(0,-90);\r\n             p5.rotate(-1.5708)\r\n           }\r\n           if(radianprogress<=-0.1){\r\n             p5.translate(0,-180);\r\n             p5.rotate(1.5708)\r\n           }\r\n          p5.textSize(23);\r\n          p5.strokeWeight(2)\r\n          p5.stroke(0)\r\n          p5.fill(255);\r\n          p5.text(group.split(': ')[1], 10, 5)\r\n          p5.pop()\r\n          p5.translate(0,-200);\r\n          radianprogress=radianprogress+radiangapbetweenbranches\r\n          branch(taxonomy[`${group}`],160,radianprogress,group)\r\n          p5.pop()\r\n\r\n         }\r\n\t\t  })()\r\n\t\t};\r\n\r\n  \t\tasync function branch(group,size,radianprog,gr){\r\n        p5.rotate(-1.5708)\r\n        let radianprogres=radianprog\r\n        radianprogres=radianprogres-1.5708\r\n        let key=Object.keys(group)\r\n        if(key.length>6){\r\n          key=key.sort(() => Math.random() - 0.5);\r\n          key=key.slice(0,6)\r\n        }\r\n        let radiangapbetweenbranches=(180/key.length) * (Math.PI / 180);\r\n        p5.rotate(radiangapbetweenbranches/2)\r\n        for (let [index, grou] of key.entries()){\r\n          p5.push()\r\n          p5.stroke(101, 67, 33)\r\n          p5.strokeWeight(size/8)\r\n          p5.line(0,0,0,-size)\r\n          p5.push()\r\n          p5.stroke(0,128,0)\r\n          let x=Math.random()\r\n          if(x<0.5){\r\n            p5.ellipse(size/4, 0, size/4, size/16);\r\n            p5.ellipse(-size/4, -size/2, size/4, size/16);\r\n            p5.ellipse(size/4, -size, size/4, size/16);\r\n          }else{\r\n            p5.ellipse(-size/4, 0, size/4, size/16);\r\n            p5.ellipse(size/4, -size/2, size/4, size/16);\r\n            p5.ellipse(-size/4, -size, size/4, size/16);\r\n          }\r\n          p5.ellipse(0, -size, size/16,size/4);\r\n\r\n\r\n          p5.pop()\r\n          p5.push()\r\n          if(radianprogres>-0){\r\n            p5.translate(0,-size/10);\r\n            p5.rotate(-1.5708)\r\n          }else{\r\n            p5.translate(0,-size);\r\n            p5.rotate(1.5708)\r\n          }\r\n         p5.textSize(size/10);\r\n         p5.strokeWeight(2)\r\n         p5.stroke(0)\r\n         p5.fill(255);\r\n         p5.text(grou.split(': ')[1], 10, 5)\r\n         p5.pop()\r\n\r\n         p5.pop()\r\n         radianprogres=radianprogres+radiangapbetweenbranches\r\n         p5.rotate(radiangapbetweenbranches)\r\n  \t\t}\r\n    };\r\n\r\n\r\n\r\n  };\r\n  let taxonom\r\n  let keys\r\n  if(taxonomyTree){\r\n    taxonom=JSON.parse(taxonomyTree)\r\n    keys=Object.keys(taxonom)\r\n  }\r\n\r\n  let colors=[\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\"]\r\n\r\n  return (<>\r\n    <div style={{display:\"flex\",width:\"100vw\"}}>\r\n    {keys&&keys.map((key,index)=><div><button style={{backgroundColor:colors[index]}} onClick={narrowOptions} value={key}>{key}</button>\r\n    {taxonom[`${key}`]&&Object.keys(taxonom[`${key}`]).map(item=><button style={{backgroundColor:colors[index]}}  onClick={narrowOptions} value={item}>{item}</button>)}\r\n    </div>)}\r\n    </div>\r\n    <ReactP5Wrapper sketch={sketch} /></>)\r\n}\r\nconst areEqual = (prevProps, nextProps) => true;\r\n\r\nexport default React.memo(Tree, areEqual);\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAsBC,QAAtB,EAA+BC,SAA/B,QAA+C,OAA/C;AACA,SAASC,cAAT,QAA+B,kBAA/B;;;AACA,IAAIC,KAAK,GAAC,KAAV;AACA,IAAIC,WAAW,GAAC,SAAhB;;AACA,SAASC,IAAT,CAAcC,KAAd,EAAqB;EAAA;;EACnB,MAAM,CAACC,SAAD,EAAWC,YAAX,IAA2BR,QAAQ,CAAC,EAAD,CAAzC;EACA,MAAM,CAACS,YAAD,EAAcC,eAAd,IAAiCV,QAAQ,CAAC,EAAD,CAA/C;EAEFC,SAAS,CAAC,MAAI;IACZU,KAAK,CAAC,+EAAD,CAAL,CACGC,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQC,QAAQ,IAAGE,IAAI,CAACC,KAAL,CAAWH,QAAQ,CAACI,QAApB,CAFnB,EAGGL,IAHH,CAGQC,QAAQ,IAAGL,YAAY,CAACK,QAAQ,CAACK,OAAV,CAH/B,EAIGC,KAJH,CAISC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAJhB;EAKD,CANQ,EAMP,EANO,CAAT;EAQAnB,SAAS,CAAC,MAAI;IACdoB,OAAO,CAACE,GAAR,CAAYd,YAAZ;EACC,CAFQ,EAEP,CAACA,YAAD,CAFO,CAAT;;EAIA,eAAee,aAAf,CAA6BC,IAA7B,EAAkC;IAChCrB,WAAW,GAACqB,IAAI,CAACC,MAAL,CAAYC,KAAZ,CAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,CAAZ;IACAP,OAAO,CAACE,GAAR,CAAY,wBAAZ,EAAqCE,IAAI,CAACC,MAAL,CAAYC,KAAjD;IACA,IAAIE,cAAc,GAAC,MAAMlB,KAAK,CAAE,iFAAgFc,IAAI,CAACC,MAAL,CAAYC,KAAM,EAApG,CAAL,CACtBf,IADsB,CACjBC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADK,EAEtBF,IAFsB,CAEjBC,QAAQ,IAAGE,IAAI,CAACC,KAAL,CAAWH,QAAQ,CAACI,QAApB,CAFM,EAGtBL,IAHsB,CAGjBC,QAAQ,IAAG;MACfQ,OAAO,CAACE,GAAR,CAAYV,QAAZ;MACA,OAAOA,QAAQ,CAACiB,QAAhB;IAAyB,CALJ,EAMtBX,KANsB,CAMhBC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CANS,CAAzB;IAOEC,OAAO,CAACE,GAAR,CAAYM,cAAZ;IACA,MAAMlB,KAAK,CAAE,yGAAwGkB,cAAe,EAAzH,CAAL,CACHjB,IADG,CACEC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADd,EAEHF,IAFG,CAEEC,QAAQ,IAAGE,IAAI,CAACC,KAAL,CAAWH,QAAQ,CAACI,QAApB,CAFb,EAGHL,IAHG,CAGEC,QAAQ,IAAG;MACfQ,OAAO,CAACE,GAAR,CAAYV,QAAQ,CAACK,OAArB;MACAV,YAAY,CAACK,QAAQ,CAACK,OAAV,CAAZ;IACD,CANG,EAMDC,KANC,CAMKC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CANZ,CAAN;EAOH,CAlCoB,CAqCrB;;;EACAnB,SAAS,CAAC,MAAI;IACZ,IAAI8B,QAAQ,GAAC,EAAb;;IACA,KAAK,IAAIC,MAAT,IAAmBzB,SAAnB,EAA6B;MAC3Bc,OAAO,CAACE,GAAR,CAAYS,MAAZ,EAAmBD,QAAnB;;MACA,IAAG3B,WAAW,IAAE,SAAhB,EAA0B;QACxB,IAAG4B,MAAM,CAACC,OAAV,EAAkB;UAChB,IAAG,CAACC,MAAM,CAACC,IAAP,CAAYJ,QAAZ,EAAsBK,QAAtB,CAAgC,YAAWJ,MAAM,CAACC,OAAQ,EAA1D,CAAJ,EAAiE;YAC/DF,QAAQ,CAAE,YAAWC,MAAM,CAACC,OAAQ,EAA5B,CAAR,GAAuC,EAAvC;UACD;QACF;;QAED,IAAID,MAAM,CAACK,MAAX,EAAkB;UACZ,IAAG,CAACH,MAAM,CAACC,IAAP,CAAYJ,QAAQ,CAAE,YAAWC,MAAM,CAACC,OAAQ,EAA5B,CAApB,EAAoDG,QAApD,CAA8D,WAAUJ,MAAM,CAACK,MAAO,EAAtF,CAAJ,EAA6F;YAC3FN,QAAQ,CAAE,YAAWC,MAAM,CAACC,OAAQ,EAA5B,CAAR,CAAwC,WAAUD,MAAM,CAACK,MAAO,EAAhE,IAAmE,EAAnE;UACD;QACF;MACN,CAd0B,CAkBzB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAGF;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;IAED;;IACDhB,OAAO,CAACE,GAAR,CAAYQ,QAAZ;IACArB,eAAe,CAACK,IAAI,CAACuB,SAAL,CAAeP,QAAf,CAAD,CAAf;EACD,CA7DQ,EA6DP,CAACxB,SAAD,CA7DO,CAAT;;EAgEE,MAAMgC,MAAM,GAAIC,EAAD,IAAQ;IACvB,IAAIC,KAAJ,EAAUC,KAAV,EAAgBC,MAAhB;IACE,IAAIC,cAAc,GAAC,CAAnB;;IAEAJ,EAAE,CAACK,KAAH,GAAW,MAAM;MAClBL,EAAE,CAACM,YAAH,CAAgB,IAAhB,EAAsB,IAAtB;MACEN,EAAE,CAACO,UAAH,CAAcP,EAAE,CAACQ,KAAH,CAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,CAAd;MACAR,EAAE,CAACS,MAAH,CAAU,GAAV;MACAT,EAAE,CAACU,YAAH,CAAgB,EAAhB,EAJgB,CAMhB;;MACA,IAAIC,CAAC,GAAG,EAAR,CAPgB,CAQhB;;MACAV,KAAK,GAAGD,EAAE,CAACY,OAAH,CAAWD,CAAX,CAAR,CATgB,CAUhB;;MACAX,EAAE,CAACa,SAAH,CAAab,EAAE,CAACc,KAAH,GAAS,CAAtB,EAAwBd,EAAE,CAACe,MAA3B,EAXgB,CAYhB;;MAEAf,EAAE,CAACS,MAAH,CAAU,GAAV,EAAe,EAAf,EAAmB,EAAnB;MACAT,EAAE,CAACgB,IAAH,CAAQ,CAAR,EAAU,CAAV,EAAY,CAAZ,EAAc,CAAC,GAAf;;MAID,CAAC,kBAAgB;QACZhB,EAAE,CAACa,SAAH,CAAa,CAAb,EAAe,CAAC,GAAhB;QACAb,EAAE,CAACiB,MAAH,CAAU,CAAC,MAAX;QACA,IAAI1B,QAAQ,GAAChB,IAAI,CAACC,KAAL,CAAWP,YAAX,CAAb;QACA,OAAOsB,QAAQ,CAAE,yBAAF,CAAf;QACA,IAAII,IAAI,GAACD,MAAM,CAACC,IAAP,CAAYJ,QAAZ,CAAT;QACAI,IAAI,GAACA,IAAI,CAACuB,IAAL,CAAU,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAAhC,CAAL;QAEAzB,IAAI,GAACA,IAAI,CAAC0B,KAAL,CAAW,CAAX,EAAa,CAAb,CAAL;QACA,IAAIC,wBAAwB,GAAE,MAAI3B,IAAI,CAAC4B,MAAV,IAAqBJ,IAAI,CAACK,EAAL,GAAU,GAA/B,CAA7B;QACAxB,EAAE,CAACiB,MAAH,CAAUK,wBAAwB,GAAC,CAAnC;QACA,IAAIG,cAAc,GAAC,CAAC,MAApB;;QAEA,KAAK,IAAI,CAACC,KAAD,EAAQC,KAAR,CAAT,IAA2BhC,IAAI,CAACiC,OAAL,EAA3B,EAA0C;UACxC5B,EAAE,CAAC6B,IAAH;UACA7B,EAAE,CAACiB,MAAH,CAAU,MAAV;UACAjB,EAAE,CAACiB,MAAH,CAAUQ,cAAV;UACAzB,EAAE,CAACS,MAAH,CAAU,GAAV,EAAe,EAAf,EAAmB,EAAnB;UACAT,EAAE,CAACU,YAAH,CAAgB,EAAhB;UACFV,EAAE,CAACgB,IAAH,CAAQ,CAAR,EAAU,CAAV,EAAY,CAAZ,EAAc,CAAC,GAAf;UACEhB,EAAE,CAAC6B,IAAH;;UACA,IAAGJ,cAAc,GAAC,CAAC,GAAnB,EAAuB;YACrBzB,EAAE,CAACa,SAAH,CAAa,CAAb,EAAe,CAAC,EAAhB;YACAb,EAAE,CAACiB,MAAH,CAAU,CAAC,MAAX;UACD;;UACD,IAAGQ,cAAc,IAAE,CAAC,GAApB,EAAwB;YACtBzB,EAAE,CAACa,SAAH,CAAa,CAAb,EAAe,CAAC,GAAhB;YACAb,EAAE,CAACiB,MAAH,CAAU,MAAV;UACD;;UACFjB,EAAE,CAAC8B,QAAH,CAAY,EAAZ;UACA9B,EAAE,CAACU,YAAH,CAAgB,CAAhB;UACAV,EAAE,CAACS,MAAH,CAAU,CAAV;UACAT,EAAE,CAAC+B,IAAH,CAAQ,GAAR;UACA/B,EAAE,CAACgC,IAAH,CAAQL,KAAK,CAACvC,KAAN,CAAY,IAAZ,EAAkB,CAAlB,CAAR,EAA8B,EAA9B,EAAkC,CAAlC;UACAY,EAAE,CAACiC,GAAH;UACAjC,EAAE,CAACa,SAAH,CAAa,CAAb,EAAe,CAAC,GAAhB;UACAY,cAAc,GAACA,cAAc,GAACH,wBAA9B;UACAY,MAAM,CAAC3C,QAAQ,CAAE,GAAEoC,KAAM,EAAV,CAAT,EAAsB,GAAtB,EAA0BF,cAA1B,EAAyCE,KAAzC,CAAN;UACA3B,EAAE,CAACiC,GAAH;QAEA;MACL,CAzCD;IA0CD,CA7DC;;IA+DA,eAAeC,MAAf,CAAsBP,KAAtB,EAA4BQ,IAA5B,EAAiCC,UAAjC,EAA4CC,EAA5C,EAA+C;MAC3CrC,EAAE,CAACiB,MAAH,CAAU,CAAC,MAAX;MACA,IAAIqB,aAAa,GAACF,UAAlB;MACAE,aAAa,GAACA,aAAa,GAAC,MAA5B;MACA,IAAIC,GAAG,GAAC7C,MAAM,CAACC,IAAP,CAAYgC,KAAZ,CAAR;;MACA,IAAGY,GAAG,CAAChB,MAAJ,GAAW,CAAd,EAAgB;QACdgB,GAAG,GAACA,GAAG,CAACrB,IAAJ,CAAS,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAA/B,CAAJ;QACAmB,GAAG,GAACA,GAAG,CAAClB,KAAJ,CAAU,CAAV,EAAY,CAAZ,CAAJ;MACD;;MACD,IAAIC,wBAAwB,GAAE,MAAIiB,GAAG,CAAChB,MAAT,IAAoBJ,IAAI,CAACK,EAAL,GAAU,GAA9B,CAA7B;MACAxB,EAAE,CAACiB,MAAH,CAAUK,wBAAwB,GAAC,CAAnC;;MACA,KAAK,IAAI,CAACI,KAAD,EAAQc,IAAR,CAAT,IAA0BD,GAAG,CAACX,OAAJ,EAA1B,EAAwC;QACtC5B,EAAE,CAAC6B,IAAH;QACA7B,EAAE,CAACS,MAAH,CAAU,GAAV,EAAe,EAAf,EAAmB,EAAnB;QACAT,EAAE,CAACU,YAAH,CAAgByB,IAAI,GAAC,CAArB;QACAnC,EAAE,CAACgB,IAAH,CAAQ,CAAR,EAAU,CAAV,EAAY,CAAZ,EAAc,CAACmB,IAAf;QACAnC,EAAE,CAAC6B,IAAH;QACA7B,EAAE,CAACS,MAAH,CAAU,CAAV,EAAY,GAAZ,EAAgB,CAAhB;QACA,IAAIgC,CAAC,GAACtB,IAAI,CAACC,MAAL,EAAN;;QACA,IAAGqB,CAAC,GAAC,GAAL,EAAS;UACPzC,EAAE,CAAC0C,OAAH,CAAWP,IAAI,GAAC,CAAhB,EAAmB,CAAnB,EAAsBA,IAAI,GAAC,CAA3B,EAA8BA,IAAI,GAAC,EAAnC;UACAnC,EAAE,CAAC0C,OAAH,CAAW,CAACP,IAAD,GAAM,CAAjB,EAAoB,CAACA,IAAD,GAAM,CAA1B,EAA6BA,IAAI,GAAC,CAAlC,EAAqCA,IAAI,GAAC,EAA1C;UACAnC,EAAE,CAAC0C,OAAH,CAAWP,IAAI,GAAC,CAAhB,EAAmB,CAACA,IAApB,EAA0BA,IAAI,GAAC,CAA/B,EAAkCA,IAAI,GAAC,EAAvC;QACD,CAJD,MAIK;UACHnC,EAAE,CAAC0C,OAAH,CAAW,CAACP,IAAD,GAAM,CAAjB,EAAoB,CAApB,EAAuBA,IAAI,GAAC,CAA5B,EAA+BA,IAAI,GAAC,EAApC;UACAnC,EAAE,CAAC0C,OAAH,CAAWP,IAAI,GAAC,CAAhB,EAAmB,CAACA,IAAD,GAAM,CAAzB,EAA4BA,IAAI,GAAC,CAAjC,EAAoCA,IAAI,GAAC,EAAzC;UACAnC,EAAE,CAAC0C,OAAH,CAAW,CAACP,IAAD,GAAM,CAAjB,EAAoB,CAACA,IAArB,EAA2BA,IAAI,GAAC,CAAhC,EAAmCA,IAAI,GAAC,EAAxC;QACD;;QACDnC,EAAE,CAAC0C,OAAH,CAAW,CAAX,EAAc,CAACP,IAAf,EAAqBA,IAAI,GAAC,EAA1B,EAA6BA,IAAI,GAAC,CAAlC;QAGAnC,EAAE,CAACiC,GAAH;QACAjC,EAAE,CAAC6B,IAAH;;QACA,IAAGS,aAAa,GAAC,CAAC,CAAlB,EAAoB;UAClBtC,EAAE,CAACa,SAAH,CAAa,CAAb,EAAe,CAACsB,IAAD,GAAM,EAArB;UACAnC,EAAE,CAACiB,MAAH,CAAU,CAAC,MAAX;QACD,CAHD,MAGK;UACHjB,EAAE,CAACa,SAAH,CAAa,CAAb,EAAe,CAACsB,IAAhB;UACAnC,EAAE,CAACiB,MAAH,CAAU,MAAV;QACD;;QACFjB,EAAE,CAAC8B,QAAH,CAAYK,IAAI,GAAC,EAAjB;QACAnC,EAAE,CAACU,YAAH,CAAgB,CAAhB;QACAV,EAAE,CAACS,MAAH,CAAU,CAAV;QACAT,EAAE,CAAC+B,IAAH,CAAQ,GAAR;QACA/B,EAAE,CAACgC,IAAH,CAAQQ,IAAI,CAACpD,KAAL,CAAW,IAAX,EAAiB,CAAjB,CAAR,EAA6B,EAA7B,EAAiC,CAAjC;QACAY,EAAE,CAACiC,GAAH;QAEAjC,EAAE,CAACiC,GAAH;QACAK,aAAa,GAACA,aAAa,GAAChB,wBAA5B;QACAtB,EAAE,CAACiB,MAAH,CAAUK,wBAAV;MACJ;IACA;;IAAA;EAIF,CA1HD;;EA2HA,IAAIqB,OAAJ;EACA,IAAIhD,IAAJ;;EACA,IAAG1B,YAAH,EAAgB;IACd0E,OAAO,GAACpE,IAAI,CAACC,KAAL,CAAWP,YAAX,CAAR;IACA0B,IAAI,GAACD,MAAM,CAACC,IAAP,CAAYgD,OAAZ,CAAL;EACD;;EAED,IAAIC,MAAM,GAAC,CAAC,OAAD,EAAS,KAAT,EAAe,QAAf,EAAwB,MAAxB,EAA+B,QAA/B,EAAwC,QAAxC,EAAiD,MAAjD,EAAwD,OAAxD,EAAgE,KAAhE,EAAsE,QAAtE,EAA+E,MAA/E,EAAsF,QAAtF,EAA+F,QAA/F,EAAwG,MAAxG,CAAX;EAEA,oBAAQ;IAAA,wBACN;MAAK,KAAK,EAAE;QAACC,OAAO,EAAC,MAAT;QAAgB/B,KAAK,EAAC;MAAtB,CAAZ;MAAA,UACCnB,IAAI,IAAEA,IAAI,CAACmD,GAAL,CAAS,CAACP,GAAD,EAAKb,KAAL,kBAAa;QAAA,wBAAK;UAAQ,KAAK,EAAE;YAACqB,eAAe,EAACH,MAAM,CAAClB,KAAD;UAAvB,CAAf;UAAgD,OAAO,EAAE1C,aAAzD;UAAwE,KAAK,EAAEuD,GAA/E;UAAA,UAAqFA;QAArF;UAAA;UAAA;UAAA;QAAA,QAAL,EAC5BI,OAAO,CAAE,GAAEJ,GAAI,EAAR,CAAP,IAAmB7C,MAAM,CAACC,IAAP,CAAYgD,OAAO,CAAE,GAAEJ,GAAI,EAAR,CAAnB,EAA+BO,GAA/B,CAAmCE,IAAI,iBAAE;UAAQ,KAAK,EAAE;YAACD,eAAe,EAACH,MAAM,CAAClB,KAAD;UAAvB,CAAf;UAAiD,OAAO,EAAE1C,aAA1D;UAAyE,KAAK,EAAEgE,IAAhF;UAAA,UAAuFA;QAAvF;UAAA;UAAA;UAAA;QAAA,QAAzC,CADS;MAAA;QAAA;QAAA;QAAA;MAAA,QAAtB;IADP;MAAA;MAAA;MAAA;IAAA,QADM,eAMN,QAAC,cAAD;MAAgB,MAAM,EAAEjD;IAAxB;MAAA;MAAA;MAAA;IAAA,QANM;EAAA,gBAAR;AAOD;;GAjPQlC,I;;KAAAA,I;;AAkPT,MAAMoF,QAAQ,GAAG,CAACC,SAAD,EAAYC,SAAZ,KAA0B,IAA3C;;AAEA,kCAAe7F,KAAK,CAAC8F,IAAN,CAAWvF,IAAX,EAAiBoF,QAAjB,CAAf"},"metadata":{},"sourceType":"module"}