{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Julia\\\\OneDrive\\\\Documents\\\\completed-apps\\\\tree-of-life-main\\\\src\\\\Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { ReactP5Wrapper } from \"react-p5-wrapper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet searchlevel = \"\";\nlet history = [\"\"];\n\nfunction Tree(props) {\n  _s();\n\n  const [organisms, setOrganisms] = useState([]);\n  const [taxonomyTree, setTaxonomyTree] = useState('');\n  useEffect(() => {\n    getHighestLevelOrganismData();\n  }, []);\n\n  function getHighestLevelOrganismData() {\n    fetch('https://api.allorigins.win/get?url=https://api.gbif.org/v1/species?limit=1000').then(response => response.json()).then(response => JSON.parse(response.contents)).then(response => {\n      console.log(\"getting data\", response.results);\n      setOrganisms(response.results);\n    }).catch(err => console.error(err));\n  }\n\n  function upOneLevel(event) {\n    console.log(\"searchlevel before\", searchlevel);\n\n    if (searchlevel == \"Kingdom\") {\n      searchlevel = \"\";\n    }\n\n    if (searchlevel == \"Phylum\") {\n      searchlevel = \"Kingdom\";\n    }\n\n    if (searchlevel == \"Class\") {\n      searchlevel = \"Phylum\";\n    }\n\n    if (searchlevel == \"Order\") {\n      searchlevel = \"Class\";\n    }\n\n    if (searchlevel == \"Family\") {\n      searchlevel = \"Order\";\n    }\n\n    if (searchlevel == \"Genus\") {\n      searchlevel = \"Family\";\n    }\n\n    if (searchlevel == \"Species\") {\n      searchlevel = \"Genus\";\n    }\n\n    console.log(\"searchlevel after\", searchlevel);\n    console.log(\"history\", history);\n    history.pop();\n    console.log(\"history\", history);\n    console.log(history[history.length - 1]);\n\n    if (history[history.length - 1] == \"\") {\n      console.log(\"getting highest level\");\n      searchlevel = \"\";\n      getHighestLevelOrganismData();\n    } else {\n      narrowOptions(history[history.length - 1], false);\n    }\n  }\n\n  async function narrowOptions(term, goingdown) {\n    searchlevel = term.target.value.split(': ')[0];\n    let searchterm = term.target.value.split(': ')[1];\n\n    if (goingdown) {\n      history.push(term);\n    }\n\n    let highertaxonkey = await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/match?name=${searchterm}`).then(response => response.json()).then(response => JSON.parse(response.contents)).then(response => {\n      return response.usageKey;\n    }).catch(err => console.error(err));\n    console.log(highertaxonkey);\n    await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/search?limit=100%26highertaxon_key=${highertaxonkey}`).then(response => response.json()).then(response => JSON.parse(response.contents)).then(response => {\n      console.log(response.results);\n      setOrganisms(response.results);\n    }).catch(err => console.error(err));\n  } //kingdom,phylum,class,order,family,genus,species\n\n\n  useEffect(() => {\n    let taxonomy = {};\n\n    for (let animal of organisms) {\n      if (searchlevel == \"\") {\n        if (animal.kingdom) {\n          if (!Object.keys(taxonomy).includes(`Kingdom: ${animal.kingdom}`)) {\n            taxonomy[`Kingdom: ${animal.kingdom}`] = {};\n          }\n        }\n\n        if (animal.phylum) {\n          if (!Object.keys(taxonomy[`Kingdom: ${animal.kingdom}`]).includes(`Phylum: ${animal.phylum}`)) {\n            taxonomy[`Kingdom: ${animal.kingdom}`][`Phylum: ${animal.phylum}`] = {};\n          }\n        }\n      }\n\n      if (searchlevel == \"Kingdom\") {\n        if (animal.phylum) {\n          if (!Object.keys(taxonomy).includes(`Phylum: ${animal.phylum}`)) {\n            taxonomy[`Phylum: ${animal.phylum}`] = {};\n          }\n        }\n\n        if (animal.class) {\n          if (!Object.keys(taxonomy[`Phylum: ${animal.phylum}`]).includes(`Class: ${animal.class}`)) {\n            taxonomy[`Phylum: ${animal.phylum}`][`Class: ${animal.class}`] = {};\n          }\n        }\n      }\n\n      if (searchlevel == \"Phylum\") {\n        if (animal.class) {\n          if (!Object.keys(taxonomy).includes(`Class: ${animal.class}`)) {\n            taxonomy[`Class: ${animal.class}`] = {};\n          }\n        }\n\n        if (animal.order) {\n          if (!Object.keys(taxonomy[`Class: ${animal.class}`]).includes(`Order: ${animal.order}`)) {\n            taxonomy[`Class: ${animal.class}`][`Order: ${animal.order}`] = {};\n          }\n        }\n      }\n\n      if (searchlevel == \"Class\") {\n        if (animal.order) {\n          if (!Object.keys(taxonomy).includes(`Order: ${animal.order}`)) {\n            taxonomy[`Order: ${animal.order}`] = {};\n          }\n        }\n\n        if (animal.family) {\n          if (!Object.keys(taxonomy[`Order: ${animal.order}`]).includes(`Family: ${animal.family}`)) {\n            taxonomy[`Order: ${animal.order}`][`Family: ${animal.family}`] = {};\n          }\n        }\n      }\n\n      if (searchlevel == \"Order\") {\n        if (animal.family) {\n          if (!Object.keys(taxonomy).includes(`Family: ${animal.family}`)) {\n            taxonomy[`Family: ${animal.family}`] = {};\n          }\n        }\n\n        if (animal.genus) {\n          if (!Object.keys(taxonomy[`Family: ${animal.family}`]).includes(`Genus: ${animal.genus}`)) {\n            taxonomy[`Family: ${animal.family}`][`Genus: ${animal.genus}`] = {};\n          }\n        }\n      }\n\n      if (searchlevel == \"Family\") {\n        if (animal.genus) {\n          if (!Object.keys(taxonomy).includes(`Genus: ${animal.genus}`)) {\n            taxonomy[`Genus: ${animal.genus}`] = {};\n          }\n        }\n\n        if (animal.species) {\n          if (!Object.keys(taxonomy[`Genus: ${animal.genus}`]).includes(`Species: ${animal.species}`)) {\n            taxonomy[`Genus: ${animal.genus}`][`Species: ${animal.species}`] = {};\n          }\n        }\n      }\n\n      if (searchlevel == \"Genus\") {\n        if (animal.species) {\n          if (!Object.keys(taxonomy).includes(`Species: ${animal.species}`)) {\n            taxonomy[`Species: ${animal.species}`] = {};\n          }\n        }\n      }\n    }\n\n    delete taxonomy[`Kingdom: incertae sedis`];\n    delete taxonomy[`Phylum: incertae sedis`];\n    delete taxonomy[`Class: incertae sedis`];\n    delete taxonomy[`Order: incertae sedis`];\n    delete taxonomy[`Family: incertae sedis`];\n    delete taxonomy[`Genus: incertae sedis`];\n    delete taxonomy[`Species: incertae sedis`];\n    console.log(\"getting taxonomy\", taxonomy);\n    setTaxonomyTree(JSON.stringify(taxonomy));\n  }, [organisms]);\n\n  const sketch = p5 => {\n    let theta, input, button;\n    let numberofgroups = 0;\n\n    p5.setup = () => {\n      p5.createCanvas(1000, 1000);\n      p5.background(p5.color(255, 255, 255));\n      p5.stroke(255);\n      p5.strokeWeight(40); // Let's pick an angle 0 to 90 degrees based on the mouse position\n\n      let a = 15; // Convert it to radians\n\n      theta = p5.radians(a); // Start the tree from the bottom of the screen\n\n      p5.translate(p5.width / 2, p5.height); // Draw a line 120 pixels\n\n      p5.stroke(101, 67, 33);\n      p5.line(0, 0, 0, -200);\n\n      (async function () {\n        p5.translate(0, -200);\n        p5.rotate(-1.5708);\n        console.log(\"taxonomy tree\", taxonomyTree);\n        let taxonomy = JSON.parse(taxonomyTree);\n        let keys = Object.keys(taxonomy);\n        keys = keys.sort(() => Math.random() - 0.5);\n        keys = keys.slice(0, 6);\n        let radiangapbetweenbranches = 180 / keys.length * (Math.PI / 180);\n        p5.rotate(radiangapbetweenbranches / 2);\n        let radianprogress = -1.5708;\n\n        for (let [index, group] of keys.entries()) {\n          p5.push();\n          p5.rotate(1.5708);\n          p5.rotate(radianprogress);\n          p5.stroke(101, 67, 33);\n          p5.strokeWeight(30);\n          p5.line(0, 0, 0, -200);\n          p5.push();\n\n          if (radianprogress > -0.1) {\n            p5.translate(0, -90);\n            p5.rotate(-1.5708);\n          }\n\n          if (radianprogress <= -0.1) {\n            p5.translate(0, -180);\n            p5.rotate(1.5708);\n          }\n\n          p5.textSize(23);\n          p5.strokeWeight(2);\n          p5.stroke(0);\n          p5.fill(255);\n          p5.text(group.split(': ')[1], 10, 5);\n          p5.pop();\n          p5.translate(0, -200);\n          radianprogress = radianprogress + radiangapbetweenbranches;\n          branch(taxonomy[`${group}`], 160, radianprogress, group);\n          p5.pop();\n        }\n      })();\n    };\n\n    async function branch(group, size, radianprog, gr) {\n      p5.rotate(-1.5708);\n      let radianprogres = radianprog;\n      radianprogres = radianprogres - 1.5708;\n      let key = Object.keys(group);\n\n      if (key.length > 6) {\n        key = key.sort(() => Math.random() - 0.5);\n        key = key.slice(0, 6);\n      }\n\n      let radiangapbetweenbranches = 180 / key.length * (Math.PI / 180);\n      p5.rotate(radiangapbetweenbranches / 2);\n\n      for (let [index, grou] of key.entries()) {\n        p5.push();\n        p5.stroke(101, 67, 33);\n        p5.strokeWeight(size / 8);\n        p5.line(0, 0, 0, -size);\n        p5.push();\n        p5.stroke(0, 128, 0);\n        let x = Math.random();\n\n        if (x < 0.5) {\n          p5.ellipse(size / 4, 0, size / 4, size / 16);\n          p5.ellipse(-size / 4, -size / 2, size / 4, size / 16);\n          p5.ellipse(size / 4, -size, size / 4, size / 16);\n        } else {\n          p5.ellipse(-size / 4, 0, size / 4, size / 16);\n          p5.ellipse(size / 4, -size / 2, size / 4, size / 16);\n          p5.ellipse(-size / 4, -size, size / 4, size / 16);\n        }\n\n        p5.ellipse(0, -size, size / 16, size / 4);\n        p5.pop();\n        p5.push();\n\n        if (radianprogres > -0) {\n          p5.translate(0, -size / 10);\n          p5.rotate(-1.5708);\n        } else {\n          p5.translate(0, -size);\n          p5.rotate(1.5708);\n        }\n\n        p5.textSize(size / 10);\n        p5.strokeWeight(2);\n        p5.stroke(0);\n        p5.fill(255);\n        p5.text(grou.split(': ')[1], 10, 5);\n        p5.pop();\n        p5.pop();\n        radianprogres = radianprogres + radiangapbetweenbranches;\n        p5.rotate(radiangapbetweenbranches);\n      }\n    }\n\n    ;\n  };\n\n  let taxonom;\n  let keys;\n  let titleone;\n  let titletwo;\n\n  if (taxonomyTree) {\n    taxonom = JSON.parse(taxonomyTree);\n    keys = Object.keys(taxonom);\n\n    if (keys.length > 0) {\n      titleone = keys[1];\n      titleone = titleone.split(\": \");\n      titleone = titleone[0];\n    }\n  } //kingdom,phylum,class,order,family,genus,species\n\n\n  if (titleone == \"Kingdom\") {\n    titletwo = \"Phylum\";\n  }\n\n  if (titleone == \"Phylum\") {\n    titletwo = \"Class\";\n  }\n\n  if (titleone == \"Class\") {\n    titletwo = \"Order\";\n  }\n\n  if (titleone == \"Order\") {\n    titletwo = \"Family\";\n  }\n\n  if (titleone == \"Family\") {\n    titletwo = \"Genus\";\n  }\n\n  if (titleone == \"Genus\") {\n    titletwo = \"Species\";\n  }\n\n  console.log(\"titleone\", titleone);\n  let colors = [\"green\", \"red\", \"purple\", \"blue\", \"orange\", \"yellow\", \"pink\", \"green\", \"red\", \"purple\", \"blue\", \"orange\", \"yellow\", \"pink\"];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        width: \"100vw\",\n        maxHeight: \"100vh\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: searchlevel && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            margin: \"1vw\",\n            maxWidth: \"20vw\",\n            display: \"inline\"\n          },\n          onClick: upOneLevel,\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: \"1vw\",\n          maxWidth: \"20vw\",\n          display: \"inline\"\n        },\n        children: keys && keys.map((key, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: titleone && /*#__PURE__*/_jsxDEV(\"h3\", {\n              style: {\n                margin: \"0.5vw\"\n              },\n              children: titleone\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 55\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 39\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              backgroundColor: colors[index],\n              display: \"block\"\n            },\n            onClick: e => narrowOptions(e, true),\n            value: key,\n            children: key.split(\": \")[1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 106\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: titletwo && /*#__PURE__*/_jsxDEV(\"h4\", {\n              style: {\n                margin: \"0.5vw\"\n              },\n              children: titletwo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 266\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 250\n          }, this), taxonom[`${key}`] && Object.keys(taxonom[`${key}`]).map(item => /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              backgroundColor: colors[index],\n              display: \"block\"\n            },\n            onClick: e => narrowOptions(e, true),\n            value: item,\n            children: item.split(\": \")[1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 66\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 34\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ReactP5Wrapper, {\n        sketch: sketch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Tree, \"fzFE99JvY8wCeFrgw3/gXhL1f3Y=\");\n\n_c = Tree;\n\nconst areEqual = (prevProps, nextProps) => true;\n\nexport default _c2 = /*#__PURE__*/React.memo(Tree, areEqual);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Tree\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useRef","useState","useEffect","ReactP5Wrapper","searchlevel","history","Tree","props","organisms","setOrganisms","taxonomyTree","setTaxonomyTree","getHighestLevelOrganismData","fetch","then","response","json","JSON","parse","contents","console","log","results","catch","err","error","upOneLevel","event","pop","length","narrowOptions","term","goingdown","target","value","split","searchterm","push","highertaxonkey","usageKey","taxonomy","animal","kingdom","Object","keys","includes","phylum","class","order","family","genus","species","stringify","sketch","p5","theta","input","button","numberofgroups","setup","createCanvas","background","color","stroke","strokeWeight","a","radians","translate","width","height","line","rotate","sort","Math","random","slice","radiangapbetweenbranches","PI","radianprogress","index","group","entries","textSize","fill","text","branch","size","radianprog","gr","radianprogres","key","grou","x","ellipse","taxonom","titleone","titletwo","colors","display","maxHeight","margin","maxWidth","map","backgroundColor","e","item","areEqual","prevProps","nextProps","memo"],"sources":["C:/Users/Julia/OneDrive/Documents/completed-apps/tree-of-life-main/src/Tree.js"],"sourcesContent":["import React, {useRef,useState,useEffect} from \"react\";\r\nimport { ReactP5Wrapper } from \"react-p5-wrapper\";\r\nlet searchlevel=\"\"\r\nlet history=[\"\"]\r\nfunction Tree(props) {\r\n  const [organisms,setOrganisms] = useState([]);\r\n  const [taxonomyTree,setTaxonomyTree] = useState('');\r\n\r\n  useEffect(()=>{\r\n getHighestLevelOrganismData()\r\n  },[])\r\n\r\nfunction getHighestLevelOrganismData(){\r\n  fetch('https://api.allorigins.win/get?url=https://api.gbif.org/v1/species?limit=1000')\r\n  .then(response => response.json())\r\n  .then(response =>JSON.parse(response.contents))\r\n  .then(response =>{console.log(\"getting data\",response.results);setOrganisms(response.results)})\r\n  .catch(err => console.error(err));\r\n}\r\n\r\n  function upOneLevel(event){\r\nconsole.log(\"searchlevel before\",searchlevel)\r\n    if(searchlevel==\"Kingdom\"){\r\n      searchlevel=\"\"\r\n    }\r\n    if(searchlevel==\"Phylum\"){\r\n      searchlevel=\"Kingdom\"\r\n    }\r\n    if(searchlevel==\"Class\"){\r\n      searchlevel=\"Phylum\"\r\n    }\r\n    if(searchlevel==\"Order\"){\r\n      searchlevel=\"Class\"\r\n    }\r\n    if(searchlevel==\"Family\"){\r\n      searchlevel=\"Order\"\r\n    }\r\n    if(searchlevel==\"Genus\"){\r\n      searchlevel=\"Family\"\r\n    }\r\n    if(searchlevel==\"Species\"){\r\n      searchlevel=\"Genus\"\r\n    }\r\n    console.log(\"searchlevel after\",searchlevel)\r\n    console.log(\"history\",history)\r\n    history.pop()\r\n    console.log(\"history\",history)\r\n    console.log(history[history.length-1])\r\n\r\n    if (history[history.length-1]==\"\"){\r\n      console.log(\"getting highest level\")\r\n      searchlevel=\"\"\r\n       getHighestLevelOrganismData()\r\n    }else{\r\n    narrowOptions(history[history.length-1],false)\r\n    }\r\n  }\r\n\r\n  async function narrowOptions(term,goingdown){\r\n    searchlevel=term.target.value.split(': ')[0]\r\n    let searchterm=term.target.value.split(': ')[1]\r\n    if(goingdown){\r\n      history.push(term)\r\n    }\r\n    let highertaxonkey=await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/match?name=${searchterm}`)\r\n      .then(response => response.json())\r\n      .then(response =>JSON.parse(response.contents))\r\n      .then(response =>{\r\n        return response.usageKey})\r\n        .catch(err => console.error(err));\r\n        console.log(highertaxonkey)\r\n        await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/search?limit=100%26highertaxon_key=${highertaxonkey}`  )\r\n          .then(response => response.json())\r\n          .then(response =>JSON.parse(response.contents))\r\n          .then(response =>{\r\n            console.log(response.results);\r\n            setOrganisms(response.results);\r\n          }).catch(err => console.error(err));\r\n        }\r\n\r\n\r\n        //kingdom,phylum,class,order,family,genus,species\r\n        useEffect(()=>{\r\n          let taxonomy={}\r\n          for (let animal of organisms){\r\n            if(searchlevel==\"\"){\r\n              if(animal.kingdom){\r\n                if(!Object.keys(taxonomy).includes(`Kingdom: ${animal.kingdom}`)){\r\n                  taxonomy[`Kingdom: ${animal.kingdom}`]={}\r\n                }\r\n              }\r\n              if (animal.phylum){\r\n                if(!Object.keys(taxonomy[`Kingdom: ${animal.kingdom}`]).includes(`Phylum: ${animal.phylum}`)){\r\n                  taxonomy[`Kingdom: ${animal.kingdom}`][`Phylum: ${animal.phylum}`]={}\r\n                }\r\n              }\r\n            }\r\n\r\n            if(searchlevel==\"Kingdom\"){\r\n              if(animal.phylum){\r\n                if(!Object.keys(taxonomy).includes(`Phylum: ${animal.phylum}`)){\r\n                  taxonomy[`Phylum: ${animal.phylum}`]={}\r\n                }\r\n              }\r\n              if (animal.class){\r\n                if(!Object.keys(taxonomy[`Phylum: ${animal.phylum}`]).includes(`Class: ${animal.class}`)){\r\n                  taxonomy[`Phylum: ${animal.phylum}`][`Class: ${animal.class}`]={}\r\n                }\r\n              }\r\n            }\r\n\r\n            if(searchlevel==\"Phylum\"){\r\n              if (animal.class){\r\n                if(!Object.keys(taxonomy).includes(`Class: ${animal.class}`)){\r\n                  taxonomy[`Class: ${animal.class}`]={}\r\n                }\r\n              }\r\n              if (animal.order){\r\n                if(!Object.keys(taxonomy[`Class: ${animal.class}`]).includes(`Order: ${animal.order}`)){\r\n                  taxonomy[`Class: ${animal.class}`][`Order: ${animal.order}`]={}\r\n                }\r\n              }\r\n            }\r\n\r\n            if(searchlevel==\"Class\"){\r\n              if (animal.order){\r\n                if(!Object.keys(taxonomy).includes(`Order: ${animal.order}`)){\r\n                  taxonomy[`Order: ${animal.order}`]={}\r\n                }\r\n              }\r\n              if (animal.family){\r\n                if(!Object.keys(taxonomy[`Order: ${animal.order}`]).includes(`Family: ${animal.family}`)){\r\n                  taxonomy[`Order: ${animal.order}`][`Family: ${animal.family}`]={}\r\n                }\r\n              }\r\n            }\r\n\r\n            if(searchlevel==\"Order\"){\r\n              if (animal.family){\r\n                if(!Object.keys(taxonomy).includes(`Family: ${animal.family}`)){\r\n                  taxonomy[`Family: ${animal.family}`]={}\r\n                }\r\n              }\r\n              if (animal.genus){\r\n                if(!Object.keys(taxonomy[`Family: ${animal.family}`]).includes(`Genus: ${animal.genus}`)){\r\n                  taxonomy[`Family: ${animal.family}`][`Genus: ${animal.genus}`]={}\r\n                }\r\n              }\r\n            }\r\n\r\n            if(searchlevel==\"Family\"){\r\n              if (animal.genus){\r\n                if(!Object.keys(taxonomy).includes(`Genus: ${animal.genus}`)){\r\n                  taxonomy[`Genus: ${animal.genus}`]={}\r\n                }\r\n              }\r\n              if (animal.species){\r\n                if(!Object.keys(taxonomy[`Genus: ${animal.genus}`]).includes(`Species: ${animal.species}`)){\r\n                  taxonomy[`Genus: ${animal.genus}`][`Species: ${animal.species}`]={}\r\n                }\r\n              }\r\n            }\r\n            if(searchlevel==\"Genus\"){\r\n              if (animal.species){\r\n                if(!Object.keys(taxonomy).includes(`Species: ${animal.species}`)){\r\n                  taxonomy[`Species: ${animal.species}`]={}\r\n                }\r\n              }\r\n            }\r\n          }\r\n          delete taxonomy[`Kingdom: incertae sedis`]\r\n          delete taxonomy[`Phylum: incertae sedis`]\r\n          delete taxonomy[`Class: incertae sedis`]\r\n          delete taxonomy[`Order: incertae sedis`]\r\n          delete taxonomy[`Family: incertae sedis`]\r\n          delete taxonomy[`Genus: incertae sedis`]\r\n          delete taxonomy[`Species: incertae sedis`]\r\n      console.log(\"getting taxonomy\",taxonomy);\r\n          setTaxonomyTree(JSON.stringify(taxonomy))\r\n        },[organisms])\r\n\r\n\r\n        const sketch = (p5) => {\r\n          let theta,input,button\r\n          let numberofgroups=0\r\n\r\n          p5.setup = () => {\r\n            p5.createCanvas(1000, 1000);\r\n            p5.background(p5.color(255,255,255));\r\n            p5.stroke(255);\r\n            p5.strokeWeight(40)\r\n\r\n            // Let's pick an angle 0 to 90 degrees based on the mouse position\r\n            let a = 15\r\n            // Convert it to radians\r\n            theta = p5.radians(a);\r\n            // Start the tree from the bottom of the screen\r\n            p5.translate(p5.width/2,p5.height);\r\n            // Draw a line 120 pixels\r\n\r\n\t\t   p5.stroke(101, 67, 33)\r\n\t\t   p5.line(0,0,0,-200);\r\n\r\n\r\n\r\n\t\t\t (async function(){\r\n         p5.translate(0,-200);\r\n         p5.rotate(-1.5708)\r\n         console.log(\"taxonomy tree\",taxonomyTree)\r\n         let taxonomy=JSON.parse(taxonomyTree)\r\n         let keys=Object.keys(taxonomy)\r\n         keys=keys.sort(() => Math.random() - 0.5);\r\n\r\n         keys=keys.slice(0,6)\r\n         let radiangapbetweenbranches=(180/keys.length) * (Math.PI / 180);\r\n         p5.rotate(radiangapbetweenbranches/2)\r\n         let radianprogress=-1.5708\r\n\r\n         for (let [index, group] of keys.entries()){\r\n           p5.push()\r\n           p5.rotate(1.5708)\r\n           p5.rotate(radianprogress)\r\n           p5.stroke(101, 67, 33)\r\n           p5.strokeWeight(30)\r\n    \t\t   p5.line(0,0,0,-200)\r\n           p5.push()\r\n           if(radianprogress>-0.1){\r\n             p5.translate(0,-90);\r\n             p5.rotate(-1.5708)\r\n           }\r\n           if(radianprogress<=-0.1){\r\n             p5.translate(0,-180);\r\n             p5.rotate(1.5708)\r\n           }\r\n          p5.textSize(23);\r\n          p5.strokeWeight(2)\r\n          p5.stroke(0)\r\n          p5.fill(255);\r\n          p5.text(group.split(': ')[1], 10, 5)\r\n          p5.pop()\r\n          p5.translate(0,-200);\r\n          radianprogress=radianprogress+radiangapbetweenbranches\r\n          branch(taxonomy[`${group}`],160,radianprogress,group)\r\n          p5.pop()\r\n\r\n         }\r\n\t\t  })()\r\n\t\t};\r\n\r\n  \t\tasync function branch(group,size,radianprog,gr){\r\n        p5.rotate(-1.5708)\r\n        let radianprogres=radianprog\r\n        radianprogres=radianprogres-1.5708\r\n        let key=Object.keys(group)\r\n        if(key.length>6){\r\n          key=key.sort(() => Math.random() - 0.5);\r\n          key=key.slice(0,6)\r\n        }\r\n        let radiangapbetweenbranches=(180/key.length) * (Math.PI / 180);\r\n        p5.rotate(radiangapbetweenbranches/2)\r\n        for (let [index, grou] of key.entries()){\r\n          p5.push()\r\n          p5.stroke(101, 67, 33)\r\n          p5.strokeWeight(size/8)\r\n          p5.line(0,0,0,-size)\r\n          p5.push()\r\n          p5.stroke(0,128,0)\r\n          let x=Math.random()\r\n          if(x<0.5){\r\n            p5.ellipse(size/4, 0, size/4, size/16);\r\n            p5.ellipse(-size/4, -size/2, size/4, size/16);\r\n            p5.ellipse(size/4, -size, size/4, size/16);\r\n          }else{\r\n            p5.ellipse(-size/4, 0, size/4, size/16);\r\n            p5.ellipse(size/4, -size/2, size/4, size/16);\r\n            p5.ellipse(-size/4, -size, size/4, size/16);\r\n          }\r\n          p5.ellipse(0, -size, size/16,size/4);\r\n\r\n\r\n          p5.pop()\r\n          p5.push()\r\n          if(radianprogres>-0){\r\n            p5.translate(0,-size/10);\r\n            p5.rotate(-1.5708)\r\n          }else{\r\n            p5.translate(0,-size);\r\n            p5.rotate(1.5708)\r\n          }\r\n         p5.textSize(size/10);\r\n         p5.strokeWeight(2)\r\n         p5.stroke(0)\r\n         p5.fill(255);\r\n         p5.text(grou.split(': ')[1], 10, 5)\r\n         p5.pop()\r\n\r\n         p5.pop()\r\n         radianprogres=radianprogres+radiangapbetweenbranches\r\n         p5.rotate(radiangapbetweenbranches)\r\n  \t\t}\r\n    };\r\n\r\n\r\n\r\n  };\r\n  let taxonom\r\n  let keys\r\n  let titleone\r\n  let titletwo\r\n\r\n  if(taxonomyTree){\r\n    taxonom=JSON.parse(taxonomyTree)\r\n    keys=Object.keys(taxonom)\r\n    if (keys.length>0){\r\n      titleone=keys[1]\r\n      titleone=titleone.split(\": \")\r\n      titleone=titleone[0]\r\n    }\r\n  }        //kingdom,phylum,class,order,family,genus,species\r\n\r\n  if(titleone==\"Kingdom\"){\r\n    titletwo=\"Phylum\"\r\n  }\r\n  if(titleone==\"Phylum\"){\r\n    titletwo=\"Class\"\r\n  }\r\n  if(titleone==\"Class\"){\r\n    titletwo=\"Order\"\r\n  }\r\n  if(titleone==\"Order\"){\r\n    titletwo=\"Family\"\r\n  }\r\n  if(titleone==\"Family\"){\r\n    titletwo=\"Genus\"\r\n  }\r\n  if(titleone==\"Genus\"){\r\n    titletwo=\"Species\"\r\n  }\r\n\r\n\r\n  console.log(\"titleone\",titleone)\r\n\r\n  let colors=[\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\"]\r\n\r\n  return (<>\r\n    <div style={{display:\"flex\",width:\"100vw\",maxHeight:\"100vh\"}}>\r\n    <div>\r\n    {searchlevel&&<button style={{margin:\"1vw\",maxWidth:\"20vw\",display:\"inline\"}} onClick={upOneLevel}>Back</button>}\r\n    </div>\r\n    <div style={{margin:\"1vw\",maxWidth:\"20vw\",display:\"inline\"}}>\r\n    {keys&&keys.map((key,index)=><div><div>{titleone&&<h3 style={{margin:\"0.5vw\"}}>{titleone}</h3>}</div><button style={{backgroundColor:colors[index],display:\"block\"}} onClick={(e) => narrowOptions(e,true)} value={key}>{key.split(\": \")[1]}</button><div>{titletwo&&<h4  style={{margin:\"0.5vw\"}}>{titletwo}</h4>}</div>\r\n    {taxonom[`${key}`]&&Object.keys(taxonom[`${key}`]).map(item=><button style={{backgroundColor:colors[index],display:\"block\"}}  onClick={(e) => narrowOptions(e,true)} value={item}>{item.split(\": \")[1]}</button>)}\r\n    </div>)}\r\n    </div>\r\n    </div>\r\n    <div>\r\n    <ReactP5Wrapper sketch={sketch} /></div></>)\r\n}\r\nconst areEqual = (prevProps, nextProps) => true;\r\n\r\nexport default React.memo(Tree, areEqual);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}