{"ast":null,"code":"import _asyncToGenerator from\"C:/Users/Julia/OneDrive/Documents/completed-apps/tree-of-life-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _createForOfIteratorHelper from\"C:/Users/Julia/OneDrive/Documents/completed-apps/tree-of-life-main/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _slicedToArray from\"C:/Users/Julia/OneDrive/Documents/completed-apps/tree-of-life-main/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"C:\\\\Users\\\\Julia\\\\OneDrive\\\\Documents\\\\completed-apps\\\\tree-of-life-main\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import React,{useRef,useState,useEffect}from\"react\";import{ReactP5Wrapper}from\"react-p5-wrapper\";import pot from\"./pot.png\";import garden from\"./garden.jpg\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var searchlevel=\"\";var history=[\"\"];var trunklabel=\"Life\";var trunklabellevel=\"\";var description=\"\";var img=\"\";var descriptions=[];var searchword=\"\";function Tree(props){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),taxonomyTree=_useState2[0],setTaxonomyTree=_useState2[1];var _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),loading=_useState4[0],setLoading=_useState4[1];useEffect(function(){getHighestLevelOrganismData();},[]);function makeTaxonomyTree(organisms){var taxonomy={};var _iterator=_createForOfIteratorHelper(organisms),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var animal=_step.value;if(searchlevel==\"\"){if(animal.kingdom&&animal.phylum){if(animal.kingdom){if(!Object.keys(taxonomy).includes(\"Kingdom: \".concat(animal.kingdom))){taxonomy[\"Kingdom: \".concat(animal.kingdom)]={};}}if(animal.phylum){if(!Object.keys(taxonomy[\"Kingdom: \".concat(animal.kingdom)]).includes(\"Phylum: \".concat(animal.phylum))){taxonomy[\"Kingdom: \".concat(animal.kingdom)][\"Phylum: \".concat(animal.phylum)]={};}}}}if(searchlevel==\"Kingdom\"){if(animal.phylum&&animal.class){if(animal.phylum){if(!Object.keys(taxonomy).includes(\"Phylum: \".concat(animal.phylum))){taxonomy[\"Phylum: \".concat(animal.phylum)]={};}}if(animal.class){if(!Object.keys(taxonomy[\"Phylum: \".concat(animal.phylum)]).includes(\"Class: \".concat(animal.class))){taxonomy[\"Phylum: \".concat(animal.phylum)][\"Class: \".concat(animal.class)]={};}}}}if(searchlevel==\"Phylum\"){if(animal.class&&animal.order){if(animal.class){if(!Object.keys(taxonomy).includes(\"Class: \".concat(animal.class))){taxonomy[\"Class: \".concat(animal.class)]={};}}if(animal.order){if(!Object.keys(taxonomy[\"Class: \".concat(animal.class)]).includes(\"Order: \".concat(animal.order))){taxonomy[\"Class: \".concat(animal.class)][\"Order: \".concat(animal.order)]={};}}}}if(searchlevel==\"Class\"){if(animal.order&&animal.family){if(animal.order){if(!Object.keys(taxonomy).includes(\"Order: \".concat(animal.order))){taxonomy[\"Order: \".concat(animal.order)]={};}}if(animal.family){if(!Object.keys(taxonomy[\"Order: \".concat(animal.order)]).includes(\"Family: \".concat(animal.family))){taxonomy[\"Order: \".concat(animal.order)][\"Family: \".concat(animal.family)]={};}}}}if(searchlevel==\"Order\"){if(animal.family&&animal.genus){if(animal.family){if(!Object.keys(taxonomy).includes(\"Family: \".concat(animal.family))){taxonomy[\"Family: \".concat(animal.family)]={};}}if(animal.genus){if(!Object.keys(taxonomy[\"Family: \".concat(animal.family)]).includes(\"Genus: \".concat(animal.genus))){taxonomy[\"Family: \".concat(animal.family)][\"Genus: \".concat(animal.genus)]={};}}}}if(searchlevel==\"Family\"){if(animal.genus&&animal.species){if(animal.genus){if(!Object.keys(taxonomy).includes(\"Genus: \".concat(animal.genus))){taxonomy[\"Genus: \".concat(animal.genus)]={};}}if(animal.species){if(!Object.keys(taxonomy[\"Genus: \".concat(animal.genus)]).includes(\"Species: \".concat(animal.species))){taxonomy[\"Genus: \".concat(animal.genus)][\"Species: \".concat(animal.species)]={};}}}}if(searchlevel==\"Genus\"){if(animal.species){if(!Object.keys(taxonomy).includes(\"Species: \".concat(animal.species))){taxonomy[\"Species: \".concat(animal.species)]={};}}}}}catch(err){_iterator.e(err);}finally{_iterator.f();}delete taxonomy[\"Kingdom: incertae sedis\"];delete taxonomy[\"Phylum: incertae sedis\"];delete taxonomy[\"Class: incertae sedis\"];delete taxonomy[\"Order: incertae sedis\"];delete taxonomy[\"Family: incertae sedis\"];delete taxonomy[\"Genus: incertae sedis\"];delete taxonomy[\"Species: incertae sedis\"];console.log(\"getting taxonomy\",taxonomy);setTaxonomyTree(JSON.stringify(taxonomy));}function getHighestLevelOrganismData(){return _getHighestLevelOrganismData.apply(this,arguments);}function _getHighestLevelOrganismData(){_getHighestLevelOrganismData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var options;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:setLoading(true);descriptions={};img='';options={method:'GET',headers:{'X-RapidAPI-Host':'wiki-briefs.p.rapidapi.com','X-RapidAPI-Key':'24f2c04f41msh794ec7d5b9283dcp1ebdf7jsn01969526d5ac'}};_context3.next=6;return fetch(\"https://wiki-briefs.p.rapidapi.com/search?q=life&topk=6\",options).then(function(response){return response.json();}).then(function(response){console.log(response,\"WIKIPEDIA\");img=response.image;description=response.summary.join('\\r\\n');}).catch(function(err){return console.error(err);});case 6:_context3.next=8;return fetch('https://api.allorigins.win/get?url=https://api.gbif.org/v1/species?limit=1000').then(function(response){return response.json();}).then(function(response){return JSON.parse(response.contents);}).then(function(response){console.log(\"getting data\",response.results);makeTaxonomyTree(response.results);}).catch(function(err){return console.error(err);});case 8:setLoading(false);case 9:case\"end\":return _context3.stop();}}},_callee3);}));return _getHighestLevelOrganismData.apply(this,arguments);}function upOneLevel(_x){return _upOneLevel.apply(this,arguments);}function _upOneLevel(){_upOneLevel=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(event){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:console.log(\"searchlevel before\",searchlevel);if(searchlevel==\"Kingdom\"){searchlevel=\"\";}if(searchlevel==\"Phylum\"){searchlevel=\"Kingdom\";}if(searchlevel==\"Class\"){searchlevel=\"Phylum\";}if(searchlevel==\"Order\"){searchlevel=\"Class\";}if(searchlevel==\"Family\"){searchlevel=\"Order\";}if(searchlevel==\"Genus\"){searchlevel=\"Family\";}if(searchlevel==\"Species\"){searchlevel=\"Genus\";}console.log(\"searchlevel after\",searchlevel);console.log(\"history\",history);history.pop();console.log(\"history\",history);console.log(history[history.length-1]);if(!(history[history.length-1]==\"\")){_context4.next=20;break;}console.log(\"getting highest level\");searchlevel=\"\";_context4.next=18;return getHighestLevelOrganismData();case 18:_context4.next=22;break;case 20:_context4.next=22;return narrowOptions(history[history.length-1],false);case 22:case\"end\":return _context4.stop();}}},_callee4);}));return _upOneLevel.apply(this,arguments);}function narrowOptions(_x2,_x3,_x4){return _narrowOptions.apply(this,arguments);}function _narrowOptions(){_narrowOptions=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(term,goingdown,secondcategory){var searchterm,termtwo,termone,highertaxonkey,options;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:setLoading(true);searchlevel=term.target.value.split(': ')[0];searchterm=term.target.value.split(': ')[1];trunklabel=term.target.value.split(': ')[1];trunklabellevel=term.target.value.split(': ')[0];console.log(term.target.value,secondcategory);if(goingdown){if(secondcategory){termtwo={};termtwo.target={};termtwo.target.value=secondcategory;history.push(termtwo);}termone={};termone.target={};termone.target.value=term.target.value;history.push(term);}console.log(term.target.value,secondcategory);_context5.next=10;return fetch(\"https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/match?\".concat(trunklabellevel.toLowerCase(),\"=\").concat(searchterm)).then(function(response){return response.json();}).then(function(response){return JSON.parse(response.contents);}).then(function(response){return response.usageKey;}).catch(function(err){return console.error(err);});case 10:highertaxonkey=_context5.sent;console.log(highertaxonkey);_context5.next=14;return fetch(\"https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/\".concat(highertaxonkey,\"/media\")).then(function(response){return response.json();}).then(function(response){return JSON.parse(response.contents);}).then(function(response){console.log(\"IMAGES\",response.results);if(response.results.length>0){console.log(\"GETTING IMAGE\");img=response[\"results\"][0][\"identifier\"];}}).catch(function(err){return console.error(err);});case 14:options={method:'GET',headers:{'X-RapidAPI-Host':'wiki-briefs.p.rapidapi.com','X-RapidAPI-Key':'24f2c04f41msh794ec7d5b9283dcp1ebdf7jsn01969526d5ac'}};_context5.next=17;return fetch(\"https://wiki-briefs.p.rapidapi.com/search?q=\".concat(searchterm,\"&topk=6\"),options).then(function(response){return response.json();}).then(function(response){console.log(response,\"WIKIPEDIA\");img=response.image;description=response.summary.join('\\r\\n');}).catch(function(err){return console.error(err);});case 17:_context5.next=19;return fetch(\"https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/search?limit=100%26highertaxon_key=\".concat(highertaxonkey)).then(function(response){return response.json();}).then(function(response){return JSON.parse(response.contents);}).then(function(response){console.log(response.results);makeTaxonomyTree(response.results);}).catch(function(err){return console.error(err);});case 19:setLoading(false);case 20:case\"end\":return _context5.stop();}}},_callee5);}));return _narrowOptions.apply(this,arguments);}function search(){return _search.apply(this,arguments);}function _search(){_search=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(){var highertaxonkey,options;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:setLoading(true);console.log(\"https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/match?name=\".concat(searchword));_context6.next=4;return fetch(\"https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/match?name=\".concat(searchword)).then(function(response){return response.json();}).then(function(response){return JSON.parse(response.contents);}).then(function(response){return response.usageKey;}).catch(function(err){return console.error(err);});case 4:highertaxonkey=_context6.sent;console.log(highertaxonkey);options={method:'GET',headers:{'X-RapidAPI-Host':'wiki-briefs.p.rapidapi.com','X-RapidAPI-Key':'24f2c04f41msh794ec7d5b9283dcp1ebdf7jsn01969526d5ac'}};_context6.next=9;return fetch(\"https://wiki-briefs.p.rapidapi.com/search?q=\".concat(searchword,\"&topk=6\"),options).then(function(response){return response.json();}).then(function(response){console.log(response,\"WIKIPEDIA\");img=response.image;description=response.summary.join('\\r\\n');}).catch(function(err){return console.error(err);});case 9:_context6.next=11;return fetch(\"https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/\".concat(highertaxonkey,\"/media\")).then(function(response){return response.json();}).then(function(response){return JSON.parse(response.contents);}).then(function(response){console.log(\"IMAGES\",response.results);if(response.results.length>0){console.log(\"GETTING IMAGE\");img=response[\"results\"][0][\"identifier\"];}}).catch(function(err){return console.error(err);});case 11:_context6.next=13;return fetch(\"https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/search?limit=100%26highertaxon_key=\".concat(highertaxonkey)).then(function(response){return response.json();}).then(function(response){return JSON.parse(response.contents);}).then(function(response){console.log(response.results);history=[\"\"];var animal=response.results[0];if(animal.kingdom){var historyitem={};historyitem.target={};historyitem.target.value=\"Kingdom: \".concat(animal.kingdom);history.push(historyitem);searchlevel=\"Kingdom\";}if(animal.phylum){var _historyitem={};_historyitem.target={};_historyitem.target.value=\"Phylum: \".concat(animal.phylum);history.push(_historyitem);searchlevel=\"Phylum\";}if(animal.class){var _historyitem2={};_historyitem2.target={};_historyitem2.target.value=\"Class: \".concat(animal.class);history.push(_historyitem2);searchlevel=\"Class\";}if(animal.order){var _historyitem3={};_historyitem3.target={};_historyitem3.target.value=\"Order: \".concat(animal.order);history.push(_historyitem3);searchlevel=\"Order\";}if(animal.family){var _historyitem4={};_historyitem4.target={};_historyitem4.target.value=\"Family: \".concat(animal.family);history.push(_historyitem4);searchlevel=\"Family\";}if(animal.genus){var _historyitem5={};_historyitem5.target={};_historyitem5.target.value=\"Genus: \".concat(animal.genus);history.push(_historyitem5);searchlevel=\"Genus\";}if(animal.species){var _historyitem6={};_historyitem6.target={};_historyitem6.target.value=\"Species: \".concat(animal.species);history.push(_historyitem6);searchlevel=\"Species\";}console.log(response.results[0],history,\"HISTORY\");makeTaxonomyTree(response.results);}).catch(function(err){return console.error(err);});case 13:setLoading(false);case 14:case\"end\":return _context6.stop();}}},_callee6);}));return _search.apply(this,arguments);}var sketch=function sketch(p5){var theta,input,button;var numberofgroups=0;p5.setup=function(){if(taxonomyTree){p5.createCanvas(p5.windowWidth,p5.windowHeight,p5.CANVAS);p5.clear();p5.stroke(255);p5.strokeWeight(40);var a=15;theta=p5.radians(a);p5.translate(350,p5.height-100);p5.stroke(101,67,33);p5.line(0,0,0,-180);p5.textSize(27);p5.strokeWeight(2);p5.stroke(0);p5.fill(255);p5.push();p5.translate(0,-20);p5.rotate(-1.5708);p5.text(trunklabel,10,5);p5.pop();_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var taxonomy,keys,radiangapbetweenbranches,radianprogress,_iterator2,_step2,_step2$value,index,group;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:p5.translate(0,-180);p5.rotate(-1.5708);taxonomy=JSON.parse(taxonomyTree);keys=Object.keys(taxonomy);keys=keys.sort(function(){return Math.random()-0.5;});keys=keys.slice(0,6);radiangapbetweenbranches=180/keys.length*(Math.PI/180);p5.rotate(radiangapbetweenbranches/2);radianprogress=-1.5708;_iterator2=_createForOfIteratorHelper(keys.entries());try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){_step2$value=_slicedToArray(_step2.value,2),index=_step2$value[0],group=_step2$value[1];p5.push();p5.rotate(1.5708);p5.rotate(radianprogress);p5.stroke(101,67,33);p5.strokeWeight(30);p5.line(0,0,0,-180);p5.push();if(radianprogress>-0.1){p5.translate(0,-70);p5.rotate(-1.5708);}if(radianprogress<=-0.1){p5.translate(0,-160);p5.rotate(1.5708);}p5.textSize(23);p5.strokeWeight(2);p5.stroke(0);p5.fill(255);p5.text(group.split(': ')[1],10,5);p5.pop();p5.translate(0,-180);radianprogress=radianprogress+radiangapbetweenbranches;branch(taxonomy[\"\".concat(group)],140,radianprogress,group);p5.pop();}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}case 11:case\"end\":return _context.stop();}}},_callee);}))();};};function branch(_x5,_x6,_x7,_x8){return _branch.apply(this,arguments);}function _branch(){_branch=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(group,size,radianprog,gr){var radianprogres,key,radiangapbetweenbranches,_iterator3,_step3,_step3$value,index,grou,x;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:p5.rotate(-1.5708);radianprogres=radianprog;radianprogres=radianprogres-1.5708;key=Object.keys(group);if(key.length>6){key=key.sort(function(){return Math.random()-0.5;});key=key.slice(0,6);}radiangapbetweenbranches=180/key.length*(Math.PI/180);p5.rotate(radiangapbetweenbranches/2);_iterator3=_createForOfIteratorHelper(key.entries());try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){_step3$value=_slicedToArray(_step3.value,2),index=_step3$value[0],grou=_step3$value[1];p5.push();p5.stroke(101,67,33);p5.strokeWeight(size/8);p5.line(0,0,0,-size);p5.push();p5.stroke(0,128,0);x=Math.random();if(x<0.5){p5.ellipse(size/4,0,size/4,size/16);p5.ellipse(-size/4,-size/2,size/4,size/16);p5.ellipse(size/4,-size,size/4,size/16);}else{p5.ellipse(-size/4,0,size/4,size/16);p5.ellipse(size/4,-size/2,size/4,size/16);p5.ellipse(-size/4,-size,size/4,size/16);}p5.ellipse(0,-size,size/16,size/4);p5.pop();p5.push();if(radianprogres>-0){p5.translate(0,-size/10);p5.rotate(-1.5708);}else{p5.translate(0,-size);p5.rotate(1.5708);}p5.textSize(size/10);p5.strokeWeight(2);p5.stroke(0);p5.fill(255);p5.text(grou.split(': ')[1],10,5);p5.pop();p5.pop();radianprogres=radianprogres+radiangapbetweenbranches;p5.rotate(radiangapbetweenbranches);}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}case 9:case\"end\":return _context2.stop();}}},_callee2);}));return _branch.apply(this,arguments);};};var taxonom;var keys;var titleone;var titletwo;if(taxonomyTree){taxonom=JSON.parse(taxonomyTree);console.log(taxonom);keys=Object.keys(taxonom);console.log(\"keys\",keys);if(keys.length>0){titleone=keys[0];titleone=titleone.split(\": \");titleone=titleone[0];}}if(titleone==\"Kingdom\"){titletwo=\"Phylum\";}if(titleone==\"Phylum\"){titletwo=\"Class\";}if(titleone==\"Class\"){titletwo=\"Order\";}if(titleone==\"Order\"){titletwo=\"Family\";}if(titleone==\"Family\"){titletwo=\"Genus\";}if(titleone==\"Genus\"){titletwo=\"Species\";}console.log(\"titleone\",titleone);var colors=[\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\"];var histor=[];if(history){if(history.length>1){console.log(history);histor=history.map(function(item){if(item!==\"\"){return item.target.value;}});histor.shift();}}function handleChange(event){console.log(event.target.value);searchword=event.target.value;}console.log(histor,\"histor\");return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:loading?\"inline\":\"none\",margin:\"4vw\",padding:\"4vw\",top:\"100px\",left:\"100px\"},children:[/*#__PURE__*/_jsx(\"div\",{class:\"loader\",style:{margin:\"4vw\"}}),/*#__PURE__*/_jsx(\"h1\",{style:{marginLeft:\"4vw\",fontSize:\"250%\",display:\"inline\",color:\"#3498db\"},children:\"Loading\"})]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:loading?\"none\":\"block\"},children:[/*#__PURE__*/_jsx(\"div\",{style:{transform:\"translateY(-100px)\"},children:/*#__PURE__*/_jsx(ReactP5Wrapper,{sketch:sketch})}),/*#__PURE__*/_jsxs(\"div\",{style:{width:\"100vw\",margin:\"0\"},children:[/*#__PURE__*/_jsx(\"img\",{src:garden,style:{width:\"100vw\",height:\"100vh\",top:\"0\",left:\"0\",position:\"absolute\",zIndex:\"-10\"}}),/*#__PURE__*/_jsx(\"img\",{src:pot,style:{width:\"150px\",position:\"absolute\",color:\"white\",zIndex:\"-2\",top:\"550px\",marginLeft:\"275px\"}}),/*#__PURE__*/_jsxs(\"h1\",{style:{paddingLeft:\"2vw\",paddingTop:\"0\",marginTop:\"0\"},children:[trunklabellevel,\" \",trunklabel]}),(img||description)&&/*#__PURE__*/_jsxs(\"div\",{style:{width:\"100vw\",display:\"flex\"},children:[/*#__PURE__*/_jsx(\"div\",{style:{width:\"46vw\",marginLeft:\"2vw\"},children:img&&/*#__PURE__*/_jsx(\"img\",{style:{width:\"42vw\"},src:img})}),/*#__PURE__*/_jsx(\"div\",{style:{width:\"46vw\",marginRight:\"2vw\"},children:description&&/*#__PURE__*/_jsx(\"h4\",{style:{marginTop:\"0\",marginLeft:\"0\"},children:description})})]}),/*#__PURE__*/_jsx(\"hr\",{}),/*#__PURE__*/_jsxs(\"div\",{style:{marginLeft:\"2vw\"},children:[/*#__PURE__*/_jsx(\"input\",{onChange:handleChange}),/*#__PURE__*/_jsx(\"button\",{onClick:search,children:\"Submit Search\"}),/*#__PURE__*/_jsx(\"div\",{style:{paddingBottom:\"0\",marginBottom:\"0\",paddingTop:\"0.5vh\",marginTop:\"0.5vh\"},children:histor.length>0&&histor.map(function(item,index){return/*#__PURE__*/_jsxs(\"h5\",{style:{display:\"inline\",marginTop:\"0vh\"},children:[item,index<histor.length-1&&/*#__PURE__*/_jsx(_Fragment,{children:\"/ \"})]});})})]}),/*#__PURE__*/_jsxs(\"h2\",{style:{paddingLeft:\"2vw\",paddingBottom:\"0\",marginBottom:\"0\",paddingTop:\"0.5vh\",marginTop:\"0.5vh\"},children:[\"Subcategories of \",trunklabellevel,\": \",trunklabel]}),/*#__PURE__*/_jsx(\"div\",{style:{paddingLeft:\"2vw\",marginTop:\"0.5vh\"},children:searchlevel&&/*#__PURE__*/_jsx(\"button\",{style:{maxWidth:\"20vw\",display:\"inline\"},onClick:upOneLevel,children:\"Up One Level\"})}),/*#__PURE__*/_jsx(\"div\",{style:{display:\"flex\",width:\"100vw\",overflowX:\"scroll\"},children:keys&&keys.map(function(key,index){return/*#__PURE__*/_jsxs(\"div\",{style:{marginLeft:\"2vw\",width:\"20vw\"},children:[/*#__PURE__*/_jsx(\"div\",{children:titleone&&/*#__PURE__*/_jsx(\"h3\",{children:titleone})}),/*#__PURE__*/_jsx(\"button\",{style:{backgroundColor:colors[index],display:\"block\"},onClick:function onClick(e){return narrowOptions(e,true);},value:key,children:key.split(\": \")[1]}),Object.keys(taxonom[\"\".concat(key)]).length>0&&/*#__PURE__*/_jsx(\"div\",{children:titletwo&&/*#__PURE__*/_jsx(\"h4\",{children:titletwo})}),taxonom[\"\".concat(key)]&&Object.keys(taxonom[\"\".concat(key)]).map(function(item){return/*#__PURE__*/_jsx(\"button\",{style:{backgroundColor:colors[index],display:\"block\"},onClick:function onClick(e){return narrowOptions(e,true,key);},value:item,children:item.split(\": \")[1]});})]});})})]})]})]});}var areEqual=function areEqual(prevProps,nextProps){return true;};export default/*#__PURE__*/React.memo(Tree,areEqual);","map":{"version":3,"names":["React","useRef","useState","useEffect","ReactP5Wrapper","pot","garden","searchlevel","history","trunklabel","trunklabellevel","description","img","descriptions","searchword","Tree","props","taxonomyTree","setTaxonomyTree","loading","setLoading","getHighestLevelOrganismData","makeTaxonomyTree","organisms","taxonomy","animal","kingdom","phylum","Object","keys","includes","class","order","family","genus","species","console","log","JSON","stringify","options","method","headers","fetch","then","response","json","image","summary","join","catch","err","error","parse","contents","results","upOneLevel","event","pop","length","narrowOptions","term","goingdown","secondcategory","target","value","split","searchterm","termtwo","push","termone","toLowerCase","usageKey","highertaxonkey","search","historyitem","sketch","p5","theta","input","button","numberofgroups","setup","createCanvas","windowWidth","windowHeight","CANVAS","clear","stroke","strokeWeight","a","radians","translate","height","line","textSize","fill","rotate","text","sort","Math","random","slice","radiangapbetweenbranches","PI","radianprogress","entries","index","group","branch","size","radianprog","gr","radianprogres","key","grou","x","ellipse","taxonom","titleone","titletwo","colors","histor","map","item","shift","handleChange","display","margin","padding","top","left","marginLeft","fontSize","color","transform","width","position","zIndex","paddingLeft","paddingTop","marginTop","marginRight","paddingBottom","marginBottom","maxWidth","overflowX","backgroundColor","e","areEqual","prevProps","nextProps","memo"],"sources":["C:/Users/Julia/OneDrive/Documents/completed-apps/tree-of-life-main/src/Tree.js"],"sourcesContent":["import React, {useRef,useState,useEffect} from \"react\";\r\nimport { ReactP5Wrapper } from \"react-p5-wrapper\";\r\nimport pot from \"./pot.png\";\r\nimport garden from \"./garden.jpg\";\r\n\r\nvar searchlevel=\"\"\r\nvar history=[\"\"]\r\nvar trunklabel=\"Life\"\r\nvar trunklabellevel=\"\"\r\nvar description=\"\"\r\nvar img=\"\"\r\nvar descriptions=[]\r\nvar searchword=\"\"\r\nfunction Tree(props) {\r\n  const [taxonomyTree,setTaxonomyTree] = useState('');\r\n  const [loading,setLoading] = useState(true);\r\n\r\n  useEffect(()=>{\r\n    getHighestLevelOrganismData()\r\n  },[])\r\n\r\n  function makeTaxonomyTree(organisms){\r\n    let taxonomy={}\r\n    for (let animal of organisms){\r\n      if(searchlevel==\"\"){\r\n        if(animal.kingdom&&animal.phylum){\r\n          if(animal.kingdom){\r\n            if(!Object.keys(taxonomy).includes(`Kingdom: ${animal.kingdom}`)){\r\n              taxonomy[`Kingdom: ${animal.kingdom}`]={}\r\n            }\r\n          }\r\n          if (animal.phylum){\r\n            if(!Object.keys(taxonomy[`Kingdom: ${animal.kingdom}`]).includes(`Phylum: ${animal.phylum}`)){\r\n              taxonomy[`Kingdom: ${animal.kingdom}`][`Phylum: ${animal.phylum}`]={}\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if(searchlevel==\"Kingdom\"){\r\n        if(animal.phylum&&animal.class){\r\n          if(animal.phylum){\r\n            if(!Object.keys(taxonomy).includes(`Phylum: ${animal.phylum}`)){\r\n              taxonomy[`Phylum: ${animal.phylum}`]={}\r\n            }\r\n          }\r\n          if (animal.class){\r\n            if(!Object.keys(taxonomy[`Phylum: ${animal.phylum}`]).includes(`Class: ${animal.class}`)){\r\n              taxonomy[`Phylum: ${animal.phylum}`][`Class: ${animal.class}`]={}\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if(searchlevel==\"Phylum\"){\r\n        if(animal.class&&animal.order){\r\n          if (animal.class){\r\n            if(!Object.keys(taxonomy).includes(`Class: ${animal.class}`)){\r\n              taxonomy[`Class: ${animal.class}`]={}\r\n            }\r\n          }\r\n          if (animal.order){\r\n            if(!Object.keys(taxonomy[`Class: ${animal.class}`]).includes(`Order: ${animal.order}`)){\r\n              taxonomy[`Class: ${animal.class}`][`Order: ${animal.order}`]={}\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if(searchlevel==\"Class\"){\r\n        if(animal.order&&animal.family){\r\n          if (animal.order){\r\n            if(!Object.keys(taxonomy).includes(`Order: ${animal.order}`)){\r\n              taxonomy[`Order: ${animal.order}`]={}\r\n            }\r\n          }\r\n          if (animal.family){\r\n            if(!Object.keys(taxonomy[`Order: ${animal.order}`]).includes(`Family: ${animal.family}`)){\r\n              taxonomy[`Order: ${animal.order}`][`Family: ${animal.family}`]={}\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if(searchlevel==\"Order\"){\r\n        if(animal.family&&animal.genus){\r\n          if (animal.family){\r\n            if(!Object.keys(taxonomy).includes(`Family: ${animal.family}`)){\r\n              taxonomy[`Family: ${animal.family}`]={}\r\n            }\r\n          }\r\n          if (animal.genus){\r\n            if(!Object.keys(taxonomy[`Family: ${animal.family}`]).includes(`Genus: ${animal.genus}`)){\r\n              taxonomy[`Family: ${animal.family}`][`Genus: ${animal.genus}`]={}\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if(searchlevel==\"Family\"){\r\n        if(animal.genus&&animal.species){\r\n          if (animal.genus){\r\n            if(!Object.keys(taxonomy).includes(`Genus: ${animal.genus}`)){\r\n              taxonomy[`Genus: ${animal.genus}`]={}\r\n            }\r\n          }\r\n          if (animal.species){\r\n            if(!Object.keys(taxonomy[`Genus: ${animal.genus}`]).includes(`Species: ${animal.species}`)){\r\n              taxonomy[`Genus: ${animal.genus}`][`Species: ${animal.species}`]={}\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if(searchlevel==\"Genus\"){\r\n        if (animal.species){\r\n          if(!Object.keys(taxonomy).includes(`Species: ${animal.species}`)){\r\n            taxonomy[`Species: ${animal.species}`]={}\r\n          }\r\n        }\r\n      }\r\n    }\r\n    delete taxonomy[`Kingdom: incertae sedis`]\r\n    delete taxonomy[`Phylum: incertae sedis`]\r\n    delete taxonomy[`Class: incertae sedis`]\r\n    delete taxonomy[`Order: incertae sedis`]\r\n    delete taxonomy[`Family: incertae sedis`]\r\n    delete taxonomy[`Genus: incertae sedis`]\r\n    delete taxonomy[`Species: incertae sedis`]\r\n    console.log(\"getting taxonomy\",taxonomy);\r\n    setTaxonomyTree(JSON.stringify(taxonomy))\r\n  }\r\n\r\n\r\n  async function getHighestLevelOrganismData(){\r\n    setLoading(true)\r\n    descriptions={}\r\n    img=''\r\n\r\n    const options = {\r\n      method: 'GET',\r\n      headers: {\r\n        'X-RapidAPI-Host': 'wiki-briefs.p.rapidapi.com',\r\n        'X-RapidAPI-Key': '24f2c04f41msh794ec7d5b9283dcp1ebdf7jsn01969526d5ac'\r\n      }\r\n    };\r\n\r\n    await fetch(`https://wiki-briefs.p.rapidapi.com/search?q=life&topk=6`, options)\r\n      .then(response => response.json())\r\n      .then(response => {console.log(response,\"WIKIPEDIA\");\r\n      img=response.image;\r\n      description=response.summary.join('\\r\\n');\r\n    })\r\n    .catch(err => console.error(err));\r\n\r\n    await fetch('https://api.allorigins.win/get?url=https://api.gbif.org/v1/species?limit=1000')\r\n    .then(response => response.json())\r\n    .then(response =>JSON.parse(response.contents))\r\n    .then(response =>{\r\n      console.log(\"getting data\",response.results);\r\n      makeTaxonomyTree(response.results);\r\n    })\r\n    .catch(err => console.error(err));\r\n    setLoading(false)\r\n  }\r\n\r\n  async function upOneLevel(event){\r\n    console.log(\"searchlevel before\",searchlevel)\r\n    if(searchlevel==\"Kingdom\"){\r\n      searchlevel=\"\"\r\n    }\r\n    if(searchlevel==\"Phylum\"){\r\n      searchlevel=\"Kingdom\"\r\n    }\r\n    if(searchlevel==\"Class\"){\r\n      searchlevel=\"Phylum\"\r\n    }\r\n    if(searchlevel==\"Order\"){\r\n      searchlevel=\"Class\"\r\n    }\r\n    if(searchlevel==\"Family\"){\r\n      searchlevel=\"Order\"\r\n    }\r\n    if(searchlevel==\"Genus\"){\r\n      searchlevel=\"Family\"\r\n    }\r\n    if(searchlevel==\"Species\"){\r\n      searchlevel=\"Genus\"\r\n    }\r\n    console.log(\"searchlevel after\",searchlevel)\r\n    console.log(\"history\",history)\r\n    history.pop()\r\n    console.log(\"history\",history)\r\n    console.log(history[history.length-1])\r\n\r\n    if (history[history.length-1]==\"\"){\r\n      console.log(\"getting highest level\")\r\n      searchlevel=\"\"\r\n      await getHighestLevelOrganismData()\r\n    }else{\r\n      await narrowOptions(history[history.length-1],false)\r\n    }\r\n  }\r\n\r\n  async function narrowOptions(term,goingdown,secondcategory){\r\n    setLoading(true)\r\n    searchlevel=term.target.value.split(': ')[0]\r\n    let searchterm=term.target.value.split(': ')[1]\r\n    trunklabel=term.target.value.split(': ')[1]\r\n    trunklabellevel=term.target.value.split(': ')[0]\r\n        console.log(term.target.value,secondcategory)\r\n    if(goingdown){\r\n      if (secondcategory){\r\n        let termtwo={}\r\n        termtwo.target={}\r\n        termtwo.target.value=secondcategory\r\n        history.push(termtwo)\r\n      }\r\n      let termone={}\r\n      termone.target={}\r\n      termone.target.value=term.target.value\r\n      history.push(term)\r\n    }\r\n    console.log(term.target.value,secondcategory)\r\n    let highertaxonkey=await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/match?${trunklabellevel.toLowerCase()}=${searchterm}`)\r\n      .then(response => response.json())\r\n      .then(response =>JSON.parse(response.contents))\r\n      .then(response =>{\r\n        return response.usageKey})\r\n        .catch(err => console.error(err));\r\n        console.log(highertaxonkey)\r\n\r\n          await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/${highertaxonkey}/media`)\r\n            .then(response => response.json())\r\n            .then(response =>JSON.parse(response.contents))\r\n            .then(response =>{\r\n              console.log(\"IMAGES\",response.results);\r\n              if (response.results.length>0){\r\n                console.log(\"GETTING IMAGE\")\r\n                img=response[`results`][0][`identifier`];\r\n              }\r\n            })\r\n            .catch(err => console.error(err));\r\n\r\n\r\n            const options = {\r\n              method: 'GET',\r\n              headers: {\r\n                'X-RapidAPI-Host': 'wiki-briefs.p.rapidapi.com',\r\n                'X-RapidAPI-Key': '24f2c04f41msh794ec7d5b9283dcp1ebdf7jsn01969526d5ac'\r\n              }\r\n            };\r\n            await fetch(`https://wiki-briefs.p.rapidapi.com/search?q=${searchterm}&topk=6`, options)\r\n              .then(response => response.json())\r\n              .then(response => {console.log(response,\"WIKIPEDIA\");\r\n              img=response.image;\r\n              description=response.summary.join('\\r\\n');\r\n            })\r\n              .catch(err => console.error(err));\r\n\r\n\r\n\r\n        await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/search?limit=100%26highertaxon_key=${highertaxonkey}`  )\r\n          .then(response => response.json())\r\n          .then(response =>JSON.parse(response.contents))\r\n          .then(response =>{\r\n            console.log(response.results);\r\n            makeTaxonomyTree(response.results);\r\n          }).catch(err => console.error(err))\r\n          setLoading(false)\r\n                }\r\n\r\n                async function search(){\r\n                  setLoading(true)\r\n                  console.log(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/match?name=${searchword}`)\r\n                  let highertaxonkey=await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/match?name=${searchword}`)\r\n                    .then(response => response.json())\r\n                    .then(response =>JSON.parse(response.contents))\r\n                    .then(response =>{\r\n                      return response.usageKey})\r\n                      .catch(err => console.error(err));\r\n                      console.log(highertaxonkey)\r\n\r\n\r\n                      const options = {\r\n                        method: 'GET',\r\n                        headers: {\r\n                          'X-RapidAPI-Host': 'wiki-briefs.p.rapidapi.com',\r\n                          'X-RapidAPI-Key': '24f2c04f41msh794ec7d5b9283dcp1ebdf7jsn01969526d5ac'\r\n                        }\r\n                      };\r\n\r\n                      await fetch(`https://wiki-briefs.p.rapidapi.com/search?q=${searchword}&topk=6`, options)\r\n                        .then(response => response.json())\r\n                        .then(response => {console.log(response,\"WIKIPEDIA\");\r\n                        img=response.image;\r\n                        description=response.summary.join('\\r\\n');\r\n                      })\r\n                      .catch(err => console.error(err));\r\n\r\n\r\n                        await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/${highertaxonkey}/media`)\r\n                          .then(response => response.json())\r\n                          .then(response =>JSON.parse(response.contents))\r\n                          .then(response =>{\r\n                            console.log(\"IMAGES\",response.results);\r\n                            if (response.results.length>0){\r\n                              console.log(\"GETTING IMAGE\")\r\n                              img=response[`results`][0][`identifier`];\r\n                            }\r\n                          })\r\n                          .catch(err => console.error(err));\r\n\r\n                      await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/search?limit=100%26highertaxon_key=${highertaxonkey}`  )\r\n                        .then(response => response.json())\r\n                        .then(response =>JSON.parse(response.contents))\r\n                        .then(response =>{\r\n                          console.log(response.results);\r\n                          history=[\"\"]\r\n                          let animal=response.results[0]\r\n                          if(animal.kingdom){\r\n                            let historyitem={}\r\n                            historyitem.target={}\r\n                            historyitem.target.value=`Kingdom: ${animal.kingdom}`\r\n                            history.push(historyitem)\r\n                            searchlevel=\"Kingdom\"\r\n                          }\r\n                          if(animal.phylum){\r\n                            let historyitem={}\r\n                            historyitem.target={}\r\n                            historyitem.target.value=`Phylum: ${animal.phylum}`\r\n                            history.push(historyitem)\r\n                            searchlevel=\"Phylum\"\r\n                          }\r\n                          if(animal.class){\r\n                            let historyitem={}\r\n                            historyitem.target={}\r\n                            historyitem.target.value=`Class: ${animal.class}`\r\n                            history.push(historyitem)\r\n                            searchlevel=\"Class\"\r\n                          }\r\n                          if(animal.order){\r\n                            let historyitem={}\r\n                            historyitem.target={}\r\n                            historyitem.target.value=`Order: ${animal.order}`\r\n                            history.push(historyitem)\r\n                            searchlevel=\"Order\"\r\n                          }\r\n                          if(animal.family){\r\n                            let historyitem={}\r\n                            historyitem.target={}\r\n                            historyitem.target.value=`Family: ${animal.family}`\r\n                            history.push(historyitem)\r\n                            searchlevel=\"Family\"\r\n                          }\r\n                          if(animal.genus){\r\n                            let historyitem={}\r\n                            historyitem.target={}\r\n                            historyitem.target.value=`Genus: ${animal.genus}`\r\n                            history.push(historyitem)\r\n                            searchlevel=\"Genus\"\r\n                          }\r\n                          if(animal.species){\r\n                            let historyitem={}\r\n                            historyitem.target={}\r\n                            historyitem.target.value=`Species: ${animal.species}`\r\n                            history.push(historyitem)\r\n                            searchlevel=\"Species\"\r\n                          }\r\n                          console.log(response.results[0],history,\"HISTORY\")\r\n                          makeTaxonomyTree(response.results);\r\n                        }).catch(err => console.error(err));\r\n                        setLoading(false)\r\n                              }\r\n\r\n\r\n\r\n                const sketch = (p5) => {\r\n                  let theta,input,button\r\n                  let numberofgroups=0\r\n\r\n                  p5.setup = () => {\r\n                    if(taxonomyTree){\r\n                      p5.createCanvas(p5.windowWidth,p5.windowHeight,p5.CANVAS);\r\n                      p5.clear();\r\n                      p5.stroke(255);\r\n                      p5.strokeWeight(40)\r\n                      let a = 15\r\n                      theta = p5.radians(a);\r\n                      p5.translate(350,p5.height-100);\r\n                      p5.stroke(101, 67, 33)\r\n                      p5.line(0,0,0,-180);\r\n                      p5.textSize(27);\r\n                      p5.strokeWeight(2)\r\n                      p5.stroke(0)\r\n                      p5.fill(255);\r\n                      p5.push();\r\n                      p5.translate(0,-20);\r\n                      p5.rotate(-1.5708);\r\n                      p5.text(trunklabel, 10, 5);\r\n                      p5.pop();\r\n                      (async function(){\r\n                        p5.translate(0,-180);\r\n                        p5.rotate(-1.5708)\r\n\r\n                        let taxonomy=JSON.parse(taxonomyTree)\r\n                        let keys=Object.keys(taxonomy)\r\n                        keys=keys.sort(() => Math.random() - 0.5);\r\n\r\n                        keys=keys.slice(0,6)\r\n                        let radiangapbetweenbranches=(180/keys.length) * (Math.PI / 180);\r\n                        p5.rotate(radiangapbetweenbranches/2)\r\n                        let radianprogress=-1.5708\r\n\r\n                        for (let [index, group] of keys.entries()){\r\n                          p5.push()\r\n                          p5.rotate(1.5708)\r\n                          p5.rotate(radianprogress)\r\n                          p5.stroke(101, 67, 33)\r\n                          p5.strokeWeight(30)\r\n                          p5.line(0,0,0,-180)\r\n\r\n                          p5.push()\r\n                          if(radianprogress>-0.1){\r\n                            p5.translate(0,-70);\r\n                            p5.rotate(-1.5708)\r\n                          }\r\n                          if(radianprogress<=-0.1){\r\n                            p5.translate(0,-160);\r\n                            p5.rotate(1.5708)\r\n                          }\r\n                          p5.textSize(23);\r\n                          p5.strokeWeight(2)\r\n                          p5.stroke(0)\r\n                          p5.fill(255);\r\n                          p5.text(group.split(': ')[1], 10, 5)\r\n                          p5.pop()\r\n                          p5.translate(0,-180);\r\n                          radianprogress=radianprogress+radiangapbetweenbranches\r\n                          branch(taxonomy[`${group}`],140,radianprogress,group)\r\n                          p5.pop()\r\n\r\n                        }\r\n                      })()\r\n                    };\r\n                  }\r\n\r\n\r\n                  async function branch(group,size,radianprog,gr){\r\n                    p5.rotate(-1.5708)\r\n                    let radianprogres=radianprog\r\n                    radianprogres=radianprogres-1.5708\r\n                    let key=Object.keys(group)\r\n                    if(key.length>6){\r\n                      key=key.sort(() => Math.random() - 0.5);\r\n                      key=key.slice(0,6)\r\n                    }\r\n                    let radiangapbetweenbranches=(180/key.length) * (Math.PI / 180);\r\n                    p5.rotate(radiangapbetweenbranches/2)\r\n                    for (let [index, grou] of key.entries()){\r\n                      p5.push()\r\n                      p5.stroke(101, 67, 33)\r\n                      p5.strokeWeight(size/8)\r\n                      p5.line(0,0,0,-size)\r\n                      p5.push()\r\n                      p5.stroke(0,128,0)\r\n                      let x=Math.random()\r\n                      if(x<0.5){\r\n                        p5.ellipse(size/4, 0, size/4, size/16);\r\n                        p5.ellipse(-size/4, -size/2, size/4, size/16);\r\n                        p5.ellipse(size/4, -size, size/4, size/16);\r\n                      }else{\r\n                        p5.ellipse(-size/4, 0, size/4, size/16);\r\n                        p5.ellipse(size/4, -size/2, size/4, size/16);\r\n                        p5.ellipse(-size/4, -size, size/4, size/16);\r\n                      }\r\n                      p5.ellipse(0, -size, size/16,size/4);\r\n\r\n\r\n                      p5.pop()\r\n                      p5.push()\r\n                      if(radianprogres>-0){\r\n                        p5.translate(0,-size/10);\r\n                        p5.rotate(-1.5708)\r\n                      }else{\r\n                        p5.translate(0,-size);\r\n                        p5.rotate(1.5708)\r\n                      }\r\n                      p5.textSize(size/10);\r\n                      p5.strokeWeight(2)\r\n                      p5.stroke(0)\r\n                      p5.fill(255);\r\n                      p5.text(grou.split(': ')[1], 10, 5)\r\n                      p5.pop()\r\n\r\n                      p5.pop()\r\n                      radianprogres=radianprogres+radiangapbetweenbranches\r\n                      p5.rotate(radiangapbetweenbranches)\r\n                    }\r\n                  };\r\n\r\n\r\n\r\n                };\r\n                let taxonom\r\n                let keys\r\n                let titleone\r\n                let titletwo\r\n\r\n                if(taxonomyTree){\r\n                  taxonom=JSON.parse(taxonomyTree)\r\n                  console.log(taxonom)\r\n                  keys=Object.keys(taxonom)\r\n                  console.log(\"keys\",keys)\r\n                  if (keys.length>0){\r\n                    titleone=keys[0]\r\n                    titleone=titleone.split(\": \")\r\n                    titleone=titleone[0]\r\n                  }\r\n                }\r\n\r\n                if(titleone==\"Kingdom\"){\r\n                  titletwo=\"Phylum\"\r\n                }\r\n                if(titleone==\"Phylum\"){\r\n                  titletwo=\"Class\"\r\n                }\r\n                if(titleone==\"Class\"){\r\n                  titletwo=\"Order\"\r\n                }\r\n                if(titleone==\"Order\"){\r\n                  titletwo=\"Family\"\r\n                }\r\n                if(titleone==\"Family\"){\r\n                  titletwo=\"Genus\"\r\n                }\r\n                if(titleone==\"Genus\"){\r\n                  titletwo=\"Species\"\r\n                }\r\n\r\n\r\n                console.log(\"titleone\",titleone)\r\n\r\n                let colors=[\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\"]\r\n                var histor=[]\r\n                if (history){\r\n                  if (history.length>1){\r\n                    console.log(history)\r\n                histor=history.map(item=>{\r\n                  if(item!==\"\"){\r\n                  return item.target.value\r\n                  }\r\n                  })\r\n                  histor.shift()\r\n                  }\r\n                }\r\n\r\n                function handleChange(event) {\r\n                    console.log(event.target.value);\r\n                    searchword=event.target.value\r\n                  }\r\n\r\n\r\n                console.log(histor,\"histor\")\r\n                return (<>\r\n                  <div style={{display:loading?\"inline\":\"none\",margin:\"4vw\",padding:\"4vw\",top:\"100px\",left:\"100px\"}}>\r\n                  <div class=\"loader\" style={{margin:\"4vw\"}}></div><h1 style={{marginLeft:\"4vw\",fontSize:\"250%\",display:\"inline\",color:\"#3498db\"}}>Loading</h1>\r\n                  </div>\r\n                  <div style={{display:loading?\"none\":\"block\"}}>\r\n                  <div style={{transform:\"translateY(-100px)\"}}>\r\n                  <ReactP5Wrapper sketch={sketch}/>\r\n                  </div>\r\n                  <div style={{width:\"100vw\",margin:\"0\"}}>\r\n                  <img src={garden} style={{width:\"100vw\",height:\"100vh\",top:\"0\",left:\"0\",position:\"absolute\",zIndex:\"-10\"}}/>\r\n                  <img src={pot} style={{width:\"150px\",position:\"absolute\",color:\"white\",zIndex:\"-2\",top:\"550px\",marginLeft:\"275px\"}}/>\r\n                  <h1 style={{paddingLeft:\"2vw\",paddingTop:\"0\",marginTop:\"0\"}}>{trunklabellevel} {trunklabel}</h1>\r\n                  {(img||description)&&<div style={{width:\"100vw\",display:\"flex\"}}>\r\n                  <div style={{width:\"46vw\",marginLeft:\"2vw\"}}>{img&&<img style={{width:\"42vw\"}} src={img}></img>}</div>\r\n                  <div style={{width:\"46vw\",marginRight:\"2vw\"}}>{description&&<h4 style={{marginTop:\"0\",marginLeft:\"0\"}}>{description}</h4>}</div>\r\n                  </div>}\r\n                  <hr/>\r\n                  <div style={{marginLeft:\"2vw\"}}>\r\n                  <input onChange={handleChange}></input><button onClick={search}>Submit Search</button>\r\n                  <div style={{paddingBottom:\"0\",marginBottom:\"0\",paddingTop:\"0.5vh\",marginTop:\"0.5vh\"}}>\r\n                  {(histor.length>0)&&histor.map((item,index)=><h5 style={{display:\"inline\",marginTop:\"0vh\"}}>{item}{(index<histor.length-1)&&<>/ </>}</h5>)}\r\n                  </div>\r\n                  </div>\r\n                  <h2 style={{paddingLeft:\"2vw\",paddingBottom:\"0\",marginBottom:\"0\",paddingTop:\"0.5vh\",marginTop:\"0.5vh\"}}>Subcategories of {trunklabellevel}: {trunklabel}</h2>\r\n                  <div style={{paddingLeft:\"2vw\",marginTop:\"0.5vh\"}}>\r\n                  {searchlevel&&<button style={{maxWidth:\"20vw\",display:\"inline\"}} onClick={upOneLevel}>Up One Level</button>}\r\n                  </div>\r\n                  <div style={{display:\"flex\",width:\"100vw\",overflowX:\"scroll\"}}>\r\n\r\n                  {keys&&keys.map((key,index)=><div style={{marginLeft:\"2vw\",width:\"20vw\"}}><div>{titleone&&<h3 >{titleone}</h3>}</div><button style={{backgroundColor:colors[index],display:\"block\"}} onClick={(e) => narrowOptions(e,true)} value={key}>{key.split(\": \")[1]}</button>{(Object.keys(taxonom[`${key}`]).length>0)&&<div>{titletwo&&<h4>{titletwo}</h4>}</div>}\r\n                  {taxonom[`${key}`]&&Object.keys(taxonom[`${key}`]).map(item=><button style={{backgroundColor:colors[index],display:\"block\"}}  onClick={(e) => narrowOptions(e,true,key)} value={item}>{item.split(\": \")[1]}</button>)}\r\n                  </div>)}\r\n                  </div>\r\n                  </div>\r\n                  </div></>)\r\n                }\r\n                const areEqual = (prevProps, nextProps) => true;\r\n\r\n                export default React.memo(Tree, areEqual);\r\n"],"mappings":"soBAAA,MAAOA,MAAP,EAAeC,MAAf,CAAsBC,QAAtB,CAA+BC,SAA/B,KAA+C,OAA/C,CACA,OAASC,cAAT,KAA+B,kBAA/B,CACA,MAAOC,IAAP,KAAgB,WAAhB,CACA,MAAOC,OAAP,KAAmB,cAAnB,C,6IAEA,GAAIC,YAAW,CAAC,EAAhB,CACA,GAAIC,QAAO,CAAC,CAAC,EAAD,CAAZ,CACA,GAAIC,WAAU,CAAC,MAAf,CACA,GAAIC,gBAAe,CAAC,EAApB,CACA,GAAIC,YAAW,CAAC,EAAhB,CACA,GAAIC,IAAG,CAAC,EAAR,CACA,GAAIC,aAAY,CAAC,EAAjB,CACA,GAAIC,WAAU,CAAC,EAAf,CACA,QAASC,KAAT,CAAcC,KAAd,CAAqB,CACnB,cAAuCd,QAAQ,CAAC,EAAD,CAA/C,wCAAOe,YAAP,eAAoBC,eAApB,eACA,eAA6BhB,QAAQ,CAAC,IAAD,CAArC,yCAAOiB,OAAP,eAAeC,UAAf,eAEAjB,SAAS,CAAC,UAAI,CACZkB,2BAA2B,GAC5B,CAFQ,CAEP,EAFO,CAAT,CAIA,QAASC,iBAAT,CAA0BC,SAA1B,CAAoC,CAClC,GAAIC,SAAQ,CAAC,EAAb,CADkC,yCAEfD,SAFe,YAElC,+CAA6B,IAApBE,OAAoB,aAC3B,GAAGlB,WAAW,EAAE,EAAhB,CAAmB,CACjB,GAAGkB,MAAM,CAACC,OAAP,EAAgBD,MAAM,CAACE,MAA1B,CAAiC,CAC/B,GAAGF,MAAM,CAACC,OAAV,CAAkB,CAChB,GAAG,CAACE,MAAM,CAACC,IAAP,CAAYL,QAAZ,EAAsBM,QAAtB,oBAA2CL,MAAM,CAACC,OAAlD,EAAJ,CAAiE,CAC/DF,QAAQ,oBAAaC,MAAM,CAACC,OAApB,EAAR,CAAuC,EAAvC,CACD,CACF,CACD,GAAID,MAAM,CAACE,MAAX,CAAkB,CAChB,GAAG,CAACC,MAAM,CAACC,IAAP,CAAYL,QAAQ,oBAAaC,MAAM,CAACC,OAApB,EAApB,EAAoDI,QAApD,mBAAwEL,MAAM,CAACE,MAA/E,EAAJ,CAA6F,CAC3FH,QAAQ,oBAAaC,MAAM,CAACC,OAApB,EAAR,mBAAkDD,MAAM,CAACE,MAAzD,GAAmE,EAAnE,CACD,CACF,CACF,CACF,CAED,GAAGpB,WAAW,EAAE,SAAhB,CAA0B,CACxB,GAAGkB,MAAM,CAACE,MAAP,EAAeF,MAAM,CAACM,KAAzB,CAA+B,CAC7B,GAAGN,MAAM,CAACE,MAAV,CAAiB,CACf,GAAG,CAACC,MAAM,CAACC,IAAP,CAAYL,QAAZ,EAAsBM,QAAtB,mBAA0CL,MAAM,CAACE,MAAjD,EAAJ,CAA+D,CAC7DH,QAAQ,mBAAYC,MAAM,CAACE,MAAnB,EAAR,CAAqC,EAArC,CACD,CACF,CACD,GAAIF,MAAM,CAACM,KAAX,CAAiB,CACf,GAAG,CAACH,MAAM,CAACC,IAAP,CAAYL,QAAQ,mBAAYC,MAAM,CAACE,MAAnB,EAApB,EAAkDG,QAAlD,kBAAqEL,MAAM,CAACM,KAA5E,EAAJ,CAAyF,CACvFP,QAAQ,mBAAYC,MAAM,CAACE,MAAnB,EAAR,kBAA+CF,MAAM,CAACM,KAAtD,GAA+D,EAA/D,CACD,CACF,CACF,CACF,CAED,GAAGxB,WAAW,EAAE,QAAhB,CAAyB,CACvB,GAAGkB,MAAM,CAACM,KAAP,EAAcN,MAAM,CAACO,KAAxB,CAA8B,CAC5B,GAAIP,MAAM,CAACM,KAAX,CAAiB,CACf,GAAG,CAACH,MAAM,CAACC,IAAP,CAAYL,QAAZ,EAAsBM,QAAtB,kBAAyCL,MAAM,CAACM,KAAhD,EAAJ,CAA6D,CAC3DP,QAAQ,kBAAWC,MAAM,CAACM,KAAlB,EAAR,CAAmC,EAAnC,CACD,CACF,CACD,GAAIN,MAAM,CAACO,KAAX,CAAiB,CACf,GAAG,CAACJ,MAAM,CAACC,IAAP,CAAYL,QAAQ,kBAAWC,MAAM,CAACM,KAAlB,EAApB,EAAgDD,QAAhD,kBAAmEL,MAAM,CAACO,KAA1E,EAAJ,CAAuF,CACrFR,QAAQ,kBAAWC,MAAM,CAACM,KAAlB,EAAR,kBAA6CN,MAAM,CAACO,KAApD,GAA6D,EAA7D,CACD,CACF,CACF,CACF,CAED,GAAGzB,WAAW,EAAE,OAAhB,CAAwB,CACtB,GAAGkB,MAAM,CAACO,KAAP,EAAcP,MAAM,CAACQ,MAAxB,CAA+B,CAC7B,GAAIR,MAAM,CAACO,KAAX,CAAiB,CACf,GAAG,CAACJ,MAAM,CAACC,IAAP,CAAYL,QAAZ,EAAsBM,QAAtB,kBAAyCL,MAAM,CAACO,KAAhD,EAAJ,CAA6D,CAC3DR,QAAQ,kBAAWC,MAAM,CAACO,KAAlB,EAAR,CAAmC,EAAnC,CACD,CACF,CACD,GAAIP,MAAM,CAACQ,MAAX,CAAkB,CAChB,GAAG,CAACL,MAAM,CAACC,IAAP,CAAYL,QAAQ,kBAAWC,MAAM,CAACO,KAAlB,EAApB,EAAgDF,QAAhD,mBAAoEL,MAAM,CAACQ,MAA3E,EAAJ,CAAyF,CACvFT,QAAQ,kBAAWC,MAAM,CAACO,KAAlB,EAAR,mBAA8CP,MAAM,CAACQ,MAArD,GAA+D,EAA/D,CACD,CACF,CACF,CACF,CAED,GAAG1B,WAAW,EAAE,OAAhB,CAAwB,CACtB,GAAGkB,MAAM,CAACQ,MAAP,EAAeR,MAAM,CAACS,KAAzB,CAA+B,CAC7B,GAAIT,MAAM,CAACQ,MAAX,CAAkB,CAChB,GAAG,CAACL,MAAM,CAACC,IAAP,CAAYL,QAAZ,EAAsBM,QAAtB,mBAA0CL,MAAM,CAACQ,MAAjD,EAAJ,CAA+D,CAC7DT,QAAQ,mBAAYC,MAAM,CAACQ,MAAnB,EAAR,CAAqC,EAArC,CACD,CACF,CACD,GAAIR,MAAM,CAACS,KAAX,CAAiB,CACf,GAAG,CAACN,MAAM,CAACC,IAAP,CAAYL,QAAQ,mBAAYC,MAAM,CAACQ,MAAnB,EAApB,EAAkDH,QAAlD,kBAAqEL,MAAM,CAACS,KAA5E,EAAJ,CAAyF,CACvFV,QAAQ,mBAAYC,MAAM,CAACQ,MAAnB,EAAR,kBAA+CR,MAAM,CAACS,KAAtD,GAA+D,EAA/D,CACD,CACF,CACF,CACF,CAED,GAAG3B,WAAW,EAAE,QAAhB,CAAyB,CACvB,GAAGkB,MAAM,CAACS,KAAP,EAAcT,MAAM,CAACU,OAAxB,CAAgC,CAC9B,GAAIV,MAAM,CAACS,KAAX,CAAiB,CACf,GAAG,CAACN,MAAM,CAACC,IAAP,CAAYL,QAAZ,EAAsBM,QAAtB,kBAAyCL,MAAM,CAACS,KAAhD,EAAJ,CAA6D,CAC3DV,QAAQ,kBAAWC,MAAM,CAACS,KAAlB,EAAR,CAAmC,EAAnC,CACD,CACF,CACD,GAAIT,MAAM,CAACU,OAAX,CAAmB,CACjB,GAAG,CAACP,MAAM,CAACC,IAAP,CAAYL,QAAQ,kBAAWC,MAAM,CAACS,KAAlB,EAApB,EAAgDJ,QAAhD,oBAAqEL,MAAM,CAACU,OAA5E,EAAJ,CAA2F,CACzFX,QAAQ,kBAAWC,MAAM,CAACS,KAAlB,EAAR,oBAA+CT,MAAM,CAACU,OAAtD,GAAiE,EAAjE,CACD,CACF,CACF,CACF,CACD,GAAG5B,WAAW,EAAE,OAAhB,CAAwB,CACtB,GAAIkB,MAAM,CAACU,OAAX,CAAmB,CACjB,GAAG,CAACP,MAAM,CAACC,IAAP,CAAYL,QAAZ,EAAsBM,QAAtB,oBAA2CL,MAAM,CAACU,OAAlD,EAAJ,CAAiE,CAC/DX,QAAQ,oBAAaC,MAAM,CAACU,OAApB,EAAR,CAAuC,EAAvC,CACD,CACF,CACF,CACF,CAnGiC,qDAoGlC,MAAOX,SAAQ,2BAAf,CACA,MAAOA,SAAQ,0BAAf,CACA,MAAOA,SAAQ,yBAAf,CACA,MAAOA,SAAQ,yBAAf,CACA,MAAOA,SAAQ,0BAAf,CACA,MAAOA,SAAQ,yBAAf,CACA,MAAOA,SAAQ,2BAAf,CACAY,OAAO,CAACC,GAAR,CAAY,kBAAZ,CAA+Bb,QAA/B,EACAN,eAAe,CAACoB,IAAI,CAACC,SAAL,CAAef,QAAf,CAAD,CAAf,CACD,CArHkB,QAwHJH,4BAxHI,2LAwHnB,oJACED,UAAU,CAAC,IAAD,CAAV,CACAP,YAAY,CAAC,EAAb,CACAD,GAAG,CAAC,EAAJ,CAEM4B,OALR,CAKkB,CACdC,MAAM,CAAE,KADM,CAEdC,OAAO,CAAE,CACP,kBAAmB,4BADZ,CAEP,iBAAkB,oDAFX,CAFK,CALlB,wBAaQC,MAAK,2DAA4DH,OAA5D,CAAL,CACHI,IADG,CACE,SAAAC,QAAQ,QAAIA,SAAQ,CAACC,IAAT,EAAJ,EADV,EAEHF,IAFG,CAEE,SAAAC,QAAQ,CAAI,CAACT,OAAO,CAACC,GAAR,CAAYQ,QAAZ,CAAqB,WAArB,EACnBjC,GAAG,CAACiC,QAAQ,CAACE,KAAb,CACApC,WAAW,CAACkC,QAAQ,CAACG,OAAT,CAAiBC,IAAjB,CAAsB,MAAtB,CAAZ,CACD,CALK,EAMLC,KANK,CAMC,SAAAC,GAAG,QAAIf,QAAO,CAACgB,KAAR,CAAcD,GAAd,CAAJ,EANJ,CAbR,+BAqBQR,MAAK,CAAC,+EAAD,CAAL,CACLC,IADK,CACA,SAAAC,QAAQ,QAAIA,SAAQ,CAACC,IAAT,EAAJ,EADR,EAELF,IAFK,CAEA,SAAAC,QAAQ,QAAGP,KAAI,CAACe,KAAL,CAAWR,QAAQ,CAACS,QAApB,CAAH,EAFR,EAGLV,IAHK,CAGA,SAAAC,QAAQ,CAAG,CACfT,OAAO,CAACC,GAAR,CAAY,cAAZ,CAA2BQ,QAAQ,CAACU,OAApC,EACAjC,gBAAgB,CAACuB,QAAQ,CAACU,OAAV,CAAhB,CACD,CANK,EAOLL,KAPK,CAOC,SAAAC,GAAG,QAAIf,QAAO,CAACgB,KAAR,CAAcD,GAAd,CAAJ,EAPJ,CArBR,QA6BE/B,UAAU,CAAC,KAAD,CAAV,CA7BF,wDAxHmB,sEAwJJoC,WAxJI,0IAwJnB,kBAA0BC,KAA1B,sHACErB,OAAO,CAACC,GAAR,CAAY,oBAAZ,CAAiC9B,WAAjC,EACA,GAAGA,WAAW,EAAE,SAAhB,CAA0B,CACxBA,WAAW,CAAC,EAAZ,CACD,CACD,GAAGA,WAAW,EAAE,QAAhB,CAAyB,CACvBA,WAAW,CAAC,SAAZ,CACD,CACD,GAAGA,WAAW,EAAE,OAAhB,CAAwB,CACtBA,WAAW,CAAC,QAAZ,CACD,CACD,GAAGA,WAAW,EAAE,OAAhB,CAAwB,CACtBA,WAAW,CAAC,OAAZ,CACD,CACD,GAAGA,WAAW,EAAE,QAAhB,CAAyB,CACvBA,WAAW,CAAC,OAAZ,CACD,CACD,GAAGA,WAAW,EAAE,OAAhB,CAAwB,CACtBA,WAAW,CAAC,QAAZ,CACD,CACD,GAAGA,WAAW,EAAE,SAAhB,CAA0B,CACxBA,WAAW,CAAC,OAAZ,CACD,CACD6B,OAAO,CAACC,GAAR,CAAY,mBAAZ,CAAgC9B,WAAhC,EACA6B,OAAO,CAACC,GAAR,CAAY,SAAZ,CAAsB7B,OAAtB,EACAA,OAAO,CAACkD,GAAR,GACAtB,OAAO,CAACC,GAAR,CAAY,SAAZ,CAAsB7B,OAAtB,EACA4B,OAAO,CAACC,GAAR,CAAY7B,OAAO,CAACA,OAAO,CAACmD,MAAR,CAAe,CAAhB,CAAnB,EA3BF,KA6BMnD,OAAO,CAACA,OAAO,CAACmD,MAAR,CAAe,CAAhB,CAAP,EAA2B,EA7BjC,4BA8BIvB,OAAO,CAACC,GAAR,CAAY,uBAAZ,EACA9B,WAAW,CAAC,EAAZ,CA/BJ,wBAgCUc,4BAA2B,EAhCrC,iEAkCUuC,cAAa,CAACpD,OAAO,CAACA,OAAO,CAACmD,MAAR,CAAe,CAAhB,CAAR,CAA2B,KAA3B,CAlCvB,0DAxJmB,qDA8LJC,cA9LI,4JA8LnB,kBAA6BC,IAA7B,CAAkCC,SAAlC,CAA4CC,cAA5C,4KACE3C,UAAU,CAAC,IAAD,CAAV,CACAb,WAAW,CAACsD,IAAI,CAACG,MAAL,CAAYC,KAAZ,CAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,CAAZ,CACIC,UAHN,CAGiBN,IAAI,CAACG,MAAL,CAAYC,KAAZ,CAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,CAHjB,CAIEzD,UAAU,CAACoD,IAAI,CAACG,MAAL,CAAYC,KAAZ,CAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,CAAX,CACAxD,eAAe,CAACmD,IAAI,CAACG,MAAL,CAAYC,KAAZ,CAAkBC,KAAlB,CAAwB,IAAxB,EAA8B,CAA9B,CAAhB,CACI9B,OAAO,CAACC,GAAR,CAAYwB,IAAI,CAACG,MAAL,CAAYC,KAAxB,CAA8BF,cAA9B,EACJ,GAAGD,SAAH,CAAa,CACX,GAAIC,cAAJ,CAAmB,CACbK,OADa,CACL,EADK,CAEjBA,OAAO,CAACJ,MAAR,CAAe,EAAf,CACAI,OAAO,CAACJ,MAAR,CAAeC,KAAf,CAAqBF,cAArB,CACAvD,OAAO,CAAC6D,IAAR,CAAaD,OAAb,EACD,CACGE,OAPO,CAOC,EAPD,CAQXA,OAAO,CAACN,MAAR,CAAe,EAAf,CACAM,OAAO,CAACN,MAAR,CAAeC,KAAf,CAAqBJ,IAAI,CAACG,MAAL,CAAYC,KAAjC,CACAzD,OAAO,CAAC6D,IAAR,CAAaR,IAAb,EACD,CACDzB,OAAO,CAACC,GAAR,CAAYwB,IAAI,CAACG,MAAL,CAAYC,KAAxB,CAA8BF,cAA9B,EAnBF,wBAoB2BpB,MAAK,oFAA6EjC,eAAe,CAAC6D,WAAhB,EAA7E,aAA8GJ,UAA9G,EAAL,CACtBvB,IADsB,CACjB,SAAAC,QAAQ,QAAIA,SAAQ,CAACC,IAAT,EAAJ,EADS,EAEtBF,IAFsB,CAEjB,SAAAC,QAAQ,QAAGP,KAAI,CAACe,KAAL,CAAWR,QAAQ,CAACS,QAApB,CAAH,EAFS,EAGtBV,IAHsB,CAGjB,SAAAC,QAAQ,CAAG,CACf,MAAOA,SAAQ,CAAC2B,QAAhB,CAAyB,CAJJ,EAKpBtB,KALoB,CAKd,SAAAC,GAAG,QAAIf,QAAO,CAACgB,KAAR,CAAcD,GAAd,CAAJ,EALW,CApB3B,SAoBMsB,cApBN,gBA0BMrC,OAAO,CAACC,GAAR,CAAYoC,cAAZ,EA1BN,wBA4Bc9B,MAAK,8EAAuE8B,cAAvE,WAAL,CACH7B,IADG,CACE,SAAAC,QAAQ,QAAIA,SAAQ,CAACC,IAAT,EAAJ,EADV,EAEHF,IAFG,CAEE,SAAAC,QAAQ,QAAGP,KAAI,CAACe,KAAL,CAAWR,QAAQ,CAACS,QAApB,CAAH,EAFV,EAGHV,IAHG,CAGE,SAAAC,QAAQ,CAAG,CACfT,OAAO,CAACC,GAAR,CAAY,QAAZ,CAAqBQ,QAAQ,CAACU,OAA9B,EACA,GAAIV,QAAQ,CAACU,OAAT,CAAiBI,MAAjB,CAAwB,CAA5B,CAA8B,CAC5BvB,OAAO,CAACC,GAAR,CAAY,eAAZ,EACAzB,GAAG,CAACiC,QAAQ,WAAR,CAAoB,CAApB,eAAJ,CACD,CACF,CATG,EAUHK,KAVG,CAUG,SAAAC,GAAG,QAAIf,QAAO,CAACgB,KAAR,CAAcD,GAAd,CAAJ,EAVN,CA5Bd,SAyCgBX,OAzChB,CAyC0B,CACdC,MAAM,CAAE,KADM,CAEdC,OAAO,CAAE,CACP,kBAAmB,4BADZ,CAEP,iBAAkB,oDAFX,CAFK,CAzC1B,yBAgDgBC,MAAK,uDAAgDwB,UAAhD,YAAqE3B,OAArE,CAAL,CACHI,IADG,CACE,SAAAC,QAAQ,QAAIA,SAAQ,CAACC,IAAT,EAAJ,EADV,EAEHF,IAFG,CAEE,SAAAC,QAAQ,CAAI,CAACT,OAAO,CAACC,GAAR,CAAYQ,QAAZ,CAAqB,WAArB,EACnBjC,GAAG,CAACiC,QAAQ,CAACE,KAAb,CACApC,WAAW,CAACkC,QAAQ,CAACG,OAAT,CAAiBC,IAAjB,CAAsB,MAAtB,CAAZ,CACD,CALK,EAMHC,KANG,CAMG,SAAAC,GAAG,QAAIf,QAAO,CAACgB,KAAR,CAAcD,GAAd,CAAJ,EANN,CAhDhB,iCA0DYR,MAAK,iHAA0G8B,cAA1G,EAAL,CACH7B,IADG,CACE,SAAAC,QAAQ,QAAIA,SAAQ,CAACC,IAAT,EAAJ,EADV,EAEHF,IAFG,CAEE,SAAAC,QAAQ,QAAGP,KAAI,CAACe,KAAL,CAAWR,QAAQ,CAACS,QAApB,CAAH,EAFV,EAGHV,IAHG,CAGE,SAAAC,QAAQ,CAAG,CACfT,OAAO,CAACC,GAAR,CAAYQ,QAAQ,CAACU,OAArB,EACAjC,gBAAgB,CAACuB,QAAQ,CAACU,OAAV,CAAhB,CACD,CANG,EAMDL,KANC,CAMK,SAAAC,GAAG,QAAIf,QAAO,CAACgB,KAAR,CAAcD,GAAd,CAAJ,EANR,CA1DZ,SAiEQ/B,UAAU,CAAC,KAAD,CAAV,CAjER,yDA9LmB,wDAkQUsD,OAlQV,4HAkQL,mKACEtD,UAAU,CAAC,IAAD,CAAV,CACAgB,OAAO,CAACC,GAAR,yFAA6FvB,UAA7F,GAFF,uBAG2B6B,MAAK,yFAAkF7B,UAAlF,EAAL,CACtB8B,IADsB,CACjB,SAAAC,QAAQ,QAAIA,SAAQ,CAACC,IAAT,EAAJ,EADS,EAEtBF,IAFsB,CAEjB,SAAAC,QAAQ,QAAGP,KAAI,CAACe,KAAL,CAAWR,QAAQ,CAACS,QAApB,CAAH,EAFS,EAGtBV,IAHsB,CAGjB,SAAAC,QAAQ,CAAG,CACf,MAAOA,SAAQ,CAAC2B,QAAhB,CAAyB,CAJJ,EAKpBtB,KALoB,CAKd,SAAAC,GAAG,QAAIf,QAAO,CAACgB,KAAR,CAAcD,GAAd,CAAJ,EALW,CAH3B,QAGMsB,cAHN,gBASMrC,OAAO,CAACC,GAAR,CAAYoC,cAAZ,EAGMjC,OAZZ,CAYsB,CACdC,MAAM,CAAE,KADM,CAEdC,OAAO,CAAE,CACP,kBAAmB,4BADZ,CAEP,iBAAkB,oDAFX,CAFK,CAZtB,wBAoBYC,MAAK,uDAAgD7B,UAAhD,YAAqE0B,OAArE,CAAL,CACHI,IADG,CACE,SAAAC,QAAQ,QAAIA,SAAQ,CAACC,IAAT,EAAJ,EADV,EAEHF,IAFG,CAEE,SAAAC,QAAQ,CAAI,CAACT,OAAO,CAACC,GAAR,CAAYQ,QAAZ,CAAqB,WAArB,EACnBjC,GAAG,CAACiC,QAAQ,CAACE,KAAb,CACApC,WAAW,CAACkC,QAAQ,CAACG,OAAT,CAAiBC,IAAjB,CAAsB,MAAtB,CAAZ,CACD,CALK,EAMLC,KANK,CAMC,SAAAC,GAAG,QAAIf,QAAO,CAACgB,KAAR,CAAcD,GAAd,CAAJ,EANJ,CApBZ,gCA6BcR,MAAK,8EAAuE8B,cAAvE,WAAL,CACH7B,IADG,CACE,SAAAC,QAAQ,QAAIA,SAAQ,CAACC,IAAT,EAAJ,EADV,EAEHF,IAFG,CAEE,SAAAC,QAAQ,QAAGP,KAAI,CAACe,KAAL,CAAWR,QAAQ,CAACS,QAApB,CAAH,EAFV,EAGHV,IAHG,CAGE,SAAAC,QAAQ,CAAG,CACfT,OAAO,CAACC,GAAR,CAAY,QAAZ,CAAqBQ,QAAQ,CAACU,OAA9B,EACA,GAAIV,QAAQ,CAACU,OAAT,CAAiBI,MAAjB,CAAwB,CAA5B,CAA8B,CAC5BvB,OAAO,CAACC,GAAR,CAAY,eAAZ,EACAzB,GAAG,CAACiC,QAAQ,WAAR,CAAoB,CAApB,eAAJ,CACD,CACF,CATG,EAUHK,KAVG,CAUG,SAAAC,GAAG,QAAIf,QAAO,CAACgB,KAAR,CAAcD,GAAd,CAAJ,EAVN,CA7Bd,iCAyCYR,MAAK,iHAA0G8B,cAA1G,EAAL,CACH7B,IADG,CACE,SAAAC,QAAQ,QAAIA,SAAQ,CAACC,IAAT,EAAJ,EADV,EAEHF,IAFG,CAEE,SAAAC,QAAQ,QAAGP,KAAI,CAACe,KAAL,CAAWR,QAAQ,CAACS,QAApB,CAAH,EAFV,EAGHV,IAHG,CAGE,SAAAC,QAAQ,CAAG,CACfT,OAAO,CAACC,GAAR,CAAYQ,QAAQ,CAACU,OAArB,EACA/C,OAAO,CAAC,CAAC,EAAD,CAAR,CACA,GAAIiB,OAAM,CAACoB,QAAQ,CAACU,OAAT,CAAiB,CAAjB,CAAX,CACA,GAAG9B,MAAM,CAACC,OAAV,CAAkB,CAChB,GAAIiD,YAAW,CAAC,EAAhB,CACAA,WAAW,CAACX,MAAZ,CAAmB,EAAnB,CACAW,WAAW,CAACX,MAAZ,CAAmBC,KAAnB,oBAAqCxC,MAAM,CAACC,OAA5C,EACAlB,OAAO,CAAC6D,IAAR,CAAaM,WAAb,EACApE,WAAW,CAAC,SAAZ,CACD,CACD,GAAGkB,MAAM,CAACE,MAAV,CAAiB,CACf,GAAIgD,aAAW,CAAC,EAAhB,CACAA,YAAW,CAACX,MAAZ,CAAmB,EAAnB,CACAW,YAAW,CAACX,MAAZ,CAAmBC,KAAnB,mBAAoCxC,MAAM,CAACE,MAA3C,EACAnB,OAAO,CAAC6D,IAAR,CAAaM,YAAb,EACApE,WAAW,CAAC,QAAZ,CACD,CACD,GAAGkB,MAAM,CAACM,KAAV,CAAgB,CACd,GAAI4C,cAAW,CAAC,EAAhB,CACAA,aAAW,CAACX,MAAZ,CAAmB,EAAnB,CACAW,aAAW,CAACX,MAAZ,CAAmBC,KAAnB,kBAAmCxC,MAAM,CAACM,KAA1C,EACAvB,OAAO,CAAC6D,IAAR,CAAaM,aAAb,EACApE,WAAW,CAAC,OAAZ,CACD,CACD,GAAGkB,MAAM,CAACO,KAAV,CAAgB,CACd,GAAI2C,cAAW,CAAC,EAAhB,CACAA,aAAW,CAACX,MAAZ,CAAmB,EAAnB,CACAW,aAAW,CAACX,MAAZ,CAAmBC,KAAnB,kBAAmCxC,MAAM,CAACO,KAA1C,EACAxB,OAAO,CAAC6D,IAAR,CAAaM,aAAb,EACApE,WAAW,CAAC,OAAZ,CACD,CACD,GAAGkB,MAAM,CAACQ,MAAV,CAAiB,CACf,GAAI0C,cAAW,CAAC,EAAhB,CACAA,aAAW,CAACX,MAAZ,CAAmB,EAAnB,CACAW,aAAW,CAACX,MAAZ,CAAmBC,KAAnB,mBAAoCxC,MAAM,CAACQ,MAA3C,EACAzB,OAAO,CAAC6D,IAAR,CAAaM,aAAb,EACApE,WAAW,CAAC,QAAZ,CACD,CACD,GAAGkB,MAAM,CAACS,KAAV,CAAgB,CACd,GAAIyC,cAAW,CAAC,EAAhB,CACAA,aAAW,CAACX,MAAZ,CAAmB,EAAnB,CACAW,aAAW,CAACX,MAAZ,CAAmBC,KAAnB,kBAAmCxC,MAAM,CAACS,KAA1C,EACA1B,OAAO,CAAC6D,IAAR,CAAaM,aAAb,EACApE,WAAW,CAAC,OAAZ,CACD,CACD,GAAGkB,MAAM,CAACU,OAAV,CAAkB,CAChB,GAAIwC,cAAW,CAAC,EAAhB,CACAA,aAAW,CAACX,MAAZ,CAAmB,EAAnB,CACAW,aAAW,CAACX,MAAZ,CAAmBC,KAAnB,oBAAqCxC,MAAM,CAACU,OAA5C,EACA3B,OAAO,CAAC6D,IAAR,CAAaM,aAAb,EACApE,WAAW,CAAC,SAAZ,CACD,CACD6B,OAAO,CAACC,GAAR,CAAYQ,QAAQ,CAACU,OAAT,CAAiB,CAAjB,CAAZ,CAAgC/C,OAAhC,CAAwC,SAAxC,EACAc,gBAAgB,CAACuB,QAAQ,CAACU,OAAV,CAAhB,CACD,CA1DG,EA0DDL,KA1DC,CA0DK,SAAAC,GAAG,QAAIf,QAAO,CAACgB,KAAR,CAAcD,GAAd,CAAJ,EA1DR,CAzCZ,SAoGQ/B,UAAU,CAAC,KAAD,CAAV,CApGR,yDAlQK,yCA2WL,GAAMwD,OAAM,CAAG,QAATA,OAAS,CAACC,EAAD,CAAQ,CACrB,GAAIC,MAAJ,CAAUC,KAAV,CAAgBC,MAAhB,CACA,GAAIC,eAAc,CAAC,CAAnB,CAEAJ,EAAE,CAACK,KAAH,CAAW,UAAM,CACf,GAAGjE,YAAH,CAAgB,CACd4D,EAAE,CAACM,YAAH,CAAgBN,EAAE,CAACO,WAAnB,CAA+BP,EAAE,CAACQ,YAAlC,CAA+CR,EAAE,CAACS,MAAlD,EACAT,EAAE,CAACU,KAAH,GACAV,EAAE,CAACW,MAAH,CAAU,GAAV,EACAX,EAAE,CAACY,YAAH,CAAgB,EAAhB,EACA,GAAIC,EAAC,CAAG,EAAR,CACAZ,KAAK,CAAGD,EAAE,CAACc,OAAH,CAAWD,CAAX,CAAR,CACAb,EAAE,CAACe,SAAH,CAAa,GAAb,CAAiBf,EAAE,CAACgB,MAAH,CAAU,GAA3B,EACAhB,EAAE,CAACW,MAAH,CAAU,GAAV,CAAe,EAAf,CAAmB,EAAnB,EACAX,EAAE,CAACiB,IAAH,CAAQ,CAAR,CAAU,CAAV,CAAY,CAAZ,CAAc,CAAC,GAAf,EACAjB,EAAE,CAACkB,QAAH,CAAY,EAAZ,EACAlB,EAAE,CAACY,YAAH,CAAgB,CAAhB,EACAZ,EAAE,CAACW,MAAH,CAAU,CAAV,EACAX,EAAE,CAACmB,IAAH,CAAQ,GAAR,EACAnB,EAAE,CAACR,IAAH,GACAQ,EAAE,CAACe,SAAH,CAAa,CAAb,CAAe,CAAC,EAAhB,EACAf,EAAE,CAACoB,MAAH,CAAU,CAAC,MAAX,EACApB,EAAE,CAACqB,IAAH,CAAQzF,UAAR,CAAoB,EAApB,CAAwB,CAAxB,EACAoE,EAAE,CAACnB,GAAH,GACA,wDAAC,wOACCmB,EAAE,CAACe,SAAH,CAAa,CAAb,CAAe,CAAC,GAAhB,EACAf,EAAE,CAACoB,MAAH,CAAU,CAAC,MAAX,EAEIzE,QAJL,CAIcc,IAAI,CAACe,KAAL,CAAWpC,YAAX,CAJd,CAKKY,IALL,CAKUD,MAAM,CAACC,IAAP,CAAYL,QAAZ,CALV,CAMCK,IAAI,CAACA,IAAI,CAACsE,IAAL,CAAU,iBAAMC,KAAI,CAACC,MAAL,GAAgB,GAAtB,EAAV,CAAL,CAEAxE,IAAI,CAACA,IAAI,CAACyE,KAAL,CAAW,CAAX,CAAa,CAAb,CAAL,CACIC,wBATL,CAS+B,IAAI1E,IAAI,CAAC8B,MAAV,EAAqByC,IAAI,CAACI,EAAL,CAAU,GAA/B,CAT9B,CAUC3B,EAAE,CAACoB,MAAH,CAAUM,wBAAwB,CAAC,CAAnC,EACIE,cAXL,CAWoB,CAAC,MAXrB,uCAa4B5E,IAAI,CAAC6E,OAAL,EAb5B,MAaC,kDAA0C,6CAAhCC,KAAgC,iBAAzBC,KAAyB,iBACxC/B,EAAE,CAACR,IAAH,GACAQ,EAAE,CAACoB,MAAH,CAAU,MAAV,EACApB,EAAE,CAACoB,MAAH,CAAUQ,cAAV,EACA5B,EAAE,CAACW,MAAH,CAAU,GAAV,CAAe,EAAf,CAAmB,EAAnB,EACAX,EAAE,CAACY,YAAH,CAAgB,EAAhB,EACAZ,EAAE,CAACiB,IAAH,CAAQ,CAAR,CAAU,CAAV,CAAY,CAAZ,CAAc,CAAC,GAAf,EAEAjB,EAAE,CAACR,IAAH,GACA,GAAGoC,cAAc,CAAC,CAAC,GAAnB,CAAuB,CACrB5B,EAAE,CAACe,SAAH,CAAa,CAAb,CAAe,CAAC,EAAhB,EACAf,EAAE,CAACoB,MAAH,CAAU,CAAC,MAAX,EACD,CACD,GAAGQ,cAAc,EAAE,CAAC,GAApB,CAAwB,CACtB5B,EAAE,CAACe,SAAH,CAAa,CAAb,CAAe,CAAC,GAAhB,EACAf,EAAE,CAACoB,MAAH,CAAU,MAAV,EACD,CACDpB,EAAE,CAACkB,QAAH,CAAY,EAAZ,EACAlB,EAAE,CAACY,YAAH,CAAgB,CAAhB,EACAZ,EAAE,CAACW,MAAH,CAAU,CAAV,EACAX,EAAE,CAACmB,IAAH,CAAQ,GAAR,EACAnB,EAAE,CAACqB,IAAH,CAAQU,KAAK,CAAC1C,KAAN,CAAY,IAAZ,EAAkB,CAAlB,CAAR,CAA8B,EAA9B,CAAkC,CAAlC,EACAW,EAAE,CAACnB,GAAH,GACAmB,EAAE,CAACe,SAAH,CAAa,CAAb,CAAe,CAAC,GAAhB,EACAa,cAAc,CAACA,cAAc,CAACF,wBAA9B,CACAM,MAAM,CAACrF,QAAQ,WAAIoF,KAAJ,EAAT,CAAsB,GAAtB,CAA0BH,cAA1B,CAAyCG,KAAzC,CAAN,CACA/B,EAAE,CAACnB,GAAH,GAED,CAzCF,8GAAD,KA2CD,EACF,CAhED,CAJqB,QAuENmD,OAvEM,2IAuErB,kBAAsBD,KAAtB,CAA4BE,IAA5B,CAAiCC,UAAjC,CAA4CC,EAA5C,iNACEnC,EAAE,CAACoB,MAAH,CAAU,CAAC,MAAX,EACIgB,aAFN,CAEoBF,UAFpB,CAGEE,aAAa,CAACA,aAAa,CAAC,MAA5B,CACIC,GAJN,CAIUtF,MAAM,CAACC,IAAP,CAAY+E,KAAZ,CAJV,CAKE,GAAGM,GAAG,CAACvD,MAAJ,CAAW,CAAd,CAAgB,CACduD,GAAG,CAACA,GAAG,CAACf,IAAJ,CAAS,iBAAMC,KAAI,CAACC,MAAL,GAAgB,GAAtB,EAAT,CAAJ,CACAa,GAAG,CAACA,GAAG,CAACZ,KAAJ,CAAU,CAAV,CAAY,CAAZ,CAAJ,CACD,CACGC,wBATN,CASgC,IAAIW,GAAG,CAACvD,MAAT,EAAoByC,IAAI,CAACI,EAAL,CAAU,GAA9B,CAT/B,CAUE3B,EAAE,CAACoB,MAAH,CAAUM,wBAAwB,CAAC,CAAnC,EAVF,sCAW4BW,GAAG,CAACR,OAAJ,EAX5B,MAWE,kDAAwC,6CAA9BC,KAA8B,iBAAvBQ,IAAuB,iBACtCtC,EAAE,CAACR,IAAH,GACAQ,EAAE,CAACW,MAAH,CAAU,GAAV,CAAe,EAAf,CAAmB,EAAnB,EACAX,EAAE,CAACY,YAAH,CAAgBqB,IAAI,CAAC,CAArB,EACAjC,EAAE,CAACiB,IAAH,CAAQ,CAAR,CAAU,CAAV,CAAY,CAAZ,CAAc,CAACgB,IAAf,EACAjC,EAAE,CAACR,IAAH,GACAQ,EAAE,CAACW,MAAH,CAAU,CAAV,CAAY,GAAZ,CAAgB,CAAhB,EACI4B,CAPkC,CAOhChB,IAAI,CAACC,MAAL,EAPgC,CAQtC,GAAGe,CAAC,CAAC,GAAL,CAAS,CACPvC,EAAE,CAACwC,OAAH,CAAWP,IAAI,CAAC,CAAhB,CAAmB,CAAnB,CAAsBA,IAAI,CAAC,CAA3B,CAA8BA,IAAI,CAAC,EAAnC,EACAjC,EAAE,CAACwC,OAAH,CAAW,CAACP,IAAD,CAAM,CAAjB,CAAoB,CAACA,IAAD,CAAM,CAA1B,CAA6BA,IAAI,CAAC,CAAlC,CAAqCA,IAAI,CAAC,EAA1C,EACAjC,EAAE,CAACwC,OAAH,CAAWP,IAAI,CAAC,CAAhB,CAAmB,CAACA,IAApB,CAA0BA,IAAI,CAAC,CAA/B,CAAkCA,IAAI,CAAC,EAAvC,EACD,CAJD,IAIK,CACHjC,EAAE,CAACwC,OAAH,CAAW,CAACP,IAAD,CAAM,CAAjB,CAAoB,CAApB,CAAuBA,IAAI,CAAC,CAA5B,CAA+BA,IAAI,CAAC,EAApC,EACAjC,EAAE,CAACwC,OAAH,CAAWP,IAAI,CAAC,CAAhB,CAAmB,CAACA,IAAD,CAAM,CAAzB,CAA4BA,IAAI,CAAC,CAAjC,CAAoCA,IAAI,CAAC,EAAzC,EACAjC,EAAE,CAACwC,OAAH,CAAW,CAACP,IAAD,CAAM,CAAjB,CAAoB,CAACA,IAArB,CAA2BA,IAAI,CAAC,CAAhC,CAAmCA,IAAI,CAAC,EAAxC,EACD,CACDjC,EAAE,CAACwC,OAAH,CAAW,CAAX,CAAc,CAACP,IAAf,CAAqBA,IAAI,CAAC,EAA1B,CAA6BA,IAAI,CAAC,CAAlC,EAGAjC,EAAE,CAACnB,GAAH,GACAmB,EAAE,CAACR,IAAH,GACA,GAAG4C,aAAa,CAAC,CAAC,CAAlB,CAAoB,CAClBpC,EAAE,CAACe,SAAH,CAAa,CAAb,CAAe,CAACkB,IAAD,CAAM,EAArB,EACAjC,EAAE,CAACoB,MAAH,CAAU,CAAC,MAAX,EACD,CAHD,IAGK,CACHpB,EAAE,CAACe,SAAH,CAAa,CAAb,CAAe,CAACkB,IAAhB,EACAjC,EAAE,CAACoB,MAAH,CAAU,MAAV,EACD,CACDpB,EAAE,CAACkB,QAAH,CAAYe,IAAI,CAAC,EAAjB,EACAjC,EAAE,CAACY,YAAH,CAAgB,CAAhB,EACAZ,EAAE,CAACW,MAAH,CAAU,CAAV,EACAX,EAAE,CAACmB,IAAH,CAAQ,GAAR,EACAnB,EAAE,CAACqB,IAAH,CAAQiB,IAAI,CAACjD,KAAL,CAAW,IAAX,EAAiB,CAAjB,CAAR,CAA6B,EAA7B,CAAiC,CAAjC,EACAW,EAAE,CAACnB,GAAH,GAEAmB,EAAE,CAACnB,GAAH,GACAuD,aAAa,CAACA,aAAa,CAACV,wBAA5B,CACA1B,EAAE,CAACoB,MAAH,CAAUM,wBAAV,EACD,CAlDH,+GAvEqB,yCA0HpB,CAIF,CA9HD,CA+HA,GAAIe,QAAJ,CACA,GAAIzF,KAAJ,CACA,GAAI0F,SAAJ,CACA,GAAIC,SAAJ,CAEA,GAAGvG,YAAH,CAAgB,CACdqG,OAAO,CAAChF,IAAI,CAACe,KAAL,CAAWpC,YAAX,CAAR,CACAmB,OAAO,CAACC,GAAR,CAAYiF,OAAZ,EACAzF,IAAI,CAACD,MAAM,CAACC,IAAP,CAAYyF,OAAZ,CAAL,CACAlF,OAAO,CAACC,GAAR,CAAY,MAAZ,CAAmBR,IAAnB,EACA,GAAIA,IAAI,CAAC8B,MAAL,CAAY,CAAhB,CAAkB,CAChB4D,QAAQ,CAAC1F,IAAI,CAAC,CAAD,CAAb,CACA0F,QAAQ,CAACA,QAAQ,CAACrD,KAAT,CAAe,IAAf,CAAT,CACAqD,QAAQ,CAACA,QAAQ,CAAC,CAAD,CAAjB,CACD,CACF,CAED,GAAGA,QAAQ,EAAE,SAAb,CAAuB,CACrBC,QAAQ,CAAC,QAAT,CACD,CACD,GAAGD,QAAQ,EAAE,QAAb,CAAsB,CACpBC,QAAQ,CAAC,OAAT,CACD,CACD,GAAGD,QAAQ,EAAE,OAAb,CAAqB,CACnBC,QAAQ,CAAC,OAAT,CACD,CACD,GAAGD,QAAQ,EAAE,OAAb,CAAqB,CACnBC,QAAQ,CAAC,QAAT,CACD,CACD,GAAGD,QAAQ,EAAE,QAAb,CAAsB,CACpBC,QAAQ,CAAC,OAAT,CACD,CACD,GAAGD,QAAQ,EAAE,OAAb,CAAqB,CACnBC,QAAQ,CAAC,SAAT,CACD,CAGDpF,OAAO,CAACC,GAAR,CAAY,UAAZ,CAAuBkF,QAAvB,EAEA,GAAIE,OAAM,CAAC,CAAC,OAAD,CAAS,KAAT,CAAe,QAAf,CAAwB,MAAxB,CAA+B,QAA/B,CAAwC,QAAxC,CAAiD,MAAjD,CAAwD,OAAxD,CAAgE,KAAhE,CAAsE,QAAtE,CAA+E,MAA/E,CAAsF,QAAtF,CAA+F,QAA/F,CAAwG,MAAxG,CAA+G,OAA/G,CAAuH,KAAvH,CAA6H,QAA7H,CAAsI,MAAtI,CAA6I,QAA7I,CAAsJ,QAAtJ,CAA+J,MAA/J,CAAsK,OAAtK,CAA8K,KAA9K,CAAoL,QAApL,CAA6L,MAA7L,CAAoM,QAApM,CAA6M,QAA7M,CAAsN,MAAtN,CAA6N,OAA7N,CAAqO,KAArO,CAA2O,QAA3O,CAAoP,MAApP,CAA2P,QAA3P,CAAoQ,QAApQ,CAA6Q,MAA7Q,CAAoR,OAApR,CAA4R,KAA5R,CAAkS,QAAlS,CAA2S,MAA3S,CAAkT,QAAlT,CAA2T,QAA3T,CAAoU,MAApU,CAA2U,OAA3U,CAAmV,KAAnV,CAAyV,QAAzV,CAAkW,MAAlW,CAAyW,QAAzW,CAAkX,QAAlX,CAA2X,MAA3X,CAAkY,OAAlY,CAA0Y,KAA1Y,CAAgZ,QAAhZ,CAAyZ,MAAzZ,CAAga,QAAha,CAAya,QAAza,CAAkb,MAAlb,CAAyb,OAAzb,CAAic,KAAjc,CAAuc,QAAvc,CAAgd,MAAhd,CAAud,QAAvd,CAAge,QAAhe,CAAye,MAAze,CAAgf,OAAhf,CAAwf,KAAxf,CAA8f,QAA9f,CAAugB,MAAvgB,CAA8gB,QAA9gB,CAAuhB,QAAvhB,CAAgiB,MAAhiB,CAAX,CACA,GAAIC,OAAM,CAAC,EAAX,CACA,GAAIlH,OAAJ,CAAY,CACV,GAAIA,OAAO,CAACmD,MAAR,CAAe,CAAnB,CAAqB,CACnBvB,OAAO,CAACC,GAAR,CAAY7B,OAAZ,EACJkH,MAAM,CAAClH,OAAO,CAACmH,GAAR,CAAY,SAAAC,IAAI,CAAE,CACvB,GAAGA,IAAI,GAAG,EAAV,CAAa,CACb,MAAOA,KAAI,CAAC5D,MAAL,CAAYC,KAAnB,CACC,CACA,CAJI,CAAP,CAKEyD,MAAM,CAACG,KAAP,GACC,CACF,CAED,QAASC,aAAT,CAAsBrE,KAAtB,CAA6B,CACzBrB,OAAO,CAACC,GAAR,CAAYoB,KAAK,CAACO,MAAN,CAAaC,KAAzB,EACAnD,UAAU,CAAC2C,KAAK,CAACO,MAAN,CAAaC,KAAxB,CACD,CAGH7B,OAAO,CAACC,GAAR,CAAYqF,MAAZ,CAAmB,QAAnB,EACA,mBAAQ,wCACN,aAAK,KAAK,CAAE,CAACK,OAAO,CAAC5G,OAAO,CAAC,QAAD,CAAU,MAA1B,CAAiC6G,MAAM,CAAC,KAAxC,CAA8CC,OAAO,CAAC,KAAtD,CAA4DC,GAAG,CAAC,OAAhE,CAAwEC,IAAI,CAAC,OAA7E,CAAZ,wBACA,YAAK,KAAK,CAAC,QAAX,CAAoB,KAAK,CAAE,CAACH,MAAM,CAAC,KAAR,CAA3B,EADA,cACiD,WAAI,KAAK,CAAE,CAACI,UAAU,CAAC,KAAZ,CAAkBC,QAAQ,CAAC,MAA3B,CAAkCN,OAAO,CAAC,QAA1C,CAAmDO,KAAK,CAAC,SAAzD,CAAX,qBADjD,GADM,cAIN,aAAK,KAAK,CAAE,CAACP,OAAO,CAAC5G,OAAO,CAAC,MAAD,CAAQ,OAAxB,CAAZ,wBACA,YAAK,KAAK,CAAE,CAACoH,SAAS,CAAC,oBAAX,CAAZ,uBACA,KAAC,cAAD,EAAgB,MAAM,CAAE3D,MAAxB,EADA,EADA,cAIA,aAAK,KAAK,CAAE,CAAC4D,KAAK,CAAC,OAAP,CAAeR,MAAM,CAAC,GAAtB,CAAZ,wBACA,YAAK,GAAG,CAAE1H,MAAV,CAAkB,KAAK,CAAE,CAACkI,KAAK,CAAC,OAAP,CAAe3C,MAAM,CAAC,OAAtB,CAA8BqC,GAAG,CAAC,GAAlC,CAAsCC,IAAI,CAAC,GAA3C,CAA+CM,QAAQ,CAAC,UAAxD,CAAmEC,MAAM,CAAC,KAA1E,CAAzB,EADA,cAEA,YAAK,GAAG,CAAErI,GAAV,CAAe,KAAK,CAAE,CAACmI,KAAK,CAAC,OAAP,CAAeC,QAAQ,CAAC,UAAxB,CAAmCH,KAAK,CAAC,OAAzC,CAAiDI,MAAM,CAAC,IAAxD,CAA6DR,GAAG,CAAC,OAAjE,CAAyEE,UAAU,CAAC,OAApF,CAAtB,EAFA,cAGA,YAAI,KAAK,CAAE,CAACO,WAAW,CAAC,KAAb,CAAmBC,UAAU,CAAC,GAA9B,CAAkCC,SAAS,CAAC,GAA5C,CAAX,WAA8DnI,eAA9D,KAAgFD,UAAhF,GAHA,CAIC,CAACG,GAAG,EAAED,WAAN,gBAAoB,aAAK,KAAK,CAAE,CAAC6H,KAAK,CAAC,OAAP,CAAeT,OAAO,CAAC,MAAvB,CAAZ,wBACrB,YAAK,KAAK,CAAE,CAACS,KAAK,CAAC,MAAP,CAAcJ,UAAU,CAAC,KAAzB,CAAZ,UAA8CxH,GAAG,eAAE,YAAK,KAAK,CAAE,CAAC4H,KAAK,CAAC,MAAP,CAAZ,CAA4B,GAAG,CAAE5H,GAAjC,EAAnD,EADqB,cAErB,YAAK,KAAK,CAAE,CAAC4H,KAAK,CAAC,MAAP,CAAcM,WAAW,CAAC,KAA1B,CAAZ,UAA+CnI,WAAW,eAAE,WAAI,KAAK,CAAE,CAACkI,SAAS,CAAC,GAAX,CAAeT,UAAU,CAAC,GAA1B,CAAX,UAA4CzH,WAA5C,EAA5D,EAFqB,GAJrB,cAQA,aARA,cASA,aAAK,KAAK,CAAE,CAACyH,UAAU,CAAC,KAAZ,CAAZ,wBACA,cAAO,QAAQ,CAAEN,YAAjB,EADA,cACuC,eAAQ,OAAO,CAAEpD,MAAjB,2BADvC,cAEA,YAAK,KAAK,CAAE,CAACqE,aAAa,CAAC,GAAf,CAAmBC,YAAY,CAAC,GAAhC,CAAoCJ,UAAU,CAAC,OAA/C,CAAuDC,SAAS,CAAC,OAAjE,CAAZ,UACEnB,MAAM,CAAC/D,MAAP,CAAc,CAAf,EAAmB+D,MAAM,CAACC,GAAP,CAAW,SAACC,IAAD,CAAMjB,KAAN,qBAAc,YAAI,KAAK,CAAE,CAACoB,OAAO,CAAC,QAAT,CAAkBc,SAAS,CAAC,KAA5B,CAAX,WAAgDjB,IAAhD,CAAuDjB,KAAK,CAACe,MAAM,CAAC/D,MAAP,CAAc,CAArB,eAAyB,+BAA/E,GAAd,EAAX,CADpB,EAFA,GATA,cAeA,YAAI,KAAK,CAAE,CAACgF,WAAW,CAAC,KAAb,CAAmBI,aAAa,CAAC,GAAjC,CAAqCC,YAAY,CAAC,GAAlD,CAAsDJ,UAAU,CAAC,OAAjE,CAAyEC,SAAS,CAAC,OAAnF,CAAX,+BAA0HnI,eAA1H,MAA6ID,UAA7I,GAfA,cAgBA,YAAK,KAAK,CAAE,CAACkI,WAAW,CAAC,KAAb,CAAmBE,SAAS,CAAC,OAA7B,CAAZ,UACCtI,WAAW,eAAE,eAAQ,KAAK,CAAE,CAAC0I,QAAQ,CAAC,MAAV,CAAiBlB,OAAO,CAAC,QAAzB,CAAf,CAAmD,OAAO,CAAEvE,UAA5D,0BADd,EAhBA,cAmBA,YAAK,KAAK,CAAE,CAACuE,OAAO,CAAC,MAAT,CAAgBS,KAAK,CAAC,OAAtB,CAA8BU,SAAS,CAAC,QAAxC,CAAZ,UAECrH,IAAI,EAAEA,IAAI,CAAC8F,GAAL,CAAS,SAACT,GAAD,CAAKP,KAAL,qBAAa,aAAK,KAAK,CAAE,CAACyB,UAAU,CAAC,KAAZ,CAAkBI,KAAK,CAAC,MAAxB,CAAZ,wBAA6C,qBAAMjB,QAAQ,eAAE,oBAAMA,QAAN,EAAhB,EAA7C,cAAwF,eAAQ,KAAK,CAAE,CAAC4B,eAAe,CAAC1B,MAAM,CAACd,KAAD,CAAvB,CAA+BoB,OAAO,CAAC,OAAvC,CAAf,CAAgE,OAAO,CAAE,iBAACqB,CAAD,QAAOxF,cAAa,CAACwF,CAAD,CAAG,IAAH,CAApB,EAAzE,CAAuG,KAAK,CAAElC,GAA9G,UAAoHA,GAAG,CAAChD,KAAJ,CAAU,IAAV,EAAgB,CAAhB,CAApH,EAAxF,CAA0OtC,MAAM,CAACC,IAAP,CAAYyF,OAAO,WAAIJ,GAAJ,EAAnB,EAA+BvD,MAA/B,CAAsC,CAAvC,eAA2C,qBAAM6D,QAAQ,eAAE,oBAAKA,QAAL,EAAhB,EAApR,CAC5BF,OAAO,WAAIJ,GAAJ,EAAP,EAAmBtF,MAAM,CAACC,IAAP,CAAYyF,OAAO,WAAIJ,GAAJ,EAAnB,EAA+BS,GAA/B,CAAmC,SAAAC,IAAI,qBAAE,eAAQ,KAAK,CAAE,CAACuB,eAAe,CAAC1B,MAAM,CAACd,KAAD,CAAvB,CAA+BoB,OAAO,CAAC,OAAvC,CAAf,CAAiE,OAAO,CAAE,iBAACqB,CAAD,QAAOxF,cAAa,CAACwF,CAAD,CAAG,IAAH,CAAQlC,GAAR,CAApB,EAA1E,CAA4G,KAAK,CAAEU,IAAnH,UAA0HA,IAAI,CAAC1D,KAAL,CAAW,IAAX,EAAiB,CAAjB,CAA1H,EAAF,EAAvC,CADS,GAAb,EAAT,CAFP,EAnBA,GAJA,GAJM,GAAR,CAmCC,CACD,GAAMmF,SAAQ,CAAG,QAAXA,SAAW,CAACC,SAAD,CAAYC,SAAZ,QAA0B,KAA1B,EAAjB,CAEA,2BAAevJ,KAAK,CAACwJ,IAAN,CAAWzI,IAAX,CAAiBsI,QAAjB,CAAf"},"metadata":{},"sourceType":"module"}