{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Julia\\\\OneDrive\\\\Documents\\\\completed-apps\\\\tree-of-life-main\\\\src\\\\Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { ReactP5Wrapper } from \"react-p5-wrapper\";\nimport pot from \"./pot.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet searchlevel = \"\";\nlet history = [\"\"];\nvar trunklabel = \"Life\";\nvar trunklabellevel = \"\";\nlet img = \"\";\nlet descriptions = [];\n\nfunction Tree(props) {\n  _s();\n\n  const [taxonomyTree, setTaxonomyTree] = useState('');\n  useEffect(() => {\n    getHighestLevelOrganismData();\n  }, []);\n\n  function makeTaxonomyTree(organisms) {\n    let taxonomy = {};\n\n    for (let animal of organisms) {\n      if (searchlevel == \"\") {\n        if (animal.kingdom) {\n          if (!Object.keys(taxonomy).includes(`Kingdom: ${animal.kingdom}`)) {\n            taxonomy[`Kingdom: ${animal.kingdom}`] = {};\n          }\n        }\n\n        if (animal.phylum) {\n          if (!Object.keys(taxonomy[`Kingdom: ${animal.kingdom}`]).includes(`Phylum: ${animal.phylum}`)) {\n            taxonomy[`Kingdom: ${animal.kingdom}`][`Phylum: ${animal.phylum}`] = {};\n          }\n        }\n      }\n\n      if (searchlevel == \"Kingdom\") {\n        if (animal.phylum) {\n          if (!Object.keys(taxonomy).includes(`Phylum: ${animal.phylum}`)) {\n            taxonomy[`Phylum: ${animal.phylum}`] = {};\n          }\n        }\n\n        if (animal.class) {\n          if (!Object.keys(taxonomy[`Phylum: ${animal.phylum}`]).includes(`Class: ${animal.class}`)) {\n            taxonomy[`Phylum: ${animal.phylum}`][`Class: ${animal.class}`] = {};\n          }\n        }\n      }\n\n      if (searchlevel == \"Phylum\") {\n        if (animal.class) {\n          if (!Object.keys(taxonomy).includes(`Class: ${animal.class}`)) {\n            taxonomy[`Class: ${animal.class}`] = {};\n          }\n        }\n\n        if (animal.order) {\n          if (!Object.keys(taxonomy[`Class: ${animal.class}`]).includes(`Order: ${animal.order}`)) {\n            taxonomy[`Class: ${animal.class}`][`Order: ${animal.order}`] = {};\n          }\n        }\n      }\n\n      if (searchlevel == \"Class\") {\n        if (animal.order) {\n          if (!Object.keys(taxonomy).includes(`Order: ${animal.order}`)) {\n            taxonomy[`Order: ${animal.order}`] = {};\n          }\n        }\n\n        if (animal.family) {\n          if (!Object.keys(taxonomy[`Order: ${animal.order}`]).includes(`Family: ${animal.family}`)) {\n            taxonomy[`Order: ${animal.order}`][`Family: ${animal.family}`] = {};\n          }\n        }\n      }\n\n      if (searchlevel == \"Order\") {\n        if (animal.family) {\n          if (!Object.keys(taxonomy).includes(`Family: ${animal.family}`)) {\n            taxonomy[`Family: ${animal.family}`] = {};\n          }\n        }\n\n        if (animal.genus) {\n          if (!Object.keys(taxonomy[`Family: ${animal.family}`]).includes(`Genus: ${animal.genus}`)) {\n            taxonomy[`Family: ${animal.family}`][`Genus: ${animal.genus}`] = {};\n          }\n        }\n      }\n\n      if (searchlevel == \"Family\") {\n        if (animal.genus) {\n          if (!Object.keys(taxonomy).includes(`Genus: ${animal.genus}`)) {\n            taxonomy[`Genus: ${animal.genus}`] = {};\n          }\n        }\n\n        if (animal.species) {\n          if (!Object.keys(taxonomy[`Genus: ${animal.genus}`]).includes(`Species: ${animal.species}`)) {\n            taxonomy[`Genus: ${animal.genus}`][`Species: ${animal.species}`] = {};\n          }\n        }\n      }\n\n      if (searchlevel == \"Genus\") {\n        if (animal.species) {\n          if (!Object.keys(taxonomy).includes(`Species: ${animal.species}`)) {\n            taxonomy[`Species: ${animal.species}`] = {};\n          }\n        }\n      }\n    }\n\n    delete taxonomy[`Kingdom: incertae sedis`];\n    delete taxonomy[`Phylum: incertae sedis`];\n    delete taxonomy[`Class: incertae sedis`];\n    delete taxonomy[`Order: incertae sedis`];\n    delete taxonomy[`Family: incertae sedis`];\n    delete taxonomy[`Genus: incertae sedis`];\n    delete taxonomy[`Species: incertae sedis`];\n    console.log(\"getting taxonomy\", taxonomy);\n    setTaxonomyTree(JSON.stringify(taxonomy));\n  }\n\n  function getHighestLevelOrganismData() {\n    trunklabellevel = \"\";\n    descriptions = {};\n    image = {};\n    fetch('https://api.allorigins.win/get?url=https://api.gbif.org/v1/species?limit=1000').then(response => response.json()).then(response => JSON.parse(response.contents)).then(response => {\n      console.log(\"getting data\", response.results);\n      makeTaxonomyTree(response.results);\n    }).catch(err => console.error(err));\n  }\n\n  function upOneLevel(event) {\n    console.log(\"searchlevel before\", searchlevel);\n\n    if (searchlevel == \"Kingdom\") {\n      searchlevel = \"\";\n    }\n\n    if (searchlevel == \"Phylum\") {\n      searchlevel = \"Kingdom\";\n    }\n\n    if (searchlevel == \"Class\") {\n      searchlevel = \"Phylum\";\n    }\n\n    if (searchlevel == \"Order\") {\n      searchlevel = \"Class\";\n    }\n\n    if (searchlevel == \"Family\") {\n      searchlevel = \"Order\";\n    }\n\n    if (searchlevel == \"Genus\") {\n      searchlevel = \"Family\";\n    }\n\n    if (searchlevel == \"Species\") {\n      searchlevel = \"Genus\";\n    }\n\n    console.log(\"searchlevel after\", searchlevel);\n    console.log(\"history\", history);\n    history.pop();\n    console.log(\"history\", history);\n    console.log(history[history.length - 1]);\n\n    if (history[history.length - 1] == \"\") {\n      console.log(\"getting highest level\");\n      searchlevel = \"\";\n      getHighestLevelOrganismData();\n    } else {\n      narrowOptions(history[history.length - 1], false);\n    }\n  }\n\n  async function narrowOptions(term, goingdown) {\n    searchlevel = term.target.value.split(': ')[0];\n    let searchterm = term.target.value.split(': ')[1];\n    trunklabel = term.target.value.split(': ')[1];\n    trunklabellevel = term.target.value.split(': ')[0];\n\n    if (goingdown) {\n      history.push(term);\n    }\n\n    let highertaxonkey = await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/match?name=${searchterm}`).then(response => response.json()).then(response => JSON.parse(response.contents)).then(response => {\n      return response.usageKey;\n    }).catch(err => console.error(err));\n    console.log(highertaxonkey);\n    await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/search?limit=100%26highertaxon_key=${highertaxonkey}`).then(response => response.json()).then(response => JSON.parse(response.contents)).then(response => {\n      console.log(response.results);\n      makeTaxonomyTree(response.results);\n    }).catch(err => console.error(err));\n    await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/${highertaxonkey}/descriptions`).then(response => response.json()).then(response => JSON.parse(response.contents)).then(response => {\n      console.log(\"DESCRIPTIONS\", response.results);\n      descriptions = response.results;\n    }).catch(err => console.error(err));\n    await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/${highertaxonkey}/media`).then(response => response.json()).then(response => JSON.parse(response.contents)).then(response => {\n      console.log(\"IMAGES\", response.results);\n\n      if (response.results.length > 0) {\n        console.log(\"GETTING IMAGE\"); // img=response[`results`][0][`identifier`];\n      }\n    }).catch(err => console.error(err));\n  }\n\n  const sketch = p5 => {\n    let theta, input, button;\n    let numberofgroups = 0;\n\n    p5.setup = () => {\n      if (taxonomyTree) {\n        p5.createCanvas(1000, 550);\n        p5.background(p5.color(255, 255, 255));\n        p5.clear();\n        p5.stroke(255);\n        p5.strokeWeight(40);\n        let a = 15;\n        theta = p5.radians(a);\n        p5.translate(p5.width / 2, p5.height);\n        p5.stroke(101, 67, 33);\n        p5.line(0, 0, 0, -180);\n        p5.textSize(27);\n        p5.strokeWeight(2);\n        p5.stroke(0);\n        p5.fill(255);\n        p5.push();\n        p5.translate(0, -20);\n        p5.rotate(-1.5708);\n        p5.text(trunklabel, 10, 5);\n        p5.pop();\n\n        (async function () {\n          p5.translate(0, -180);\n          p5.rotate(-1.5708);\n          console.log(\"taxonomy tree\", taxonomyTree);\n          let taxonomy = JSON.parse(taxonomyTree);\n          let keys = Object.keys(taxonomy);\n          keys = keys.sort(() => Math.random() - 0.5);\n          keys = keys.slice(0, 6);\n          let radiangapbetweenbranches = 180 / keys.length * (Math.PI / 180);\n          p5.rotate(radiangapbetweenbranches / 2);\n          let radianprogress = -1.5708;\n\n          for (let [index, group] of keys.entries()) {\n            p5.push();\n            p5.rotate(1.5708);\n            p5.rotate(radianprogress);\n            p5.stroke(101, 67, 33);\n            p5.strokeWeight(30);\n            p5.line(0, 0, 0, -180);\n            p5.push();\n\n            if (radianprogress > -0.1) {\n              p5.translate(0, -70);\n              p5.rotate(-1.5708);\n            }\n\n            if (radianprogress <= -0.1) {\n              p5.translate(0, -160);\n              p5.rotate(1.5708);\n            }\n\n            p5.textSize(23);\n            p5.strokeWeight(2);\n            p5.stroke(0);\n            p5.fill(255);\n            p5.text(group.split(': ')[1], 10, 5);\n            p5.pop();\n            p5.translate(0, -180);\n            radianprogress = radianprogress + radiangapbetweenbranches;\n            branch(taxonomy[`${group}`], 140, radianprogress, group);\n            p5.pop();\n          }\n        })();\n      }\n\n      ;\n    };\n\n    async function branch(group, size, radianprog, gr) {\n      p5.rotate(-1.5708);\n      let radianprogres = radianprog;\n      radianprogres = radianprogres - 1.5708;\n      let key = Object.keys(group);\n\n      if (key.length > 6) {\n        key = key.sort(() => Math.random() - 0.5);\n        key = key.slice(0, 6);\n      }\n\n      let radiangapbetweenbranches = 180 / key.length * (Math.PI / 180);\n      p5.rotate(radiangapbetweenbranches / 2);\n\n      for (let [index, grou] of key.entries()) {\n        p5.push();\n        p5.stroke(101, 67, 33);\n        p5.strokeWeight(size / 8);\n        p5.line(0, 0, 0, -size);\n        p5.push();\n        p5.stroke(0, 128, 0);\n        let x = Math.random();\n\n        if (x < 0.5) {\n          p5.ellipse(size / 4, 0, size / 4, size / 16);\n          p5.ellipse(-size / 4, -size / 2, size / 4, size / 16);\n          p5.ellipse(size / 4, -size, size / 4, size / 16);\n        } else {\n          p5.ellipse(-size / 4, 0, size / 4, size / 16);\n          p5.ellipse(size / 4, -size / 2, size / 4, size / 16);\n          p5.ellipse(-size / 4, -size, size / 4, size / 16);\n        }\n\n        p5.ellipse(0, -size, size / 16, size / 4);\n        p5.pop();\n        p5.push();\n\n        if (radianprogres > -0) {\n          p5.translate(0, -size / 10);\n          p5.rotate(-1.5708);\n        } else {\n          p5.translate(0, -size);\n          p5.rotate(1.5708);\n        }\n\n        p5.textSize(size / 10);\n        p5.strokeWeight(2);\n        p5.stroke(0);\n        p5.fill(255);\n        p5.text(grou.split(': ')[1], 10, 5);\n        p5.pop();\n        p5.pop();\n        radianprogres = radianprogres + radiangapbetweenbranches;\n        p5.rotate(radiangapbetweenbranches);\n      }\n    }\n\n    ;\n  };\n\n  let taxonom;\n  let keys;\n  let titleone;\n  let titletwo;\n\n  if (taxonomyTree) {\n    taxonom = JSON.parse(taxonomyTree);\n    keys = Object.keys(taxonom);\n\n    if (keys.length > 0) {\n      titleone = keys[1];\n      titleone = titleone.split(\": \");\n      titleone = titleone[0];\n    }\n  } //kingdom,phylum,class,order,family,genus,species\n\n\n  if (titleone == \"Kingdom\") {\n    titletwo = \"Phylum\";\n  }\n\n  if (titleone == \"Phylum\") {\n    titletwo = \"Class\";\n  }\n\n  if (titleone == \"Class\") {\n    titletwo = \"Order\";\n  }\n\n  if (titleone == \"Order\") {\n    titletwo = \"Family\";\n  }\n\n  if (titleone == \"Family\") {\n    titletwo = \"Genus\";\n  }\n\n  if (titleone == \"Genus\") {\n    titletwo = \"Species\";\n  }\n\n  console.log(\"titleone\", titleone);\n  let colors = [\"green\", \"red\", \"purple\", \"blue\", \"orange\", \"yellow\", \"pink\", \"green\", \"red\", \"purple\", \"blue\", \"orange\", \"yellow\", \"pink\"];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ReactP5Wrapper, {\n      style: {\n        height: \"90vh\"\n      },\n      sketch: sketch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: pot,\n      style: {\n        width: \"20vw\",\n        position: \"absolute\",\n        color: \"white\",\n        zIndex: \"-10\",\n        top: \"520px\",\n        marginLeft: \"360px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        paddingLeft: \"2vw\",\n        marginBottom: \"2vh\",\n        marginTop: \"40vh\"\n      },\n      children: [trunklabellevel, \" \", trunklabel]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 19\n    }, this), img && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: img\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 30\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        width: \"100vw\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: searchlevel && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            margin: \"2vw\",\n            maxWidth: \"20vw\",\n            display: \"inline\"\n          },\n          onClick: upOneLevel,\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 19\n      }, this), keys && keys.map((key, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: \"2vw\",\n          width: \"20vw\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: titleone && /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: titleone\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 105\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 89\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            backgroundColor: colors[index],\n            display: \"block\"\n          },\n          onClick: e => narrowOptions(e, true),\n          value: key,\n          children: key.split(\": \")[1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 132\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: titletwo && /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: titletwo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 292\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 276\n        }, this), taxonom[`${key}`] && Object.keys(taxonom[`${key}`]).map(item => /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            backgroundColor: colors[index],\n            display: \"block\"\n          },\n          onClick: e => narrowOptions(e, true),\n          value: item,\n          children: item.split(\": \")[1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 80\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 48\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Tree, \"iBYLm3mB14bylxgCAUjvchjLN/M=\");\n\n_c = Tree;\n\nconst areEqual = (prevProps, nextProps) => true;\n\nexport default _c2 = /*#__PURE__*/React.memo(Tree, areEqual);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Tree\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useRef","useState","useEffect","ReactP5Wrapper","pot","searchlevel","history","trunklabel","trunklabellevel","img","descriptions","Tree","props","taxonomyTree","setTaxonomyTree","getHighestLevelOrganismData","makeTaxonomyTree","organisms","taxonomy","animal","kingdom","Object","keys","includes","phylum","class","order","family","genus","species","console","log","JSON","stringify","image","fetch","then","response","json","parse","contents","results","catch","err","error","upOneLevel","event","pop","length","narrowOptions","term","goingdown","target","value","split","searchterm","push","highertaxonkey","usageKey","sketch","p5","theta","input","button","numberofgroups","setup","createCanvas","background","color","clear","stroke","strokeWeight","a","radians","translate","width","height","line","textSize","fill","rotate","text","sort","Math","random","slice","radiangapbetweenbranches","PI","radianprogress","index","group","entries","branch","size","radianprog","gr","radianprogres","key","grou","x","ellipse","taxonom","titleone","titletwo","colors","position","zIndex","top","marginLeft","paddingLeft","marginBottom","marginTop","display","margin","maxWidth","map","backgroundColor","e","item","areEqual","prevProps","nextProps","memo"],"sources":["C:/Users/Julia/OneDrive/Documents/completed-apps/tree-of-life-main/src/Tree.js"],"sourcesContent":["import React, {useRef,useState,useEffect} from \"react\";\r\nimport { ReactP5Wrapper } from \"react-p5-wrapper\";\r\nimport pot from \"./pot.png\";\r\n\r\nlet searchlevel=\"\"\r\nlet history=[\"\"]\r\nvar trunklabel=\"Life\"\r\nvar trunklabellevel=\"\"\r\nlet img=\"\"\r\nlet descriptions=[]\r\n\r\nfunction Tree(props) {\r\n  const [taxonomyTree,setTaxonomyTree] = useState('');\r\n\r\n  useEffect(()=>{\r\n    getHighestLevelOrganismData()\r\n  },[])\r\n\r\n  function makeTaxonomyTree(organisms){\r\n    let taxonomy={}\r\n    for (let animal of organisms){\r\n      if(searchlevel==\"\"){\r\n        if(animal.kingdom){\r\n          if(!Object.keys(taxonomy).includes(`Kingdom: ${animal.kingdom}`)){\r\n            taxonomy[`Kingdom: ${animal.kingdom}`]={}\r\n          }\r\n        }\r\n        if (animal.phylum){\r\n          if(!Object.keys(taxonomy[`Kingdom: ${animal.kingdom}`]).includes(`Phylum: ${animal.phylum}`)){\r\n            taxonomy[`Kingdom: ${animal.kingdom}`][`Phylum: ${animal.phylum}`]={}\r\n          }\r\n        }\r\n      }\r\n\r\n      if(searchlevel==\"Kingdom\"){\r\n        if(animal.phylum){\r\n          if(!Object.keys(taxonomy).includes(`Phylum: ${animal.phylum}`)){\r\n            taxonomy[`Phylum: ${animal.phylum}`]={}\r\n          }\r\n        }\r\n        if (animal.class){\r\n          if(!Object.keys(taxonomy[`Phylum: ${animal.phylum}`]).includes(`Class: ${animal.class}`)){\r\n            taxonomy[`Phylum: ${animal.phylum}`][`Class: ${animal.class}`]={}\r\n          }\r\n        }\r\n      }\r\n\r\n      if(searchlevel==\"Phylum\"){\r\n        if (animal.class){\r\n          if(!Object.keys(taxonomy).includes(`Class: ${animal.class}`)){\r\n            taxonomy[`Class: ${animal.class}`]={}\r\n          }\r\n        }\r\n        if (animal.order){\r\n          if(!Object.keys(taxonomy[`Class: ${animal.class}`]).includes(`Order: ${animal.order}`)){\r\n            taxonomy[`Class: ${animal.class}`][`Order: ${animal.order}`]={}\r\n          }\r\n        }\r\n      }\r\n\r\n      if(searchlevel==\"Class\"){\r\n        if (animal.order){\r\n          if(!Object.keys(taxonomy).includes(`Order: ${animal.order}`)){\r\n            taxonomy[`Order: ${animal.order}`]={}\r\n          }\r\n        }\r\n        if (animal.family){\r\n          if(!Object.keys(taxonomy[`Order: ${animal.order}`]).includes(`Family: ${animal.family}`)){\r\n            taxonomy[`Order: ${animal.order}`][`Family: ${animal.family}`]={}\r\n          }\r\n        }\r\n      }\r\n\r\n      if(searchlevel==\"Order\"){\r\n        if (animal.family){\r\n          if(!Object.keys(taxonomy).includes(`Family: ${animal.family}`)){\r\n            taxonomy[`Family: ${animal.family}`]={}\r\n          }\r\n        }\r\n        if (animal.genus){\r\n          if(!Object.keys(taxonomy[`Family: ${animal.family}`]).includes(`Genus: ${animal.genus}`)){\r\n            taxonomy[`Family: ${animal.family}`][`Genus: ${animal.genus}`]={}\r\n          }\r\n        }\r\n      }\r\n\r\n      if(searchlevel==\"Family\"){\r\n        if (animal.genus){\r\n          if(!Object.keys(taxonomy).includes(`Genus: ${animal.genus}`)){\r\n            taxonomy[`Genus: ${animal.genus}`]={}\r\n          }\r\n        }\r\n        if (animal.species){\r\n          if(!Object.keys(taxonomy[`Genus: ${animal.genus}`]).includes(`Species: ${animal.species}`)){\r\n            taxonomy[`Genus: ${animal.genus}`][`Species: ${animal.species}`]={}\r\n          }\r\n        }\r\n      }\r\n      if(searchlevel==\"Genus\"){\r\n        if (animal.species){\r\n          if(!Object.keys(taxonomy).includes(`Species: ${animal.species}`)){\r\n            taxonomy[`Species: ${animal.species}`]={}\r\n          }\r\n        }\r\n      }\r\n    }\r\n    delete taxonomy[`Kingdom: incertae sedis`]\r\n    delete taxonomy[`Phylum: incertae sedis`]\r\n    delete taxonomy[`Class: incertae sedis`]\r\n    delete taxonomy[`Order: incertae sedis`]\r\n    delete taxonomy[`Family: incertae sedis`]\r\n    delete taxonomy[`Genus: incertae sedis`]\r\n    delete taxonomy[`Species: incertae sedis`]\r\n    console.log(\"getting taxonomy\",taxonomy);\r\n    setTaxonomyTree(JSON.stringify(taxonomy))\r\n  }\r\n\r\n\r\n  function getHighestLevelOrganismData(){\r\n    trunklabellevel=\"\"\r\n    descriptions={}\r\n    image={}\r\n    fetch('https://api.allorigins.win/get?url=https://api.gbif.org/v1/species?limit=1000')\r\n    .then(response => response.json())\r\n    .then(response =>JSON.parse(response.contents))\r\n    .then(response =>{\r\n      console.log(\"getting data\",response.results);\r\n      makeTaxonomyTree(response.results);\r\n    })\r\n    .catch(err => console.error(err));\r\n  }\r\n\r\n  function upOneLevel(event){\r\n    console.log(\"searchlevel before\",searchlevel)\r\n    if(searchlevel==\"Kingdom\"){\r\n      searchlevel=\"\"\r\n    }\r\n    if(searchlevel==\"Phylum\"){\r\n      searchlevel=\"Kingdom\"\r\n    }\r\n    if(searchlevel==\"Class\"){\r\n      searchlevel=\"Phylum\"\r\n    }\r\n    if(searchlevel==\"Order\"){\r\n      searchlevel=\"Class\"\r\n    }\r\n    if(searchlevel==\"Family\"){\r\n      searchlevel=\"Order\"\r\n    }\r\n    if(searchlevel==\"Genus\"){\r\n      searchlevel=\"Family\"\r\n    }\r\n    if(searchlevel==\"Species\"){\r\n      searchlevel=\"Genus\"\r\n    }\r\n    console.log(\"searchlevel after\",searchlevel)\r\n    console.log(\"history\",history)\r\n    history.pop()\r\n    console.log(\"history\",history)\r\n    console.log(history[history.length-1])\r\n\r\n    if (history[history.length-1]==\"\"){\r\n      console.log(\"getting highest level\")\r\n      searchlevel=\"\"\r\n      getHighestLevelOrganismData()\r\n    }else{\r\n      narrowOptions(history[history.length-1],false)\r\n    }\r\n  }\r\n\r\n  async function narrowOptions(term,goingdown){\r\n    searchlevel=term.target.value.split(': ')[0]\r\n    let searchterm=term.target.value.split(': ')[1]\r\n    trunklabel=term.target.value.split(': ')[1]\r\n    trunklabellevel=term.target.value.split(': ')[0]\r\n    if(goingdown){\r\n      history.push(term)\r\n    }\r\n    let highertaxonkey=await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/match?name=${searchterm}`)\r\n      .then(response => response.json())\r\n      .then(response =>JSON.parse(response.contents))\r\n      .then(response =>{\r\n        return response.usageKey})\r\n        .catch(err => console.error(err));\r\n        console.log(highertaxonkey)\r\n        await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/search?limit=100%26highertaxon_key=${highertaxonkey}`  )\r\n          .then(response => response.json())\r\n          .then(response =>JSON.parse(response.contents))\r\n          .then(response =>{\r\n            console.log(response.results);\r\n            makeTaxonomyTree(response.results);\r\n          }).catch(err => console.error(err));\r\n\r\n                await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/${highertaxonkey}/descriptions`)\r\n                  .then(response => response.json())\r\n                  .then(response =>JSON.parse(response.contents))\r\n                  .then(response =>{\r\n                    console.log(\"DESCRIPTIONS\",response.results);\r\n                    descriptions=response.results;\r\n                  })\r\n                  .catch(err => console.error(err));\r\n                  await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/${highertaxonkey}/media`)\r\n                    .then(response => response.json())\r\n                    .then(response =>JSON.parse(response.contents))\r\n                    .then(response =>{\r\n                      console.log(\"IMAGES\",response.results);\r\n                      if (response.results.length>0){\r\n                        console.log(\"GETTING IMAGE\")\r\n\r\n                        // img=response[`results`][0][`identifier`];\r\n                      }\r\n                    })\r\n                    .catch(err => console.error(err));\r\n                }\r\n\r\n\r\n\r\n\r\n\r\n                const sketch = (p5) => {\r\n                  let theta,input,button\r\n                  let numberofgroups=0\r\n\r\n                  p5.setup = () => {\r\n                    if(taxonomyTree){\r\n                      p5.createCanvas(1000, 550);\r\n                      p5.background(p5.color(255,255,255));\r\n                      p5.clear();\r\n                      p5.stroke(255);\r\n                      p5.strokeWeight(40)\r\n                      let a = 15\r\n                      theta = p5.radians(a);\r\n                      p5.translate(p5.width/2,p5.height);\r\n                      p5.stroke(101, 67, 33)\r\n                      p5.line(0,0,0,-180);\r\n                      p5.textSize(27);\r\n                      p5.strokeWeight(2)\r\n                      p5.stroke(0)\r\n                      p5.fill(255);\r\n                      p5.push();\r\n                      p5.translate(0,-20);\r\n                      p5.rotate(-1.5708);\r\n                      p5.text(trunklabel, 10, 5);\r\n                      p5.pop();\r\n                      (async function(){\r\n                        p5.translate(0,-180);\r\n                        p5.rotate(-1.5708)\r\n                        console.log(\"taxonomy tree\",taxonomyTree)\r\n                        let taxonomy=JSON.parse(taxonomyTree)\r\n                        let keys=Object.keys(taxonomy)\r\n                        keys=keys.sort(() => Math.random() - 0.5);\r\n\r\n                        keys=keys.slice(0,6)\r\n                        let radiangapbetweenbranches=(180/keys.length) * (Math.PI / 180);\r\n                        p5.rotate(radiangapbetweenbranches/2)\r\n                        let radianprogress=-1.5708\r\n\r\n                        for (let [index, group] of keys.entries()){\r\n                          p5.push()\r\n                          p5.rotate(1.5708)\r\n                          p5.rotate(radianprogress)\r\n                          p5.stroke(101, 67, 33)\r\n                          p5.strokeWeight(30)\r\n                          p5.line(0,0,0,-180)\r\n                          p5.push()\r\n                          if(radianprogress>-0.1){\r\n                            p5.translate(0,-70);\r\n                            p5.rotate(-1.5708)\r\n                          }\r\n                          if(radianprogress<=-0.1){\r\n                            p5.translate(0,-160);\r\n                            p5.rotate(1.5708)\r\n                          }\r\n                          p5.textSize(23);\r\n                          p5.strokeWeight(2)\r\n                          p5.stroke(0)\r\n                          p5.fill(255);\r\n                          p5.text(group.split(': ')[1], 10, 5)\r\n                          p5.pop()\r\n                          p5.translate(0,-180);\r\n                          radianprogress=radianprogress+radiangapbetweenbranches\r\n                          branch(taxonomy[`${group}`],140,radianprogress,group)\r\n                          p5.pop()\r\n\r\n                        }\r\n                      })()\r\n                    };\r\n                  }\r\n\r\n\r\n                  async function branch(group,size,radianprog,gr){\r\n                    p5.rotate(-1.5708)\r\n                    let radianprogres=radianprog\r\n                    radianprogres=radianprogres-1.5708\r\n                    let key=Object.keys(group)\r\n                    if(key.length>6){\r\n                      key=key.sort(() => Math.random() - 0.5);\r\n                      key=key.slice(0,6)\r\n                    }\r\n                    let radiangapbetweenbranches=(180/key.length) * (Math.PI / 180);\r\n                    p5.rotate(radiangapbetweenbranches/2)\r\n                    for (let [index, grou] of key.entries()){\r\n                      p5.push()\r\n                      p5.stroke(101, 67, 33)\r\n                      p5.strokeWeight(size/8)\r\n                      p5.line(0,0,0,-size)\r\n                      p5.push()\r\n                      p5.stroke(0,128,0)\r\n                      let x=Math.random()\r\n                      if(x<0.5){\r\n                        p5.ellipse(size/4, 0, size/4, size/16);\r\n                        p5.ellipse(-size/4, -size/2, size/4, size/16);\r\n                        p5.ellipse(size/4, -size, size/4, size/16);\r\n                      }else{\r\n                        p5.ellipse(-size/4, 0, size/4, size/16);\r\n                        p5.ellipse(size/4, -size/2, size/4, size/16);\r\n                        p5.ellipse(-size/4, -size, size/4, size/16);\r\n                      }\r\n                      p5.ellipse(0, -size, size/16,size/4);\r\n\r\n\r\n                      p5.pop()\r\n                      p5.push()\r\n                      if(radianprogres>-0){\r\n                        p5.translate(0,-size/10);\r\n                        p5.rotate(-1.5708)\r\n                      }else{\r\n                        p5.translate(0,-size);\r\n                        p5.rotate(1.5708)\r\n                      }\r\n                      p5.textSize(size/10);\r\n                      p5.strokeWeight(2)\r\n                      p5.stroke(0)\r\n                      p5.fill(255);\r\n                      p5.text(grou.split(': ')[1], 10, 5)\r\n                      p5.pop()\r\n\r\n                      p5.pop()\r\n                      radianprogres=radianprogres+radiangapbetweenbranches\r\n                      p5.rotate(radiangapbetweenbranches)\r\n                    }\r\n                  };\r\n\r\n\r\n\r\n                };\r\n                let taxonom\r\n                let keys\r\n                let titleone\r\n                let titletwo\r\n\r\n                if(taxonomyTree){\r\n                  taxonom=JSON.parse(taxonomyTree)\r\n                  keys=Object.keys(taxonom)\r\n                  if (keys.length>0){\r\n                    titleone=keys[1]\r\n                    titleone=titleone.split(\": \")\r\n                    titleone=titleone[0]\r\n                  }\r\n                }        //kingdom,phylum,class,order,family,genus,species\r\n\r\n                if(titleone==\"Kingdom\"){\r\n                  titletwo=\"Phylum\"\r\n                }\r\n                if(titleone==\"Phylum\"){\r\n                  titletwo=\"Class\"\r\n                }\r\n                if(titleone==\"Class\"){\r\n                  titletwo=\"Order\"\r\n                }\r\n                if(titleone==\"Order\"){\r\n                  titletwo=\"Family\"\r\n                }\r\n                if(titleone==\"Family\"){\r\n                  titletwo=\"Genus\"\r\n                }\r\n                if(titleone==\"Genus\"){\r\n                  titletwo=\"Species\"\r\n                }\r\n\r\n\r\n                console.log(\"titleone\",titleone)\r\n\r\n                let colors=[\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\"]\r\n\r\n                return (<>\r\n                  <ReactP5Wrapper style={{height:\"90vh\"}} sketch={sketch} />\r\n                  <img src={pot} style={{width:\"20vw\",position:\"absolute\",color:\"white\",zIndex:\"-10\",top:\"520px\",marginLeft:\"360px\"}}/>\r\n\r\n                  <h1 style={{paddingLeft:\"2vw\",marginBottom:\"2vh\",marginTop:\"40vh\"}}>{trunklabellevel} {trunklabel}</h1>\r\n                  {img&&<div><p>{img}</p></div>}\r\n\r\n                  <div style={{display:\"flex\",width:\"100vw\"}}>\r\n                  <div>\r\n                  {searchlevel&&<button style={{margin:\"2vw\",maxWidth:\"20vw\",display:\"inline\"}} onClick={upOneLevel}>Back</button>}\r\n                  </div>\r\n                  {keys&&keys.map((key,index)=><div style={{margin:\"2vw\",width:\"20vw\"}}><div>{titleone&&<h3 >{titleone}</h3>}</div><button style={{backgroundColor:colors[index],display:\"block\"}} onClick={(e) => narrowOptions(e,true)} value={key}>{key.split(\": \")[1]}</button><div>{titletwo&&<h4>{titletwo}</h4>}</div>\r\n                  {taxonom[`${key}`]&&Object.keys(taxonom[`${key}`]).map(item=><button style={{backgroundColor:colors[index],display:\"block\"}}  onClick={(e) => narrowOptions(e,true)} value={item}>{item.split(\": \")[1]}</button>)}\r\n                  </div>)}\r\n                  </div>\r\n                  </>)\r\n                }\r\n                const areEqual = (prevProps, nextProps) => true;\r\n\r\n                export default React.memo(Tree, areEqual);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}