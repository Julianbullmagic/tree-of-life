{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Julia\\\\OneDrive\\\\Documents\\\\completed-apps\\\\tree-of-life-main\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport logo from './logo.svg';\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [organisms, setOrganisms] = useState([]);\n  useEffect(() => {\n    narrowOptions(\"Hominidae\"); // fetch('https://api.gbif.org/v1/species?limit:1000')\n    //   .then(response => response.json())\n    //   .then(response =>JSON.parse(response.contents))\n    //   .then(response =>setOrganisms(response.results))\n    //   .catch(err => console.error(err));\n  }, []);\n\n  async function narrowOptions(term) {\n    let highertaxonkey = await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/match?name=${term}`).then(response => response.json()).then(response => {\n      return response.usageKey;\n    }).catch(err => console.error(err));\n    await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/search?rank=SPECIES&highertaxon_key=${highertaxonkey}`).then(response => response.json()).then(response => JSON.parse(response.contents)).then(response => {\n      console.log(response.results); // setOrganisms(response.results)\n    }).catch(err => console.error(err));\n  } //kingdom,phylum,class,order,family,genus,species\n\n\n  useEffect(() => {\n    let taxonomy = {};\n\n    for (let animal of organisms) {\n      console.log(animal);\n      console.log(\"kingdom\", animal.kingdom);\n\n      if (animal.kingdom) {\n        if (!Object.keys(taxonomy).includes(animal.kingdom)) {\n          taxonomy[`${animal.kingdom}`] = {};\n        }\n      }\n\n      if (animal.kingdom && animal.phylum) {\n        console.log(\"phylum\", animal.phylum);\n\n        if (taxonomy[`${animal.kingdom}`]) {\n          if (!Object.keys(taxonomy[`${animal.kingdom}`]).includes(animal.phylum)) {\n            taxonomy[`${animal.kingdom}`][`${animal.phylum}`] = {};\n            console.log(taxonomy[`${animal.kingdom}`][`${animal.phylum}`]);\n          }\n        }\n      }\n\n      if (animal.kingdom && animal.phylum & animal.class) {\n        console.log(\"class\", animal.class);\n\n        if (taxonomy[`${animal.kingdom}`][`${animal.phylum}`]) {\n          if (!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`]).includes(animal.class)) {\n            taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`] = {};\n            console.log(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`]);\n          }\n        }\n      }\n\n      if (animal.kingdom && animal.phylum && animal.class && animal.order) {\n        console.log(\"order\", animal.order);\n\n        if (taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`]) {\n          if (!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`]).includes(animal.order)) {\n            taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`] = {};\n            console.log(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`]);\n          }\n        }\n      }\n\n      if (animal.kingdom && animal.phylum && animal.class && animal.order && animal.family) {\n        console.log(\"family\", animal.family);\n\n        if (taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`]) {\n          if (!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`]).includes(animal.family)) {\n            taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`] = {};\n          }\n        }\n      }\n\n      if (animal.kingdom && animal.phylum && animal.class && animal.order && animal.family && animal.genus) {\n        console.log(\"genus\", animal.genus);\n\n        if (taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`]) {\n          if (!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`]).includes(animal.genus)) {\n            taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`] = {};\n          }\n        }\n      }\n\n      if (animal.kingdom && animal.phylum && animal.class && animal.order && animal.family && animal.genus && animal.species) {\n        console.log(\"species\", animal.species);\n\n        if (taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`]) {\n          if (!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`]).includes(animal.species)) {\n            taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`][`${animal.species}`] = {};\n          }\n        }\n      }\n    }\n\n    console.log(taxonomy, organisms);\n  }, [organisms]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"i84Ji4CBQNy4IUZgbSooXqgtGdM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","React","useState","useEffect","App","organisms","setOrganisms","narrowOptions","term","highertaxonkey","fetch","then","response","json","usageKey","catch","err","console","error","JSON","parse","contents","log","results","taxonomy","animal","kingdom","Object","keys","includes","phylum","class","order","family","genus","species"],"sources":["C:/Users/Julia/OneDrive/Documents/completed-apps/tree-of-life-main/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport React, {useState, useEffect} from 'react'\n\nfunction App() {\n  const [organisms,setOrganisms] = useState([]);\n\nuseEffect(()=>{\n  narrowOptions(\"Hominidae\")\n\n// fetch('https://api.gbif.org/v1/species?limit:1000')\n//   .then(response => response.json())\n//   .then(response =>JSON.parse(response.contents))\n//   .then(response =>setOrganisms(response.results))\n//   .catch(err => console.error(err));\n},[])\n\nasync function narrowOptions(term){\n  let highertaxonkey=await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/match?name=${term}`)\n    .then(response => response.json())\n    .then(response =>{return response.usageKey})\n    .catch(err => console.error(err));\n    await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/search?rank=SPECIES&highertaxon_key=${highertaxonkey}`  )\n      .then(response => response.json())\n      .then(response =>JSON.parse(response.contents))\n      .then(response =>{\n        console.log(response.results)\n        // setOrganisms(response.results)\n      })\n      .catch(err => console.error(err));\n}\n\n\n//kingdom,phylum,class,order,family,genus,species\nuseEffect(()=>{\n  let taxonomy={}\n  for (let animal of organisms){\n\n    console.log(animal)\n      console.log(\"kingdom\",animal.kingdom)\n      if(animal.kingdom){\n        if(!Object.keys(taxonomy).includes(animal.kingdom)){\n          taxonomy[`${animal.kingdom}`]={}\n        }\n      }\n\n      if (animal.kingdom&&animal.phylum){\n        console.log(\"phylum\",animal.phylum)\n          if(taxonomy[`${animal.kingdom}`]){\n            if(!Object.keys(taxonomy[`${animal.kingdom}`]).includes(animal.phylum)){\n              taxonomy[`${animal.kingdom}`][`${animal.phylum}`]={}\n              console.log(taxonomy[`${animal.kingdom}`][`${animal.phylum}`])\n            }\n          }\n        }\n\n\n      if(animal.kingdom&&animal.phylum&animal.class){\n        console.log(\"class\",animal.class)\n          if(taxonomy[`${animal.kingdom}`][`${animal.phylum}`]){\n            if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`]).includes(animal.class)){\n              taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`]={}\n              console.log(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`])\n            }\n          }\n        }\n\n\n      if(animal.kingdom&&animal.phylum&&animal.class&&animal.order){\n        console.log(\"order\",animal.order)\n        if(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`]){\n          if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`]).includes(animal.order)){\n            taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`]={}\n            console.log(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`])\n          }\n        }\n      }\n\n\n      if(animal.kingdom&&animal.phylum&&animal.class&&animal.order&&animal.family){\n      console.log(\"family\",animal.family)\n      if(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`]){\n        if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`]).includes(animal.family)){\n          taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`]={}\n        }\n      }\n    }\n\n      if(animal.kingdom&&animal.phylum&&animal.class&&animal.order&&animal.family&&animal.genus){\n      console.log(\"genus\",animal.genus)\n      if(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`]){\n        if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`]).includes(animal.genus)){\n          taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`]={}\n        }\n      }\n    }\n    if(animal.kingdom&&animal.phylum&&animal.class&&animal.order&&animal.family&&animal.genus&&animal.species){\n      console.log(\"species\",animal.species)\n      if(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`]){\n        if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`]).includes(animal.species)){\n          taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`][`${animal.species}`]={}\n        }\n      }\n    }\n\n  }\n  console.log(taxonomy,organisms)\n},[organisms])\n\n  return (\n    <div>\n\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}