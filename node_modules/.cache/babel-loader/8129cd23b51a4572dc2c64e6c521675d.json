{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Julia\\\\OneDrive\\\\Documents\\\\completed-apps\\\\tree-of-life-main\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport logo from './logo.svg';\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport Tree from \"./Tree\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [organisms, setOrganisms] = useState([]);\n  const [taxonomy, setTaxonomy] = useState({});\n  useEffect(() => {\n    fetch('https://api.allorigins.win/get?url=https://api.gbif.org/v1/species?limit=1000').then(response => response.json()).then(response => JSON.parse(response.contents)).then(response => setOrganisms(response.results)).catch(err => console.error(err));\n    narrowOptions(\"Hominidae\");\n  }, []);\n\n  async function narrowOptions(term) {\n    let highertaxonkey = await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/match?name=${term}`).then(response => response.json()).then(response => JSON.parse(response.contents)).then(response => {\n      return response.usageKey;\n    }).catch(err => console.error(err));\n    await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/search?limit=100%26highertaxon_key=${highertaxonkey}`).then(response => response.json()).then(response => JSON.parse(response.contents)).then(response => {\n      setOrganisms(response.results);\n    }).catch(err => console.error(err));\n  } //kingdom,phylum,class,order,family,genus,species\n\n\n  useEffect(() => {\n    let taxonomy = {};\n\n    for (let animal of organisms) {\n      if (animal.kingdom) {\n        if (!Object.keys(taxonomy).includes(animal.kingdom)) {\n          taxonomy[`${animal.kingdom}`] = {};\n        }\n      }\n\n      if (animal.kingdom && animal.phylum) {\n        if (taxonomy[`${animal.kingdom}`]) {\n          if (!Object.keys(taxonomy[`${animal.kingdom}`]).includes(animal.phylum)) {\n            taxonomy[`${animal.kingdom}`][`${animal.phylum}`] = {};\n          }\n        }\n      }\n\n      if (animal.kingdom && animal.phylum & animal.class) {\n        if (taxonomy[`${animal.kingdom}`][`${animal.phylum}`]) {\n          if (!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`]).includes(animal.class)) {\n            taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`] = {};\n            console.log(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`]);\n          }\n        }\n      }\n\n      if (animal.kingdom && animal.phylum && animal.class && animal.order) {\n        if (taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`]) {\n          if (!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`]).includes(animal.order)) {\n            taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`] = {};\n            console.log(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`]);\n          }\n        }\n      }\n\n      if (animal.kingdom && animal.phylum && animal.class && animal.order && animal.family) {\n        if (taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`]) {\n          if (!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`]).includes(animal.family)) {\n            taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`] = {};\n          }\n        }\n      }\n\n      if (animal.kingdom && animal.phylum && animal.class && animal.order && animal.family && animal.genus) {\n        if (taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`]) {\n          if (!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`]).includes(animal.genus)) {\n            taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`] = {};\n          }\n        }\n      }\n\n      if (animal.kingdom && animal.phylum && animal.class && animal.order && animal.family && animal.genus && animal.species) {\n        if (taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`]) {\n          if (!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`]).includes(animal.species)) {\n            taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`][`${animal.species}`] = {};\n          }\n        }\n      }\n    }\n\n    console.log(taxonomy);\n    setTaxonomy(taxonomy);\n  }, [organisms]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100vw\",\n      height: \"100vh\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Tree, {\n      taxonomy: taxonomy\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"qEJLAPR5wPiuRU9Gv2t/WSGxEpM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","React","useState","useEffect","Tree","App","organisms","setOrganisms","taxonomy","setTaxonomy","fetch","then","response","json","JSON","parse","contents","results","catch","err","console","error","narrowOptions","term","highertaxonkey","usageKey","animal","kingdom","Object","keys","includes","phylum","class","log","order","family","genus","species","width","height"],"sources":["C:/Users/Julia/OneDrive/Documents/completed-apps/tree-of-life-main/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport React, {useState, useEffect} from 'react'\nimport Tree from \"./Tree\";\n\nfunction App() {\n  const [organisms,setOrganisms] = useState([]);\n  const [taxonomy,setTaxonomy] = useState({});\n\nuseEffect(()=>{\n  fetch('https://api.allorigins.win/get?url=https://api.gbif.org/v1/species?limit=1000')\n    .then(response => response.json())\n    .then(response =>JSON.parse(response.contents))\n    .then(response =>setOrganisms(response.results))\n    .catch(err => console.error(err));\n\n\n  narrowOptions(\"Hominidae\")\n},[])\n\nasync function narrowOptions(term){\n  let highertaxonkey=await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/match?name=${term}`)\n    .then(response => response.json())\n    .then(response =>JSON.parse(response.contents))\n    .then(response =>{\n      return response.usageKey})\n    .catch(err => console.error(err));\n    await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/search?limit=100%26highertaxon_key=${highertaxonkey}`  )\n      .then(response => response.json())\n      .then(response =>JSON.parse(response.contents))\n      .then(response =>{\n        setOrganisms(response.results)\n      }).catch(err => console.error(err));\n}\n\n\n//kingdom,phylum,class,order,family,genus,species\nuseEffect(()=>{\n  let taxonomy={}\n  for (let animal of organisms){\n      if(animal.kingdom){\n        if(!Object.keys(taxonomy).includes(animal.kingdom)){\n          taxonomy[`${animal.kingdom}`]={}\n        }\n      }\n\n      if (animal.kingdom&&animal.phylum){\n          if(taxonomy[`${animal.kingdom}`]){\n            if(!Object.keys(taxonomy[`${animal.kingdom}`]).includes(animal.phylum)){\n              taxonomy[`${animal.kingdom}`][`${animal.phylum}`]={}\n            }\n          }\n        }\n\n\n      if(animal.kingdom&&animal.phylum&animal.class){\n          if(taxonomy[`${animal.kingdom}`][`${animal.phylum}`]){\n            if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`]).includes(animal.class)){\n              taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`]={}\n              console.log(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`])\n            }\n          }\n        }\n\n\n      if(animal.kingdom&&animal.phylum&&animal.class&&animal.order){\n        if(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`]){\n          if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`]).includes(animal.order)){\n            taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`]={}\n            console.log(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`])\n          }\n        }\n      }\n\n\n      if(animal.kingdom&&animal.phylum&&animal.class&&animal.order&&animal.family){\n      if(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`]){\n        if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`]).includes(animal.family)){\n          taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`]={}\n        }\n      }\n    }\n\n      if(animal.kingdom&&animal.phylum&&animal.class&&animal.order&&animal.family&&animal.genus){\n      if(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`]){\n        if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`]).includes(animal.genus)){\n          taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`]={}\n        }\n      }\n    }\n    if(animal.kingdom&&animal.phylum&&animal.class&&animal.order&&animal.family&&animal.genus&&animal.species){\n      if(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`]){\n        if(!Object.keys(taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`]).includes(animal.species)){\n          taxonomy[`${animal.kingdom}`][`${animal.phylum}`][`${animal.class}`][`${animal.order}`][`${animal.family}`][`${animal.genus}`][`${animal.species}`]={}\n        }\n      }\n    }\n\n  }\n  console.log(taxonomy)\n  setTaxonomy(taxonomy)\n},[organisms])\n  return (\n    <div style={{width:\"100vw\",height:\"100vh\"}}>\n      <Tree taxonomy={taxonomy}/>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}