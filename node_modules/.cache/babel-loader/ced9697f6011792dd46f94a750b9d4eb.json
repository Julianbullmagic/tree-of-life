{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Julia\\\\OneDrive\\\\Documents\\\\completed-apps\\\\tree-of-life-main\\\\src\\\\Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { ReactP5Wrapper } from \"react-p5-wrapper\";\nimport pot from \"./pot.png\";\nimport garden from \"./garden.jpg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar searchlevel = \"\";\nvar history = [\"\"];\nvar trunklabel = \"Life\";\nvar trunklabellevel = \"\";\nvar description = \"\";\nvar img = \"\";\nvar descriptions = [];\nvar searchword = \"\";\n\nfunction Tree(props) {\n  _s();\n\n  const [taxonomyTree, setTaxonomyTree] = useState('');\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    getHighestLevelOrganismData();\n  }, []);\n\n  function makeTaxonomyTree(organisms) {\n    let taxonomy = {};\n\n    for (let animal of organisms) {\n      if (searchlevel == \"\") {\n        if (animal.kingdom && animal.phylum) {\n          if (animal.kingdom) {\n            if (!Object.keys(taxonomy).includes(`Kingdom: ${animal.kingdom}`)) {\n              taxonomy[`Kingdom: ${animal.kingdom}`] = {};\n            }\n          }\n\n          if (animal.phylum) {\n            if (!Object.keys(taxonomy[`Kingdom: ${animal.kingdom}`]).includes(`Phylum: ${animal.phylum}`)) {\n              taxonomy[`Kingdom: ${animal.kingdom}`][`Phylum: ${animal.phylum}`] = {};\n            }\n          }\n        }\n      }\n\n      if (searchlevel == \"Kingdom\") {\n        if (animal.phylum && animal.class) {\n          if (animal.phylum) {\n            if (!Object.keys(taxonomy).includes(`Phylum: ${animal.phylum}`)) {\n              taxonomy[`Phylum: ${animal.phylum}`] = {};\n            }\n          }\n\n          if (animal.class) {\n            if (!Object.keys(taxonomy[`Phylum: ${animal.phylum}`]).includes(`Class: ${animal.class}`)) {\n              taxonomy[`Phylum: ${animal.phylum}`][`Class: ${animal.class}`] = {};\n            }\n          }\n        }\n      }\n\n      if (searchlevel == \"Phylum\") {\n        if (animal.class && animal.order) {\n          if (animal.class) {\n            if (!Object.keys(taxonomy).includes(`Class: ${animal.class}`)) {\n              taxonomy[`Class: ${animal.class}`] = {};\n            }\n          }\n\n          if (animal.order) {\n            if (!Object.keys(taxonomy[`Class: ${animal.class}`]).includes(`Order: ${animal.order}`)) {\n              taxonomy[`Class: ${animal.class}`][`Order: ${animal.order}`] = {};\n            }\n          }\n        }\n      }\n\n      if (searchlevel == \"Class\") {\n        if (animal.order && animal.family) {\n          if (animal.order) {\n            if (!Object.keys(taxonomy).includes(`Order: ${animal.order}`)) {\n              taxonomy[`Order: ${animal.order}`] = {};\n            }\n          }\n\n          if (animal.family) {\n            if (!Object.keys(taxonomy[`Order: ${animal.order}`]).includes(`Family: ${animal.family}`)) {\n              taxonomy[`Order: ${animal.order}`][`Family: ${animal.family}`] = {};\n            }\n          }\n        }\n      }\n\n      if (searchlevel == \"Order\") {\n        if (animal.family && animal.genus) {\n          if (animal.family) {\n            if (!Object.keys(taxonomy).includes(`Family: ${animal.family}`)) {\n              taxonomy[`Family: ${animal.family}`] = {};\n            }\n          }\n\n          if (animal.genus) {\n            if (!Object.keys(taxonomy[`Family: ${animal.family}`]).includes(`Genus: ${animal.genus}`)) {\n              taxonomy[`Family: ${animal.family}`][`Genus: ${animal.genus}`] = {};\n            }\n          }\n        }\n      }\n\n      if (searchlevel == \"Family\") {\n        if (animal.genus && animal.species) {\n          if (animal.genus) {\n            if (!Object.keys(taxonomy).includes(`Genus: ${animal.genus}`)) {\n              taxonomy[`Genus: ${animal.genus}`] = {};\n            }\n          }\n\n          if (animal.species) {\n            if (!Object.keys(taxonomy[`Genus: ${animal.genus}`]).includes(`Species: ${animal.species}`)) {\n              taxonomy[`Genus: ${animal.genus}`][`Species: ${animal.species}`] = {};\n            }\n          }\n        }\n      }\n\n      if (searchlevel == \"Genus\") {\n        if (animal.species) {\n          if (!Object.keys(taxonomy).includes(`Species: ${animal.species}`)) {\n            taxonomy[`Species: ${animal.species}`] = {};\n          }\n        }\n      }\n    }\n\n    delete taxonomy[`Kingdom: incertae sedis`];\n    delete taxonomy[`Phylum: incertae sedis`];\n    delete taxonomy[`Class: incertae sedis`];\n    delete taxonomy[`Order: incertae sedis`];\n    delete taxonomy[`Family: incertae sedis`];\n    delete taxonomy[`Genus: incertae sedis`];\n    delete taxonomy[`Species: incertae sedis`];\n    console.log(\"getting taxonomy\", taxonomy);\n    setTaxonomyTree(JSON.stringify(taxonomy));\n  }\n\n  async function getHighestLevelOrganismData() {\n    setLoading(true);\n    descriptions = {};\n    img = '';\n    const options = {\n      method: 'GET',\n      headers: {\n        'X-RapidAPI-Host': 'wiki-briefs.p.rapidapi.com',\n        'X-RapidAPI-Key': '24f2c04f41msh794ec7d5b9283dcp1ebdf7jsn01969526d5ac'\n      }\n    };\n    await fetch(`https://wiki-briefs.p.rapidapi.com/search?q=life&topk=6`, options).then(response => response.json()).then(response => {\n      console.log(response, \"WIKIPEDIA\");\n      img = response.image;\n      description = response.summary.join('\\r\\n');\n    }).catch(err => console.error(err));\n    await fetch('https://api.allorigins.win/get?url=https://api.gbif.org/v1/species?limit=1000').then(response => response.json()).then(response => JSON.parse(response.contents)).then(response => {\n      console.log(\"getting data\", response.results);\n      makeTaxonomyTree(response.results);\n    }).catch(err => console.error(err));\n    setLoading(false);\n  }\n\n  async function upOneLevel(event) {\n    console.log(\"searchlevel before\", searchlevel);\n\n    if (searchlevel == \"Kingdom\") {\n      searchlevel = \"\";\n    }\n\n    if (searchlevel == \"Phylum\") {\n      searchlevel = \"Kingdom\";\n    }\n\n    if (searchlevel == \"Class\") {\n      searchlevel = \"Phylum\";\n    }\n\n    if (searchlevel == \"Order\") {\n      searchlevel = \"Class\";\n    }\n\n    if (searchlevel == \"Family\") {\n      searchlevel = \"Order\";\n    }\n\n    if (searchlevel == \"Genus\") {\n      searchlevel = \"Family\";\n    }\n\n    if (searchlevel == \"Species\") {\n      searchlevel = \"Genus\";\n    }\n\n    console.log(\"searchlevel after\", searchlevel);\n    console.log(\"history\", history);\n    history.pop();\n    console.log(\"history\", history);\n    console.log(history[history.length - 1]);\n\n    if (history[history.length - 1] == \"\") {\n      console.log(\"getting highest level\");\n      searchlevel = \"\";\n      await getHighestLevelOrganismData();\n    } else {\n      await narrowOptions(history[history.length - 1], false);\n    }\n  }\n\n  async function narrowOptions(term, goingdown, secondcategory) {\n    setLoading(true);\n    searchlevel = term.target.value.split(': ')[0];\n    let searchterm = term.target.value.split(': ')[1];\n    trunklabel = term.target.value.split(': ')[1];\n    trunklabellevel = term.target.value.split(': ')[0];\n    console.log(term.target.value, secondcategory);\n\n    if (goingdown) {\n      if (secondcategory) {\n        let termtwo = {};\n        termtwo.target = {};\n        termtwo.target.value = secondcategory;\n        history.push(termtwo);\n      }\n\n      let termone = {};\n      termone.target = {};\n      termone.target.value = term.target.value;\n      history.push(term);\n    }\n\n    console.log(term.target.value, secondcategory);\n    let highertaxonkey = await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/match?${trunklabellevel.toLowerCase()}=${searchterm}`).then(response => response.json()).then(response => JSON.parse(response.contents)).then(response => {\n      return response.usageKey;\n    }).catch(err => console.error(err));\n    console.log(highertaxonkey);\n    await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/${highertaxonkey}/media`).then(response => response.json()).then(response => JSON.parse(response.contents)).then(response => {\n      console.log(\"IMAGES\", response.results);\n\n      if (response.results.length > 0) {\n        console.log(\"GETTING IMAGE\");\n        img = response[`results`][0][`identifier`];\n      }\n    }).catch(err => console.error(err));\n    const options = {\n      method: 'GET',\n      headers: {\n        'X-RapidAPI-Host': 'wiki-briefs.p.rapidapi.com',\n        'X-RapidAPI-Key': '24f2c04f41msh794ec7d5b9283dcp1ebdf7jsn01969526d5ac'\n      }\n    };\n    await fetch(`https://wiki-briefs.p.rapidapi.com/search?q=${searchterm}&topk=6`, options).then(response => response.json()).then(response => {\n      console.log(response, \"WIKIPEDIA\");\n      img = response.image;\n      description = response.summary.join('\\r\\n');\n    }).catch(err => console.error(err));\n    await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/search?limit=100%26highertaxon_key=${highertaxonkey}`).then(response => response.json()).then(response => JSON.parse(response.contents)).then(response => {\n      console.log(response.results);\n      makeTaxonomyTree(response.results);\n    }).catch(err => console.error(err));\n    setLoading(false);\n  }\n\n  async function search() {\n    setLoading(true);\n    console.log(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/match?name=${searchword}`);\n    let highertaxonkey = await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/match?name=${searchword}`).then(response => response.json()).then(response => JSON.parse(response.contents)).then(response => {\n      return response.usageKey;\n    }).catch(err => console.error(err));\n    console.log(highertaxonkey);\n    const options = {\n      method: 'GET',\n      headers: {\n        'X-RapidAPI-Host': 'wiki-briefs.p.rapidapi.com',\n        'X-RapidAPI-Key': '24f2c04f41msh794ec7d5b9283dcp1ebdf7jsn01969526d5ac'\n      }\n    };\n    await fetch(`https://wiki-briefs.p.rapidapi.com/search?q=${searchword}&topk=6`, options).then(response => response.json()).then(response => {\n      console.log(response, \"WIKIPEDIA\");\n      img = response.image;\n      description = response.summary.join('\\r\\n');\n    }).catch(err => console.error(err));\n    await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/${highertaxonkey}/media`).then(response => response.json()).then(response => JSON.parse(response.contents)).then(response => {\n      console.log(\"IMAGES\", response.results);\n\n      if (response.results.length > 0) {\n        console.log(\"GETTING IMAGE\");\n        img = response[`results`][0][`identifier`];\n      }\n    }).catch(err => console.error(err));\n    await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/search?limit=100%26highertaxon_key=${highertaxonkey}`).then(response => response.json()).then(response => JSON.parse(response.contents)).then(response => {\n      console.log(response.results);\n      history = [\"\"];\n      let animal = response.results[0];\n\n      if (animal.kingdom) {\n        let historyitem = {};\n        historyitem.target = {};\n        historyitem.target.value = `Kingdom: ${animal.kingdom}`;\n        history.push(historyitem);\n        searchlevel = \"Kingdom\";\n      }\n\n      if (animal.phylum) {\n        let historyitem = {};\n        historyitem.target = {};\n        historyitem.target.value = `Phylum: ${animal.phylum}`;\n        history.push(historyitem);\n        searchlevel = \"Phylum\";\n      }\n\n      if (animal.class) {\n        let historyitem = {};\n        historyitem.target = {};\n        historyitem.target.value = `Class: ${animal.class}`;\n        history.push(historyitem);\n        searchlevel = \"Class\";\n      }\n\n      if (animal.order) {\n        let historyitem = {};\n        historyitem.target = {};\n        historyitem.target.value = `Order: ${animal.order}`;\n        history.push(historyitem);\n        searchlevel = \"Order\";\n      }\n\n      if (animal.family) {\n        let historyitem = {};\n        historyitem.target = {};\n        historyitem.target.value = `Family: ${animal.family}`;\n        history.push(historyitem);\n        searchlevel = \"Family\";\n      }\n\n      if (animal.genus) {\n        let historyitem = {};\n        historyitem.target = {};\n        historyitem.target.value = `Genus: ${animal.genus}`;\n        history.push(historyitem);\n        searchlevel = \"Genus\";\n      }\n\n      if (animal.species) {\n        let historyitem = {};\n        historyitem.target = {};\n        historyitem.target.value = `Species: ${animal.species}`;\n        history.push(historyitem);\n        searchlevel = \"Species\";\n      }\n\n      console.log(response.results[0], history, \"HISTORY\");\n      makeTaxonomyTree(response.results);\n    }).catch(err => console.error(err));\n    setLoading(false);\n  }\n\n  const sketch = p5 => {\n    let theta, input, button;\n    let numberofgroups = 0;\n\n    p5.setup = () => {\n      if (taxonomyTree) {\n        p5.createCanvas(p5.windowWidth, p5.windowHeight, p5.CANVAS);\n        p5.clear();\n        p5.stroke(255);\n        p5.strokeWeight(40);\n        let a = 15;\n        theta = p5.radians(a);\n        p5.translate(350, p5.height - 100);\n        p5.stroke(101, 67, 33);\n        p5.line(0, 0, 0, -180);\n        p5.textSize(27);\n        p5.strokeWeight(2);\n        p5.stroke(0);\n        p5.fill(255);\n        p5.push();\n        p5.translate(0, -20);\n        p5.rotate(-1.5708);\n        p5.text(trunklabel, 10, 5);\n        p5.pop();\n\n        (async function () {\n          p5.translate(0, -180);\n          p5.rotate(-1.5708);\n          let taxonomy = JSON.parse(taxonomyTree);\n          let keys = Object.keys(taxonomy);\n          keys = keys.sort(() => Math.random() - 0.5);\n          keys = keys.slice(0, 6);\n          let radiangapbetweenbranches = 180 / keys.length * (Math.PI / 180);\n          p5.rotate(radiangapbetweenbranches / 2);\n          let radianprogress = -1.5708;\n\n          for (let [index, group] of keys.entries()) {\n            p5.push();\n            p5.rotate(1.5708);\n            p5.rotate(radianprogress);\n            p5.stroke(101, 67, 33);\n            p5.strokeWeight(30);\n            p5.line(0, 0, 0, -180);\n            p5.ellipse(-160 / 4, -160 / 2, 160 / 4, 160 / 16);\n            p5.ellipse(size / 4, -size, size / 4, size / 16);\n            p5.push();\n\n            if (radianprogress > -0.1) {\n              p5.translate(0, -70);\n              p5.rotate(-1.5708);\n            }\n\n            if (radianprogress <= -0.1) {\n              p5.translate(0, -160);\n              p5.rotate(1.5708);\n            }\n\n            p5.textSize(23);\n            p5.strokeWeight(2);\n            p5.stroke(0);\n            p5.fill(255);\n            p5.text(group.split(': ')[1], 10, 5);\n            p5.pop();\n            p5.translate(0, -180);\n            radianprogress = radianprogress + radiangapbetweenbranches;\n            branch(taxonomy[`${group}`], 140, radianprogress, group);\n            p5.pop();\n          }\n        })();\n      }\n\n      ;\n    };\n\n    async function branch(group, size, radianprog, gr) {\n      p5.rotate(-1.5708);\n      let radianprogres = radianprog;\n      radianprogres = radianprogres - 1.5708;\n      let key = Object.keys(group);\n\n      if (key.length > 6) {\n        key = key.sort(() => Math.random() - 0.5);\n        key = key.slice(0, 6);\n      }\n\n      let radiangapbetweenbranches = 180 / key.length * (Math.PI / 180);\n      p5.rotate(radiangapbetweenbranches / 2);\n\n      for (let [index, grou] of key.entries()) {\n        p5.push();\n        p5.stroke(101, 67, 33);\n        p5.strokeWeight(size / 8);\n        p5.line(0, 0, 0, -size);\n        p5.push();\n        p5.stroke(0, 128, 0);\n        let x = Math.random();\n\n        if (x < 0.5) {\n          p5.ellipse(size / 4, 0, size / 4, size / 16);\n          p5.ellipse(-size / 4, -size / 2, size / 4, size / 16);\n          p5.ellipse(size / 4, -size, size / 4, size / 16);\n        } else {\n          p5.ellipse(-size / 4, 0, size / 4, size / 16);\n          p5.ellipse(size / 4, -size / 2, size / 4, size / 16);\n          p5.ellipse(-size / 4, -size, size / 4, size / 16);\n        }\n\n        p5.ellipse(0, -size, size / 16, size / 4);\n        p5.pop();\n        p5.push();\n\n        if (radianprogres > -0) {\n          p5.translate(0, -size / 10);\n          p5.rotate(-1.5708);\n        } else {\n          p5.translate(0, -size);\n          p5.rotate(1.5708);\n        }\n\n        p5.textSize(size / 10);\n        p5.strokeWeight(2);\n        p5.stroke(0);\n        p5.fill(255);\n        p5.text(grou.split(': ')[1], 10, 5);\n        p5.pop();\n        p5.pop();\n        radianprogres = radianprogres + radiangapbetweenbranches;\n        p5.rotate(radiangapbetweenbranches);\n      }\n    }\n\n    ;\n  };\n\n  let taxonom;\n  let keys;\n  let titleone;\n  let titletwo;\n\n  if (taxonomyTree) {\n    taxonom = JSON.parse(taxonomyTree);\n    console.log(taxonom);\n    keys = Object.keys(taxonom);\n    console.log(\"keys\", keys);\n\n    if (keys.length > 0) {\n      titleone = keys[0];\n      titleone = titleone.split(\": \");\n      titleone = titleone[0];\n    }\n  }\n\n  if (titleone == \"Kingdom\") {\n    titletwo = \"Phylum\";\n  }\n\n  if (titleone == \"Phylum\") {\n    titletwo = \"Class\";\n  }\n\n  if (titleone == \"Class\") {\n    titletwo = \"Order\";\n  }\n\n  if (titleone == \"Order\") {\n    titletwo = \"Family\";\n  }\n\n  if (titleone == \"Family\") {\n    titletwo = \"Genus\";\n  }\n\n  if (titleone == \"Genus\") {\n    titletwo = \"Species\";\n  }\n\n  console.log(\"titleone\", titleone);\n  let colors = [\"green\", \"red\", \"purple\", \"blue\", \"orange\", \"yellow\", \"pink\", \"green\", \"red\", \"purple\", \"blue\", \"orange\", \"yellow\", \"pink\", \"green\", \"red\", \"purple\", \"blue\", \"orange\", \"yellow\", \"pink\", \"green\", \"red\", \"purple\", \"blue\", \"orange\", \"yellow\", \"pink\", \"green\", \"red\", \"purple\", \"blue\", \"orange\", \"yellow\", \"pink\", \"green\", \"red\", \"purple\", \"blue\", \"orange\", \"yellow\", \"pink\", \"green\", \"red\", \"purple\", \"blue\", \"orange\", \"yellow\", \"pink\", \"green\", \"red\", \"purple\", \"blue\", \"orange\", \"yellow\", \"pink\", \"green\", \"red\", \"purple\", \"blue\", \"orange\", \"yellow\", \"pink\", \"green\", \"red\", \"purple\", \"blue\", \"orange\", \"yellow\", \"pink\"];\n  var histor = [];\n\n  if (history) {\n    if (history.length > 1) {\n      console.log(history);\n      histor = history.map(item => {\n        if (item !== \"\") {\n          return item.target.value;\n        }\n      });\n      histor.shift();\n    }\n  }\n\n  function handleChange(event) {\n    console.log(event.target.value);\n    searchword = event.target.value;\n  }\n\n  console.log(histor, \"histor\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: loading ? \"inline\" : \"none\",\n        margin: \"4vw\",\n        padding: \"4vw\",\n        top: \"100px\",\n        left: \"100px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"loader\",\n        style: {\n          margin: \"4vw\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          marginLeft: \"4vw\",\n          fontSize: \"250%\",\n          display: \"inline\",\n          color: \"#3498db\"\n        },\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 68\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: loading ? \"none\" : \"block\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          transform: \"translateY(-100px)\"\n        },\n        children: /*#__PURE__*/_jsxDEV(ReactP5Wrapper, {\n          sketch: sketch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100vw\",\n          margin: \"0\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: garden,\n          style: {\n            width: \"100vw\",\n            height: \"100vh\",\n            top: \"0\",\n            left: \"0\",\n            position: \"absolute\",\n            zIndex: \"-10\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: pot,\n          style: {\n            width: \"150px\",\n            position: \"absolute\",\n            color: \"white\",\n            zIndex: \"-2\",\n            top: \"550px\",\n            marginLeft: \"275px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          style: {\n            paddingLeft: \"2vw\",\n            paddingTop: \"0\",\n            marginTop: \"0\"\n          },\n          children: [trunklabellevel, \" \", trunklabel]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 19\n        }, this), (img || description) && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: \"100vw\",\n            display: \"flex\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: \"46vw\",\n              marginLeft: \"2vw\"\n            },\n            children: img && /*#__PURE__*/_jsxDEV(\"img\", {\n              style: {\n                width: \"42vw\"\n              },\n              src: img\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 578,\n              columnNumber: 70\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: \"46vw\",\n              marginRight: \"2vw\"\n            },\n            children: description && /*#__PURE__*/_jsxDEV(\"h4\", {\n              style: {\n                marginTop: \"0\",\n                marginLeft: \"0\"\n              },\n              children: description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 579,\n              columnNumber: 79\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 579,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 40\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 581,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginLeft: \"2vw\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 583,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: search,\n            children: \"Submit Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 583,\n            columnNumber: 58\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              paddingBottom: \"0\",\n              marginBottom: \"0\",\n              paddingTop: \"0.5vh\",\n              marginTop: \"0.5vh\"\n            },\n            children: histor.length > 0 && histor.map((item, index) => /*#__PURE__*/_jsxDEV(\"h5\", {\n              style: {\n                display: \"inline\",\n                marginTop: \"0vh\"\n              },\n              children: [item, index < histor.length - 1 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: \"/ \"\n              }, void 0, false)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 585,\n              columnNumber: 64\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 584,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          style: {\n            paddingLeft: \"2vw\",\n            paddingBottom: \"0\",\n            marginBottom: \"0\",\n            paddingTop: \"0.5vh\",\n            marginTop: \"0.5vh\"\n          },\n          children: [\"Subcategories of \", trunklabellevel, \": \", trunklabel]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            paddingLeft: \"2vw\",\n            marginTop: \"0.5vh\"\n          },\n          children: searchlevel && /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              maxWidth: \"20vw\",\n              display: \"inline\"\n            },\n            onClick: upOneLevel,\n            children: \"Up One Level\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 590,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            width: \"100vw\",\n            overflowX: \"scroll\"\n          },\n          children: keys && keys.map((key, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginLeft: \"2vw\",\n              width: \"20vw\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: titleone && /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: titleone\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 594,\n                columnNumber: 109\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 594,\n              columnNumber: 93\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                backgroundColor: colors[index],\n                display: \"block\"\n              },\n              onClick: e => narrowOptions(e, true),\n              value: key,\n              children: key.split(\": \")[1]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 594,\n              columnNumber: 136\n            }, this), Object.keys(taxonom[`${key}`]).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: titletwo && /*#__PURE__*/_jsxDEV(\"h4\", {\n                children: titletwo\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 594,\n                columnNumber: 340\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 594,\n              columnNumber: 324\n            }, this), taxonom[`${key}`] && Object.keys(taxonom[`${key}`]).map(item => /*#__PURE__*/_jsxDEV(\"button\", {\n              style: {\n                backgroundColor: colors[index],\n                display: \"block\"\n              },\n              onClick: e => narrowOptions(e, true, key),\n              value: item,\n              children: item.split(\": \")[1]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 595,\n              columnNumber: 80\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 48\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 569,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Tree, \"SiLVdH0U4RSi54VIcgHFjQtD2rA=\");\n\n_c = Tree;\n\nconst areEqual = (prevProps, nextProps) => true;\n\nexport default _c2 = /*#__PURE__*/React.memo(Tree, areEqual);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Tree\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useRef","useState","useEffect","ReactP5Wrapper","pot","garden","searchlevel","history","trunklabel","trunklabellevel","description","img","descriptions","searchword","Tree","props","taxonomyTree","setTaxonomyTree","loading","setLoading","getHighestLevelOrganismData","makeTaxonomyTree","organisms","taxonomy","animal","kingdom","phylum","Object","keys","includes","class","order","family","genus","species","console","log","JSON","stringify","options","method","headers","fetch","then","response","json","image","summary","join","catch","err","error","parse","contents","results","upOneLevel","event","pop","length","narrowOptions","term","goingdown","secondcategory","target","value","split","searchterm","termtwo","push","termone","highertaxonkey","toLowerCase","usageKey","search","historyitem","sketch","p5","theta","input","button","numberofgroups","setup","createCanvas","windowWidth","windowHeight","CANVAS","clear","stroke","strokeWeight","a","radians","translate","height","line","textSize","fill","rotate","text","sort","Math","random","slice","radiangapbetweenbranches","PI","radianprogress","index","group","entries","ellipse","size","branch","radianprog","gr","radianprogres","key","grou","x","taxonom","titleone","titletwo","colors","histor","map","item","shift","handleChange","display","margin","padding","top","left","marginLeft","fontSize","color","transform","width","position","zIndex","paddingLeft","paddingTop","marginTop","marginRight","paddingBottom","marginBottom","maxWidth","overflowX","backgroundColor","e","areEqual","prevProps","nextProps","memo"],"sources":["C:/Users/Julia/OneDrive/Documents/completed-apps/tree-of-life-main/src/Tree.js"],"sourcesContent":["import React, {useRef,useState,useEffect} from \"react\";\r\nimport { ReactP5Wrapper } from \"react-p5-wrapper\";\r\nimport pot from \"./pot.png\";\r\nimport garden from \"./garden.jpg\";\r\n\r\nvar searchlevel=\"\"\r\nvar history=[\"\"]\r\nvar trunklabel=\"Life\"\r\nvar trunklabellevel=\"\"\r\nvar description=\"\"\r\nvar img=\"\"\r\nvar descriptions=[]\r\nvar searchword=\"\"\r\nfunction Tree(props) {\r\n  const [taxonomyTree,setTaxonomyTree] = useState('');\r\n  const [loading,setLoading] = useState(true);\r\n\r\n  useEffect(()=>{\r\n    getHighestLevelOrganismData()\r\n  },[])\r\n\r\n  function makeTaxonomyTree(organisms){\r\n    let taxonomy={}\r\n    for (let animal of organisms){\r\n      if(searchlevel==\"\"){\r\n        if(animal.kingdom&&animal.phylum){\r\n          if(animal.kingdom){\r\n            if(!Object.keys(taxonomy).includes(`Kingdom: ${animal.kingdom}`)){\r\n              taxonomy[`Kingdom: ${animal.kingdom}`]={}\r\n            }\r\n          }\r\n          if (animal.phylum){\r\n            if(!Object.keys(taxonomy[`Kingdom: ${animal.kingdom}`]).includes(`Phylum: ${animal.phylum}`)){\r\n              taxonomy[`Kingdom: ${animal.kingdom}`][`Phylum: ${animal.phylum}`]={}\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if(searchlevel==\"Kingdom\"){\r\n        if(animal.phylum&&animal.class){\r\n          if(animal.phylum){\r\n            if(!Object.keys(taxonomy).includes(`Phylum: ${animal.phylum}`)){\r\n              taxonomy[`Phylum: ${animal.phylum}`]={}\r\n            }\r\n          }\r\n          if (animal.class){\r\n            if(!Object.keys(taxonomy[`Phylum: ${animal.phylum}`]).includes(`Class: ${animal.class}`)){\r\n              taxonomy[`Phylum: ${animal.phylum}`][`Class: ${animal.class}`]={}\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if(searchlevel==\"Phylum\"){\r\n        if(animal.class&&animal.order){\r\n          if (animal.class){\r\n            if(!Object.keys(taxonomy).includes(`Class: ${animal.class}`)){\r\n              taxonomy[`Class: ${animal.class}`]={}\r\n            }\r\n          }\r\n          if (animal.order){\r\n            if(!Object.keys(taxonomy[`Class: ${animal.class}`]).includes(`Order: ${animal.order}`)){\r\n              taxonomy[`Class: ${animal.class}`][`Order: ${animal.order}`]={}\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if(searchlevel==\"Class\"){\r\n        if(animal.order&&animal.family){\r\n          if (animal.order){\r\n            if(!Object.keys(taxonomy).includes(`Order: ${animal.order}`)){\r\n              taxonomy[`Order: ${animal.order}`]={}\r\n            }\r\n          }\r\n          if (animal.family){\r\n            if(!Object.keys(taxonomy[`Order: ${animal.order}`]).includes(`Family: ${animal.family}`)){\r\n              taxonomy[`Order: ${animal.order}`][`Family: ${animal.family}`]={}\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if(searchlevel==\"Order\"){\r\n        if(animal.family&&animal.genus){\r\n          if (animal.family){\r\n            if(!Object.keys(taxonomy).includes(`Family: ${animal.family}`)){\r\n              taxonomy[`Family: ${animal.family}`]={}\r\n            }\r\n          }\r\n          if (animal.genus){\r\n            if(!Object.keys(taxonomy[`Family: ${animal.family}`]).includes(`Genus: ${animal.genus}`)){\r\n              taxonomy[`Family: ${animal.family}`][`Genus: ${animal.genus}`]={}\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if(searchlevel==\"Family\"){\r\n        if(animal.genus&&animal.species){\r\n          if (animal.genus){\r\n            if(!Object.keys(taxonomy).includes(`Genus: ${animal.genus}`)){\r\n              taxonomy[`Genus: ${animal.genus}`]={}\r\n            }\r\n          }\r\n          if (animal.species){\r\n            if(!Object.keys(taxonomy[`Genus: ${animal.genus}`]).includes(`Species: ${animal.species}`)){\r\n              taxonomy[`Genus: ${animal.genus}`][`Species: ${animal.species}`]={}\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if(searchlevel==\"Genus\"){\r\n        if (animal.species){\r\n          if(!Object.keys(taxonomy).includes(`Species: ${animal.species}`)){\r\n            taxonomy[`Species: ${animal.species}`]={}\r\n          }\r\n        }\r\n      }\r\n    }\r\n    delete taxonomy[`Kingdom: incertae sedis`]\r\n    delete taxonomy[`Phylum: incertae sedis`]\r\n    delete taxonomy[`Class: incertae sedis`]\r\n    delete taxonomy[`Order: incertae sedis`]\r\n    delete taxonomy[`Family: incertae sedis`]\r\n    delete taxonomy[`Genus: incertae sedis`]\r\n    delete taxonomy[`Species: incertae sedis`]\r\n    console.log(\"getting taxonomy\",taxonomy);\r\n    setTaxonomyTree(JSON.stringify(taxonomy))\r\n  }\r\n\r\n\r\n  async function getHighestLevelOrganismData(){\r\n    setLoading(true)\r\n    descriptions={}\r\n    img=''\r\n\r\n    const options = {\r\n      method: 'GET',\r\n      headers: {\r\n        'X-RapidAPI-Host': 'wiki-briefs.p.rapidapi.com',\r\n        'X-RapidAPI-Key': '24f2c04f41msh794ec7d5b9283dcp1ebdf7jsn01969526d5ac'\r\n      }\r\n    };\r\n\r\n    await fetch(`https://wiki-briefs.p.rapidapi.com/search?q=life&topk=6`, options)\r\n      .then(response => response.json())\r\n      .then(response => {console.log(response,\"WIKIPEDIA\");\r\n      img=response.image;\r\n      description=response.summary.join('\\r\\n');\r\n    })\r\n    .catch(err => console.error(err));\r\n\r\n    await fetch('https://api.allorigins.win/get?url=https://api.gbif.org/v1/species?limit=1000')\r\n    .then(response => response.json())\r\n    .then(response =>JSON.parse(response.contents))\r\n    .then(response =>{\r\n      console.log(\"getting data\",response.results);\r\n      makeTaxonomyTree(response.results);\r\n    })\r\n    .catch(err => console.error(err));\r\n    setLoading(false)\r\n  }\r\n\r\n  async function upOneLevel(event){\r\n    console.log(\"searchlevel before\",searchlevel)\r\n    if(searchlevel==\"Kingdom\"){\r\n      searchlevel=\"\"\r\n    }\r\n    if(searchlevel==\"Phylum\"){\r\n      searchlevel=\"Kingdom\"\r\n    }\r\n    if(searchlevel==\"Class\"){\r\n      searchlevel=\"Phylum\"\r\n    }\r\n    if(searchlevel==\"Order\"){\r\n      searchlevel=\"Class\"\r\n    }\r\n    if(searchlevel==\"Family\"){\r\n      searchlevel=\"Order\"\r\n    }\r\n    if(searchlevel==\"Genus\"){\r\n      searchlevel=\"Family\"\r\n    }\r\n    if(searchlevel==\"Species\"){\r\n      searchlevel=\"Genus\"\r\n    }\r\n    console.log(\"searchlevel after\",searchlevel)\r\n    console.log(\"history\",history)\r\n    history.pop()\r\n    console.log(\"history\",history)\r\n    console.log(history[history.length-1])\r\n\r\n    if (history[history.length-1]==\"\"){\r\n      console.log(\"getting highest level\")\r\n      searchlevel=\"\"\r\n      await getHighestLevelOrganismData()\r\n    }else{\r\n      await narrowOptions(history[history.length-1],false)\r\n    }\r\n  }\r\n\r\n  async function narrowOptions(term,goingdown,secondcategory){\r\n    setLoading(true)\r\n    searchlevel=term.target.value.split(': ')[0]\r\n    let searchterm=term.target.value.split(': ')[1]\r\n    trunklabel=term.target.value.split(': ')[1]\r\n    trunklabellevel=term.target.value.split(': ')[0]\r\n        console.log(term.target.value,secondcategory)\r\n    if(goingdown){\r\n      if (secondcategory){\r\n        let termtwo={}\r\n        termtwo.target={}\r\n        termtwo.target.value=secondcategory\r\n        history.push(termtwo)\r\n      }\r\n      let termone={}\r\n      termone.target={}\r\n      termone.target.value=term.target.value\r\n      history.push(term)\r\n    }\r\n    console.log(term.target.value,secondcategory)\r\n    let highertaxonkey=await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/match?${trunklabellevel.toLowerCase()}=${searchterm}`)\r\n      .then(response => response.json())\r\n      .then(response =>JSON.parse(response.contents))\r\n      .then(response =>{\r\n        return response.usageKey})\r\n        .catch(err => console.error(err));\r\n        console.log(highertaxonkey)\r\n\r\n          await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/${highertaxonkey}/media`)\r\n            .then(response => response.json())\r\n            .then(response =>JSON.parse(response.contents))\r\n            .then(response =>{\r\n              console.log(\"IMAGES\",response.results);\r\n              if (response.results.length>0){\r\n                console.log(\"GETTING IMAGE\")\r\n                img=response[`results`][0][`identifier`];\r\n              }\r\n            })\r\n            .catch(err => console.error(err));\r\n\r\n\r\n            const options = {\r\n              method: 'GET',\r\n              headers: {\r\n                'X-RapidAPI-Host': 'wiki-briefs.p.rapidapi.com',\r\n                'X-RapidAPI-Key': '24f2c04f41msh794ec7d5b9283dcp1ebdf7jsn01969526d5ac'\r\n              }\r\n            };\r\n            await fetch(`https://wiki-briefs.p.rapidapi.com/search?q=${searchterm}&topk=6`, options)\r\n              .then(response => response.json())\r\n              .then(response => {console.log(response,\"WIKIPEDIA\");\r\n              img=response.image;\r\n              description=response.summary.join('\\r\\n');\r\n            })\r\n              .catch(err => console.error(err));\r\n\r\n\r\n\r\n        await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/search?limit=100%26highertaxon_key=${highertaxonkey}`  )\r\n          .then(response => response.json())\r\n          .then(response =>JSON.parse(response.contents))\r\n          .then(response =>{\r\n            console.log(response.results);\r\n            makeTaxonomyTree(response.results);\r\n          }).catch(err => console.error(err))\r\n          setLoading(false)\r\n                }\r\n\r\n                async function search(){\r\n                  setLoading(true)\r\n                  console.log(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/match?name=${searchword}`)\r\n                  let highertaxonkey=await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/match?name=${searchword}`)\r\n                    .then(response => response.json())\r\n                    .then(response =>JSON.parse(response.contents))\r\n                    .then(response =>{\r\n                      return response.usageKey})\r\n                      .catch(err => console.error(err));\r\n                      console.log(highertaxonkey)\r\n\r\n\r\n                      const options = {\r\n                        method: 'GET',\r\n                        headers: {\r\n                          'X-RapidAPI-Host': 'wiki-briefs.p.rapidapi.com',\r\n                          'X-RapidAPI-Key': '24f2c04f41msh794ec7d5b9283dcp1ebdf7jsn01969526d5ac'\r\n                        }\r\n                      };\r\n\r\n                      await fetch(`https://wiki-briefs.p.rapidapi.com/search?q=${searchword}&topk=6`, options)\r\n                        .then(response => response.json())\r\n                        .then(response => {console.log(response,\"WIKIPEDIA\");\r\n                        img=response.image;\r\n                        description=response.summary.join('\\r\\n');\r\n                      })\r\n                      .catch(err => console.error(err));\r\n\r\n\r\n                        await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/${highertaxonkey}/media`)\r\n                          .then(response => response.json())\r\n                          .then(response =>JSON.parse(response.contents))\r\n                          .then(response =>{\r\n                            console.log(\"IMAGES\",response.results);\r\n                            if (response.results.length>0){\r\n                              console.log(\"GETTING IMAGE\")\r\n                              img=response[`results`][0][`identifier`];\r\n                            }\r\n                          })\r\n                          .catch(err => console.error(err));\r\n\r\n                      await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/search?limit=100%26highertaxon_key=${highertaxonkey}`  )\r\n                        .then(response => response.json())\r\n                        .then(response =>JSON.parse(response.contents))\r\n                        .then(response =>{\r\n                          console.log(response.results);\r\n                          history=[\"\"]\r\n                          let animal=response.results[0]\r\n                          if(animal.kingdom){\r\n                            let historyitem={}\r\n                            historyitem.target={}\r\n                            historyitem.target.value=`Kingdom: ${animal.kingdom}`\r\n                            history.push(historyitem)\r\n                            searchlevel=\"Kingdom\"\r\n                          }\r\n                          if(animal.phylum){\r\n                            let historyitem={}\r\n                            historyitem.target={}\r\n                            historyitem.target.value=`Phylum: ${animal.phylum}`\r\n                            history.push(historyitem)\r\n                            searchlevel=\"Phylum\"\r\n                          }\r\n                          if(animal.class){\r\n                            let historyitem={}\r\n                            historyitem.target={}\r\n                            historyitem.target.value=`Class: ${animal.class}`\r\n                            history.push(historyitem)\r\n                            searchlevel=\"Class\"\r\n                          }\r\n                          if(animal.order){\r\n                            let historyitem={}\r\n                            historyitem.target={}\r\n                            historyitem.target.value=`Order: ${animal.order}`\r\n                            history.push(historyitem)\r\n                            searchlevel=\"Order\"\r\n                          }\r\n                          if(animal.family){\r\n                            let historyitem={}\r\n                            historyitem.target={}\r\n                            historyitem.target.value=`Family: ${animal.family}`\r\n                            history.push(historyitem)\r\n                            searchlevel=\"Family\"\r\n                          }\r\n                          if(animal.genus){\r\n                            let historyitem={}\r\n                            historyitem.target={}\r\n                            historyitem.target.value=`Genus: ${animal.genus}`\r\n                            history.push(historyitem)\r\n                            searchlevel=\"Genus\"\r\n                          }\r\n                          if(animal.species){\r\n                            let historyitem={}\r\n                            historyitem.target={}\r\n                            historyitem.target.value=`Species: ${animal.species}`\r\n                            history.push(historyitem)\r\n                            searchlevel=\"Species\"\r\n                          }\r\n                          console.log(response.results[0],history,\"HISTORY\")\r\n                          makeTaxonomyTree(response.results);\r\n                        }).catch(err => console.error(err));\r\n                        setLoading(false)\r\n                              }\r\n\r\n\r\n\r\n                const sketch = (p5) => {\r\n                  let theta,input,button\r\n                  let numberofgroups=0\r\n\r\n                  p5.setup = () => {\r\n                    if(taxonomyTree){\r\n                      p5.createCanvas(p5.windowWidth,p5.windowHeight,p5.CANVAS);\r\n                      p5.clear();\r\n                      p5.stroke(255);\r\n                      p5.strokeWeight(40)\r\n                      let a = 15\r\n                      theta = p5.radians(a);\r\n                      p5.translate(350,p5.height-100);\r\n                      p5.stroke(101, 67, 33)\r\n                      p5.line(0,0,0,-180);\r\n                      p5.textSize(27);\r\n                      p5.strokeWeight(2)\r\n                      p5.stroke(0)\r\n                      p5.fill(255);\r\n                      p5.push();\r\n                      p5.translate(0,-20);\r\n                      p5.rotate(-1.5708);\r\n                      p5.text(trunklabel, 10, 5);\r\n                      p5.pop();\r\n                      (async function(){\r\n                        p5.translate(0,-180);\r\n                        p5.rotate(-1.5708)\r\n\r\n                        let taxonomy=JSON.parse(taxonomyTree)\r\n                        let keys=Object.keys(taxonomy)\r\n                        keys=keys.sort(() => Math.random() - 0.5);\r\n\r\n                        keys=keys.slice(0,6)\r\n                        let radiangapbetweenbranches=(180/keys.length) * (Math.PI / 180);\r\n                        p5.rotate(radiangapbetweenbranches/2)\r\n                        let radianprogress=-1.5708\r\n\r\n                        for (let [index, group] of keys.entries()){\r\n                          p5.push()\r\n                          p5.rotate(1.5708)\r\n                          p5.rotate(radianprogress)\r\n                          p5.stroke(101, 67, 33)\r\n                          p5.strokeWeight(30)\r\n                          p5.line(0,0,0,-180)\r\n                          p5.ellipse(-160/4, -160/2, 160/4, 160/16);\r\n                          p5.ellipse(size/4, -size, size/4, size/16);\r\n                          p5.push()\r\n                          if(radianprogress>-0.1){\r\n                            p5.translate(0,-70);\r\n                            p5.rotate(-1.5708)\r\n                          }\r\n                          if(radianprogress<=-0.1){\r\n                            p5.translate(0,-160);\r\n                            p5.rotate(1.5708)\r\n                          }\r\n                          p5.textSize(23);\r\n                          p5.strokeWeight(2)\r\n                          p5.stroke(0)\r\n                          p5.fill(255);\r\n                          p5.text(group.split(': ')[1], 10, 5)\r\n                          p5.pop()\r\n                          p5.translate(0,-180);\r\n                          radianprogress=radianprogress+radiangapbetweenbranches\r\n                          branch(taxonomy[`${group}`],140,radianprogress,group)\r\n                          p5.pop()\r\n\r\n                        }\r\n                      })()\r\n                    };\r\n                  }\r\n\r\n\r\n                  async function branch(group,size,radianprog,gr){\r\n                    p5.rotate(-1.5708)\r\n                    let radianprogres=radianprog\r\n                    radianprogres=radianprogres-1.5708\r\n                    let key=Object.keys(group)\r\n                    if(key.length>6){\r\n                      key=key.sort(() => Math.random() - 0.5);\r\n                      key=key.slice(0,6)\r\n                    }\r\n                    let radiangapbetweenbranches=(180/key.length) * (Math.PI / 180);\r\n                    p5.rotate(radiangapbetweenbranches/2)\r\n                    for (let [index, grou] of key.entries()){\r\n                      p5.push()\r\n                      p5.stroke(101, 67, 33)\r\n                      p5.strokeWeight(size/8)\r\n                      p5.line(0,0,0,-size)\r\n                      p5.push()\r\n                      p5.stroke(0,128,0)\r\n                      let x=Math.random()\r\n                      if(x<0.5){\r\n                        p5.ellipse(size/4, 0, size/4, size/16);\r\n                        p5.ellipse(-size/4, -size/2, size/4, size/16);\r\n                        p5.ellipse(size/4, -size, size/4, size/16);\r\n                      }else{\r\n                        p5.ellipse(-size/4, 0, size/4, size/16);\r\n                        p5.ellipse(size/4, -size/2, size/4, size/16);\r\n                        p5.ellipse(-size/4, -size, size/4, size/16);\r\n                      }\r\n                      p5.ellipse(0, -size, size/16,size/4);\r\n\r\n\r\n                      p5.pop()\r\n                      p5.push()\r\n                      if(radianprogres>-0){\r\n                        p5.translate(0,-size/10);\r\n                        p5.rotate(-1.5708)\r\n                      }else{\r\n                        p5.translate(0,-size);\r\n                        p5.rotate(1.5708)\r\n                      }\r\n                      p5.textSize(size/10);\r\n                      p5.strokeWeight(2)\r\n                      p5.stroke(0)\r\n                      p5.fill(255);\r\n                      p5.text(grou.split(': ')[1], 10, 5)\r\n                      p5.pop()\r\n\r\n                      p5.pop()\r\n                      radianprogres=radianprogres+radiangapbetweenbranches\r\n                      p5.rotate(radiangapbetweenbranches)\r\n                    }\r\n                  };\r\n\r\n\r\n\r\n                };\r\n                let taxonom\r\n                let keys\r\n                let titleone\r\n                let titletwo\r\n\r\n                if(taxonomyTree){\r\n                  taxonom=JSON.parse(taxonomyTree)\r\n                  console.log(taxonom)\r\n                  keys=Object.keys(taxonom)\r\n                  console.log(\"keys\",keys)\r\n                  if (keys.length>0){\r\n                    titleone=keys[0]\r\n                    titleone=titleone.split(\": \")\r\n                    titleone=titleone[0]\r\n                  }\r\n                }\r\n\r\n                if(titleone==\"Kingdom\"){\r\n                  titletwo=\"Phylum\"\r\n                }\r\n                if(titleone==\"Phylum\"){\r\n                  titletwo=\"Class\"\r\n                }\r\n                if(titleone==\"Class\"){\r\n                  titletwo=\"Order\"\r\n                }\r\n                if(titleone==\"Order\"){\r\n                  titletwo=\"Family\"\r\n                }\r\n                if(titleone==\"Family\"){\r\n                  titletwo=\"Genus\"\r\n                }\r\n                if(titleone==\"Genus\"){\r\n                  titletwo=\"Species\"\r\n                }\r\n\r\n\r\n                console.log(\"titleone\",titleone)\r\n\r\n                let colors=[\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\"]\r\n                var histor=[]\r\n                if (history){\r\n                  if (history.length>1){\r\n                    console.log(history)\r\n                histor=history.map(item=>{\r\n                  if(item!==\"\"){\r\n                  return item.target.value\r\n                  }\r\n                  })\r\n                  histor.shift()\r\n                  }\r\n                }\r\n\r\n                function handleChange(event) {\r\n                    console.log(event.target.value);\r\n                    searchword=event.target.value\r\n                  }\r\n\r\n\r\n                console.log(histor,\"histor\")\r\n                return (<>\r\n                  <div style={{display:loading?\"inline\":\"none\",margin:\"4vw\",padding:\"4vw\",top:\"100px\",left:\"100px\"}}>\r\n                  <div class=\"loader\" style={{margin:\"4vw\"}}></div><h1 style={{marginLeft:\"4vw\",fontSize:\"250%\",display:\"inline\",color:\"#3498db\"}}>Loading</h1>\r\n                  </div>\r\n                  <div style={{display:loading?\"none\":\"block\"}}>\r\n                  <div style={{transform:\"translateY(-100px)\"}}>\r\n                  <ReactP5Wrapper sketch={sketch}/>\r\n                  </div>\r\n                  <div style={{width:\"100vw\",margin:\"0\"}}>\r\n                  <img src={garden} style={{width:\"100vw\",height:\"100vh\",top:\"0\",left:\"0\",position:\"absolute\",zIndex:\"-10\"}}/>\r\n                  <img src={pot} style={{width:\"150px\",position:\"absolute\",color:\"white\",zIndex:\"-2\",top:\"550px\",marginLeft:\"275px\"}}/>\r\n                  <h1 style={{paddingLeft:\"2vw\",paddingTop:\"0\",marginTop:\"0\"}}>{trunklabellevel} {trunklabel}</h1>\r\n                  {(img||description)&&<div style={{width:\"100vw\",display:\"flex\"}}>\r\n                  <div style={{width:\"46vw\",marginLeft:\"2vw\"}}>{img&&<img style={{width:\"42vw\"}} src={img}></img>}</div>\r\n                  <div style={{width:\"46vw\",marginRight:\"2vw\"}}>{description&&<h4 style={{marginTop:\"0\",marginLeft:\"0\"}}>{description}</h4>}</div>\r\n                  </div>}\r\n                  <hr/>\r\n                  <div style={{marginLeft:\"2vw\"}}>\r\n                  <input onChange={handleChange}></input><button onClick={search}>Submit Search</button>\r\n                  <div style={{paddingBottom:\"0\",marginBottom:\"0\",paddingTop:\"0.5vh\",marginTop:\"0.5vh\"}}>\r\n                  {(histor.length>0)&&histor.map((item,index)=><h5 style={{display:\"inline\",marginTop:\"0vh\"}}>{item}{(index<histor.length-1)&&<>/ </>}</h5>)}\r\n                  </div>\r\n                  </div>\r\n                  <h2 style={{paddingLeft:\"2vw\",paddingBottom:\"0\",marginBottom:\"0\",paddingTop:\"0.5vh\",marginTop:\"0.5vh\"}}>Subcategories of {trunklabellevel}: {trunklabel}</h2>\r\n                  <div style={{paddingLeft:\"2vw\",marginTop:\"0.5vh\"}}>\r\n                  {searchlevel&&<button style={{maxWidth:\"20vw\",display:\"inline\"}} onClick={upOneLevel}>Up One Level</button>}\r\n                  </div>\r\n                  <div style={{display:\"flex\",width:\"100vw\",overflowX:\"scroll\"}}>\r\n\r\n                  {keys&&keys.map((key,index)=><div style={{marginLeft:\"2vw\",width:\"20vw\"}}><div>{titleone&&<h3 >{titleone}</h3>}</div><button style={{backgroundColor:colors[index],display:\"block\"}} onClick={(e) => narrowOptions(e,true)} value={key}>{key.split(\": \")[1]}</button>{(Object.keys(taxonom[`${key}`]).length>0)&&<div>{titletwo&&<h4>{titletwo}</h4>}</div>}\r\n                  {taxonom[`${key}`]&&Object.keys(taxonom[`${key}`]).map(item=><button style={{backgroundColor:colors[index],display:\"block\"}}  onClick={(e) => narrowOptions(e,true,key)} value={item}>{item.split(\": \")[1]}</button>)}\r\n                  </div>)}\r\n                  </div>\r\n                  </div>\r\n                  </div></>)\r\n                }\r\n                const areEqual = (prevProps, nextProps) => true;\r\n\r\n                export default React.memo(Tree, areEqual);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}