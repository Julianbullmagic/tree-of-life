[{"C:\\Users\\Julia\\OneDrive\\Documents\\completed-apps\\tree-of-life-main\\src\\index.js":"1","C:\\Users\\Julia\\OneDrive\\Documents\\completed-apps\\tree-of-life-main\\src\\App.js":"2","C:\\Users\\Julia\\OneDrive\\Documents\\completed-apps\\tree-of-life-main\\src\\reportWebVitals.js":"3","C:\\Users\\Julia\\OneDrive\\Documents\\completed-apps\\tree-of-life-main\\src\\Tree.js":"4"},{"size":535,"mtime":1653286828352,"results":"5","hashOfConfig":"6"},{"size":257,"mtime":1653306866186,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1653286828354,"results":"8","hashOfConfig":"6"},{"size":25604,"mtime":1653643574415,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1bo0rg0",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"C:\\Users\\Julia\\OneDrive\\Documents\\completed-apps\\tree-of-life-main\\src\\index.js",[],[],"C:\\Users\\Julia\\OneDrive\\Documents\\completed-apps\\tree-of-life-main\\src\\App.js",["24","25","26"],[],"import logo from './logo.svg';\nimport './App.css';\nimport React, {useState, useEffect} from 'react'\nimport Tree from \"./Tree\";\n\nfunction App() {\n  return (\n    <div style={{width:\"100vw\",height:\"100vh\"}}>\n    <Tree />\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Julia\\OneDrive\\Documents\\completed-apps\\tree-of-life-main\\src\\reportWebVitals.js",[],[],"C:\\Users\\Julia\\OneDrive\\Documents\\completed-apps\\tree-of-life-main\\src\\Tree.js",["27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60"],[],"import React, {useRef,useState,useEffect} from \"react\";\r\nimport { ReactP5Wrapper } from \"react-p5-wrapper\";\r\nimport pot from \"./pot.png\";\r\nimport garden from \"./garden.jpg\";\r\n\r\nvar searchlevel=\"\"\r\nvar history=[\"\"]\r\nvar trunklabel=\"Life\"\r\nvar trunklabellevel=\"\"\r\nvar description=\"\"\r\nvar img=\"\"\r\nvar descriptions=[]\r\nvar searchword=\"\"\r\nfunction Tree(props) {\r\n  const [taxonomyTree,setTaxonomyTree] = useState('');\r\n  const [loading,setLoading] = useState(true);\r\n\r\n  useEffect(()=>{\r\n    getHighestLevelOrganismData()\r\n  },[])\r\n\r\n  function makeTaxonomyTree(organisms){\r\n    let taxonomy={}\r\n    for (let animal of organisms){\r\n      if(searchlevel==\"\"){\r\n        if(animal.kingdom&&animal.phylum){\r\n          if(animal.kingdom){\r\n            if(!Object.keys(taxonomy).includes(`Kingdom: ${animal.kingdom}`)){\r\n              taxonomy[`Kingdom: ${animal.kingdom}`]={}\r\n            }\r\n          }\r\n          if (animal.phylum){\r\n            if(!Object.keys(taxonomy[`Kingdom: ${animal.kingdom}`]).includes(`Phylum: ${animal.phylum}`)){\r\n              taxonomy[`Kingdom: ${animal.kingdom}`][`Phylum: ${animal.phylum}`]={}\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if(searchlevel==\"Kingdom\"){\r\n        if(animal.phylum&&animal.class){\r\n          if(animal.phylum){\r\n            if(!Object.keys(taxonomy).includes(`Phylum: ${animal.phylum}`)){\r\n              taxonomy[`Phylum: ${animal.phylum}`]={}\r\n            }\r\n          }\r\n          if (animal.class){\r\n            if(!Object.keys(taxonomy[`Phylum: ${animal.phylum}`]).includes(`Class: ${animal.class}`)){\r\n              taxonomy[`Phylum: ${animal.phylum}`][`Class: ${animal.class}`]={}\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if(searchlevel==\"Phylum\"){\r\n        if(animal.class&&animal.order){\r\n          if (animal.class){\r\n            if(!Object.keys(taxonomy).includes(`Class: ${animal.class}`)){\r\n              taxonomy[`Class: ${animal.class}`]={}\r\n            }\r\n          }\r\n          if (animal.order){\r\n            if(!Object.keys(taxonomy[`Class: ${animal.class}`]).includes(`Order: ${animal.order}`)){\r\n              taxonomy[`Class: ${animal.class}`][`Order: ${animal.order}`]={}\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if(searchlevel==\"Class\"){\r\n        if(animal.order&&animal.family){\r\n          if (animal.order){\r\n            if(!Object.keys(taxonomy).includes(`Order: ${animal.order}`)){\r\n              taxonomy[`Order: ${animal.order}`]={}\r\n            }\r\n          }\r\n          if (animal.family){\r\n            if(!Object.keys(taxonomy[`Order: ${animal.order}`]).includes(`Family: ${animal.family}`)){\r\n              taxonomy[`Order: ${animal.order}`][`Family: ${animal.family}`]={}\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if(searchlevel==\"Order\"){\r\n        if(animal.family&&animal.genus){\r\n          if (animal.family){\r\n            if(!Object.keys(taxonomy).includes(`Family: ${animal.family}`)){\r\n              taxonomy[`Family: ${animal.family}`]={}\r\n            }\r\n          }\r\n          if (animal.genus){\r\n            if(!Object.keys(taxonomy[`Family: ${animal.family}`]).includes(`Genus: ${animal.genus}`)){\r\n              taxonomy[`Family: ${animal.family}`][`Genus: ${animal.genus}`]={}\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if(searchlevel==\"Family\"){\r\n        if(animal.genus&&animal.species){\r\n          if (animal.genus){\r\n            if(!Object.keys(taxonomy).includes(`Genus: ${animal.genus}`)){\r\n              taxonomy[`Genus: ${animal.genus}`]={}\r\n            }\r\n          }\r\n          if (animal.species){\r\n            if(!Object.keys(taxonomy[`Genus: ${animal.genus}`]).includes(`Species: ${animal.species}`)){\r\n              taxonomy[`Genus: ${animal.genus}`][`Species: ${animal.species}`]={}\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if(searchlevel==\"Genus\"){\r\n        if (animal.species){\r\n          if(!Object.keys(taxonomy).includes(`Species: ${animal.species}`)){\r\n            taxonomy[`Species: ${animal.species}`]={}\r\n          }\r\n        }\r\n      }\r\n    }\r\n    delete taxonomy[`Kingdom: incertae sedis`]\r\n    delete taxonomy[`Phylum: incertae sedis`]\r\n    delete taxonomy[`Class: incertae sedis`]\r\n    delete taxonomy[`Order: incertae sedis`]\r\n    delete taxonomy[`Family: incertae sedis`]\r\n    delete taxonomy[`Genus: incertae sedis`]\r\n    delete taxonomy[`Species: incertae sedis`]\r\n    console.log(\"getting taxonomy\",taxonomy);\r\n    setTaxonomyTree(JSON.stringify(taxonomy))\r\n  }\r\n\r\n\r\n  async function getHighestLevelOrganismData(){\r\n    setLoading(true)\r\n    descriptions={}\r\n    img=''\r\n\r\n    const options = {\r\n      method: 'GET',\r\n      headers: {\r\n        'X-RapidAPI-Host': 'wiki-briefs.p.rapidapi.com',\r\n        'X-RapidAPI-Key': '24f2c04f41msh794ec7d5b9283dcp1ebdf7jsn01969526d5ac'\r\n      }\r\n    };\r\n\r\n    await fetch(`https://wiki-briefs.p.rapidapi.com/search?q=life&topk=6`, options)\r\n      .then(response => response.json())\r\n      .then(response => {console.log(response,\"WIKIPEDIA\");\r\n      img=response.image;\r\n      description=response.summary.join('\\r\\n');\r\n    })\r\n    .catch(err => console.error(err));\r\n\r\n    await fetch('https://api.allorigins.win/get?url=https://api.gbif.org/v1/species?limit=1000')\r\n    .then(response => response.json())\r\n    .then(response =>JSON.parse(response.contents))\r\n    .then(response =>{\r\n      console.log(\"getting data\",response.results);\r\n      makeTaxonomyTree(response.results);\r\n    })\r\n    .catch(err => console.error(err));\r\n    setLoading(false)\r\n  }\r\n\r\n  async function upOneLevel(event){\r\n    console.log(\"searchlevel before\",searchlevel)\r\n    if(searchlevel==\"Kingdom\"){\r\n      searchlevel=\"\"\r\n    }\r\n    if(searchlevel==\"Phylum\"){\r\n      searchlevel=\"Kingdom\"\r\n    }\r\n    if(searchlevel==\"Class\"){\r\n      searchlevel=\"Phylum\"\r\n    }\r\n    if(searchlevel==\"Order\"){\r\n      searchlevel=\"Class\"\r\n    }\r\n    if(searchlevel==\"Family\"){\r\n      searchlevel=\"Order\"\r\n    }\r\n    if(searchlevel==\"Genus\"){\r\n      searchlevel=\"Family\"\r\n    }\r\n    if(searchlevel==\"Species\"){\r\n      searchlevel=\"Genus\"\r\n    }\r\n    console.log(\"searchlevel after\",searchlevel)\r\n    console.log(\"history\",history)\r\n    history.pop()\r\n    console.log(\"history\",history)\r\n    console.log(history[history.length-1])\r\n\r\n    if (history[history.length-1]==\"\"){\r\n      console.log(\"getting highest level\")\r\n      searchlevel=\"\"\r\n      await getHighestLevelOrganismData()\r\n    }else{\r\n      await narrowOptions(history[history.length-1],false)\r\n    }\r\n  }\r\n\r\n  async function narrowOptions(term,goingdown,secondcategory){\r\n    setLoading(true)\r\n    searchlevel=term.target.value.split(': ')[0]\r\n    let searchterm=term.target.value.split(': ')[1]\r\n    trunklabel=term.target.value.split(': ')[1]\r\n    trunklabellevel=term.target.value.split(': ')[0]\r\n        console.log(term.target.value,secondcategory)\r\n    if(goingdown){\r\n      if (secondcategory){\r\n        let termtwo={}\r\n        termtwo.target={}\r\n        termtwo.target.value=secondcategory\r\n        history.push(termtwo)\r\n      }\r\n      let termone={}\r\n      termone.target={}\r\n      termone.target.value=term.target.value\r\n      history.push(term)\r\n    }\r\n    console.log(term.target.value,secondcategory)\r\n    let highertaxonkey=await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/match?${trunklabellevel.toLowerCase()}=${searchterm}`)\r\n      .then(response => response.json())\r\n      .then(response =>JSON.parse(response.contents))\r\n      .then(response =>{\r\n        return response.usageKey})\r\n        .catch(err => console.error(err));\r\n        console.log(highertaxonkey)\r\n\r\n          await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/${highertaxonkey}/media`)\r\n            .then(response => response.json())\r\n            .then(response =>JSON.parse(response.contents))\r\n            .then(response =>{\r\n              console.log(\"IMAGES\",response.results);\r\n              if (response.results.length>0){\r\n                console.log(\"GETTING IMAGE\")\r\n                img=response[`results`][0][`identifier`];\r\n              }\r\n            })\r\n            .catch(err => console.error(err));\r\n\r\n\r\n            const options = {\r\n              method: 'GET',\r\n              headers: {\r\n                'X-RapidAPI-Host': 'wiki-briefs.p.rapidapi.com',\r\n                'X-RapidAPI-Key': '24f2c04f41msh794ec7d5b9283dcp1ebdf7jsn01969526d5ac'\r\n              }\r\n            };\r\n            await fetch(`https://wiki-briefs.p.rapidapi.com/search?q=${searchterm}&topk=6`, options)\r\n              .then(response => response.json())\r\n              .then(response => {console.log(response,\"WIKIPEDIA\");\r\n              img=response.image;\r\n              description=response.summary.join('\\r\\n');\r\n            })\r\n              .catch(err => console.error(err));\r\n\r\n\r\n\r\n        await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/search?limit=100%26highertaxon_key=${highertaxonkey}`  )\r\n          .then(response => response.json())\r\n          .then(response =>JSON.parse(response.contents))\r\n          .then(response =>{\r\n            console.log(response.results);\r\n            makeTaxonomyTree(response.results);\r\n          }).catch(err => console.error(err))\r\n          setLoading(false)\r\n                }\r\n\r\n                async function search(){\r\n                  setLoading(true)\r\n                  console.log(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/match?name=${searchword}`)\r\n                  let highertaxonkey=await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/match?name=${searchword}`)\r\n                    .then(response => response.json())\r\n                    .then(response =>JSON.parse(response.contents))\r\n                    .then(response =>{\r\n                      return response.usageKey})\r\n                      .catch(err => console.error(err));\r\n                      console.log(highertaxonkey)\r\n\r\n\r\n                      const options = {\r\n                        method: 'GET',\r\n                        headers: {\r\n                          'X-RapidAPI-Host': 'wiki-briefs.p.rapidapi.com',\r\n                          'X-RapidAPI-Key': '24f2c04f41msh794ec7d5b9283dcp1ebdf7jsn01969526d5ac'\r\n                        }\r\n                      };\r\n\r\n                      await fetch(`https://wiki-briefs.p.rapidapi.com/search?q=${searchword}&topk=6`, options)\r\n                        .then(response => response.json())\r\n                        .then(response => {console.log(response,\"WIKIPEDIA\");\r\n                        img=response.image;\r\n                        description=response.summary.join('\\r\\n');\r\n                      })\r\n                      .catch(err => console.error(err));\r\n\r\n\r\n                        await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/${highertaxonkey}/media`)\r\n                          .then(response => response.json())\r\n                          .then(response =>JSON.parse(response.contents))\r\n                          .then(response =>{\r\n                            console.log(\"IMAGES\",response.results);\r\n                            if (response.results.length>0){\r\n                              console.log(\"GETTING IMAGE\")\r\n                              img=response[`results`][0][`identifier`];\r\n                            }\r\n                          })\r\n                          .catch(err => console.error(err));\r\n\r\n                      await fetch(`https://api.allorigins.win/get?url=https://api.gbif.org/v1/species/search?limit=100%26highertaxon_key=${highertaxonkey}`  )\r\n                        .then(response => response.json())\r\n                        .then(response =>JSON.parse(response.contents))\r\n                        .then(response =>{\r\n                          console.log(response.results);\r\n                          history=[\"\"]\r\n                          let animal=response.results[0]\r\n                          if(animal.kingdom){\r\n                            let historyitem={}\r\n                            historyitem.target={}\r\n                            historyitem.target.value=`Kingdom: ${animal.kingdom}`\r\n                            history.push(historyitem)\r\n                            searchlevel=\"Kingdom\"\r\n                          }\r\n                          if(animal.phylum){\r\n                            let historyitem={}\r\n                            historyitem.target={}\r\n                            historyitem.target.value=`Phylum: ${animal.phylum}`\r\n                            history.push(historyitem)\r\n                            searchlevel=\"Phylum\"\r\n                          }\r\n                          if(animal.class){\r\n                            let historyitem={}\r\n                            historyitem.target={}\r\n                            historyitem.target.value=`Class: ${animal.class}`\r\n                            history.push(historyitem)\r\n                            searchlevel=\"Class\"\r\n                          }\r\n                          if(animal.order){\r\n                            let historyitem={}\r\n                            historyitem.target={}\r\n                            historyitem.target.value=`Order: ${animal.order}`\r\n                            history.push(historyitem)\r\n                            searchlevel=\"Order\"\r\n                          }\r\n                          if(animal.family){\r\n                            let historyitem={}\r\n                            historyitem.target={}\r\n                            historyitem.target.value=`Family: ${animal.family}`\r\n                            history.push(historyitem)\r\n                            searchlevel=\"Family\"\r\n                          }\r\n                          if(animal.genus){\r\n                            let historyitem={}\r\n                            historyitem.target={}\r\n                            historyitem.target.value=`Genus: ${animal.genus}`\r\n                            history.push(historyitem)\r\n                            searchlevel=\"Genus\"\r\n                          }\r\n                          if(animal.species){\r\n                            let historyitem={}\r\n                            historyitem.target={}\r\n                            historyitem.target.value=`Species: ${animal.species}`\r\n                            history.push(historyitem)\r\n                            searchlevel=\"Species\"\r\n                          }\r\n                          console.log(response.results[0],history,\"HISTORY\")\r\n                          makeTaxonomyTree(response.results);\r\n                        }).catch(err => console.error(err));\r\n                        setLoading(false)\r\n                              }\r\n\r\n\r\n\r\n                const sketch = (p5) => {\r\n                  let theta,input,button\r\n                  let numberofgroups=0\r\n\r\n                  p5.setup = () => {\r\n                    if(taxonomyTree){\r\n                      p5.createCanvas(p5.windowWidth,p5.windowHeight,p5.CANVAS);\r\n                      p5.clear();\r\n                      p5.stroke(255);\r\n                      p5.strokeWeight(40)\r\n                      let a = 15\r\n                      theta = p5.radians(a);\r\n                      p5.translate(350,p5.height-100);\r\n                      p5.stroke(101, 67, 33)\r\n                      p5.line(0,0,0,-180);\r\n                      p5.textSize(27);\r\n                      p5.strokeWeight(2)\r\n                      p5.stroke(0)\r\n                      p5.fill(255);\r\n                      p5.push();\r\n                      p5.translate(0,-20);\r\n                      p5.rotate(-1.5708);\r\n                      p5.text(trunklabel, 10, 5);\r\n                      p5.pop();\r\n                      (async function(){\r\n                        p5.translate(0,-180);\r\n                        p5.rotate(-1.5708)\r\n\r\n                        let taxonomy=JSON.parse(taxonomyTree)\r\n                        let keys=Object.keys(taxonomy)\r\n                        keys=keys.sort(() => Math.random() - 0.5);\r\n\r\n                        keys=keys.slice(0,6)\r\n                        let radiangapbetweenbranches=(180/keys.length) * (Math.PI / 180);\r\n                        p5.rotate(radiangapbetweenbranches/2)\r\n                        let radianprogress=-1.5708\r\n\r\n                        for (let [index, group] of keys.entries()){\r\n                          p5.push()\r\n                          p5.rotate(1.5708)\r\n                          p5.rotate(radianprogress)\r\n                          p5.stroke(101, 67, 33)\r\n                          p5.strokeWeight(30)\r\n                          p5.line(0,0,0,-180)\r\n\r\n                          p5.push()\r\n                          if(radianprogress>-0.1){\r\n                            p5.translate(0,-70);\r\n                            p5.rotate(-1.5708)\r\n                          }\r\n                          if(radianprogress<=-0.1){\r\n                            p5.translate(0,-160);\r\n                            p5.rotate(1.5708)\r\n                          }\r\n                          p5.textSize(23);\r\n                          p5.strokeWeight(2)\r\n                          p5.stroke(0)\r\n                          p5.fill(255);\r\n                          p5.text(group.split(': ')[1], 10, 5)\r\n                          p5.pop()\r\n                          p5.translate(0,-180);\r\n                          radianprogress=radianprogress+radiangapbetweenbranches\r\n                          branch(taxonomy[`${group}`],140,radianprogress,group)\r\n                          p5.pop()\r\n\r\n                        }\r\n                      })()\r\n                    };\r\n                  }\r\n\r\n\r\n                  async function branch(group,size,radianprog,gr){\r\n                    p5.rotate(-1.5708)\r\n                    let radianprogres=radianprog\r\n                    radianprogres=radianprogres-1.5708\r\n                    let key=Object.keys(group)\r\n                    if(key.length>6){\r\n                      key=key.sort(() => Math.random() - 0.5);\r\n                      key=key.slice(0,6)\r\n                    }\r\n                    let radiangapbetweenbranches=(180/key.length) * (Math.PI / 180);\r\n                    p5.rotate(radiangapbetweenbranches/2)\r\n                    for (let [index, grou] of key.entries()){\r\n                      p5.push()\r\n                      p5.stroke(101, 67, 33)\r\n                      p5.strokeWeight(size/8)\r\n                      p5.line(0,0,0,-size)\r\n                      p5.push()\r\n                      p5.stroke(0,128,0)\r\n                      let x=Math.random()\r\n                      if(x<0.5){\r\n                        p5.ellipse(size/4, 0, size/4, size/16);\r\n                        p5.ellipse(-size/4, -size/2, size/4, size/16);\r\n                        p5.ellipse(size/4, -size, size/4, size/16);\r\n                      }else{\r\n                        p5.ellipse(-size/4, 0, size/4, size/16);\r\n                        p5.ellipse(size/4, -size/2, size/4, size/16);\r\n                        p5.ellipse(-size/4, -size, size/4, size/16);\r\n                      }\r\n                      p5.ellipse(0, -size, size/16,size/4);\r\n\r\n\r\n                      p5.pop()\r\n                      p5.push()\r\n                      if(radianprogres>-0){\r\n                        p5.translate(0,-size/10);\r\n                        p5.rotate(-1.5708)\r\n                      }else{\r\n                        p5.translate(0,-size);\r\n                        p5.rotate(1.5708)\r\n                      }\r\n                      p5.textSize(size/10);\r\n                      p5.strokeWeight(2)\r\n                      p5.stroke(0)\r\n                      p5.fill(255);\r\n                      p5.text(grou.split(': ')[1], 10, 5)\r\n                      p5.pop()\r\n\r\n                      p5.pop()\r\n                      radianprogres=radianprogres+radiangapbetweenbranches\r\n                      p5.rotate(radiangapbetweenbranches)\r\n                    }\r\n                  };\r\n\r\n\r\n\r\n                };\r\n                let taxonom\r\n                let keys\r\n                let titleone\r\n                let titletwo\r\n\r\n                if(taxonomyTree){\r\n                  taxonom=JSON.parse(taxonomyTree)\r\n                  console.log(taxonom)\r\n                  keys=Object.keys(taxonom)\r\n                  console.log(\"keys\",keys)\r\n                  if (keys.length>0){\r\n                    titleone=keys[0]\r\n                    titleone=titleone.split(\": \")\r\n                    titleone=titleone[0]\r\n                  }\r\n                }\r\n\r\n                if(titleone==\"Kingdom\"){\r\n                  titletwo=\"Phylum\"\r\n                }\r\n                if(titleone==\"Phylum\"){\r\n                  titletwo=\"Class\"\r\n                }\r\n                if(titleone==\"Class\"){\r\n                  titletwo=\"Order\"\r\n                }\r\n                if(titleone==\"Order\"){\r\n                  titletwo=\"Family\"\r\n                }\r\n                if(titleone==\"Family\"){\r\n                  titletwo=\"Genus\"\r\n                }\r\n                if(titleone==\"Genus\"){\r\n                  titletwo=\"Species\"\r\n                }\r\n\r\n\r\n                console.log(\"titleone\",titleone)\r\n\r\n                let colors=[\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\",\"green\",\"red\",\"purple\",\"blue\",\"orange\",\"yellow\",\"pink\"]\r\n                var histor=[]\r\n                if (history){\r\n                  if (history.length>1){\r\n                    console.log(history)\r\n                histor=history.map(item=>{\r\n                  if(item!==\"\"){\r\n                  return item.target.value\r\n                  }\r\n                  })\r\n                  histor.shift()\r\n                  }\r\n                }\r\n\r\n                function handleChange(event) {\r\n                    console.log(event.target.value);\r\n                    searchword=event.target.value\r\n                  }\r\n\r\n\r\n                console.log(histor,\"histor\")\r\n                return (<>\r\n                  <div style={{display:loading?\"inline\":\"none\",margin:\"4vw\",padding:\"4vw\",top:\"100px\",left:\"100px\"}}>\r\n                  <div class=\"loader\" style={{margin:\"4vw\"}}></div><h1 style={{marginLeft:\"4vw\",fontSize:\"250%\",display:\"inline\",color:\"#3498db\"}}>Loading</h1>\r\n                  </div>\r\n                  <div style={{display:loading?\"none\":\"block\"}}>\r\n                  <div style={{transform:\"translateY(-100px)\"}}>\r\n                  <ReactP5Wrapper sketch={sketch}/>\r\n                  </div>\r\n                  <div style={{width:\"100vw\",margin:\"0\"}}>\r\n                  <img src={garden} style={{width:\"100vw\",height:\"100vh\",top:\"0\",left:\"0\",position:\"absolute\",zIndex:\"-10\"}}/>\r\n                  <img src={pot} style={{width:\"150px\",position:\"absolute\",color:\"white\",zIndex:\"-2\",top:\"550px\",marginLeft:\"275px\"}}/>\r\n                  <h1 style={{paddingLeft:\"2vw\",paddingTop:\"0\",marginTop:\"0\"}}>{trunklabellevel} {trunklabel}</h1>\r\n                  {(img||description)&&<div style={{width:\"100vw\",display:\"flex\"}}>\r\n                  <div style={{width:\"46vw\",marginLeft:\"2vw\"}}>{img&&<img style={{width:\"42vw\"}} src={img}></img>}</div>\r\n                  <div style={{width:\"46vw\",marginRight:\"2vw\"}}>{description&&<h4 style={{marginTop:\"0\",marginLeft:\"0\"}}>{description}</h4>}</div>\r\n                  </div>}\r\n                  <hr/>\r\n                  <div style={{marginLeft:\"2vw\"}}>\r\n                  <input onChange={handleChange}></input><button onClick={search}>Submit Search</button>\r\n                  <div style={{paddingBottom:\"0\",marginBottom:\"0\",paddingTop:\"0.5vh\",marginTop:\"0.5vh\"}}>\r\n                  {(histor.length>0)&&histor.map((item,index)=><h5 style={{display:\"inline\",marginTop:\"0vh\"}}>{item}{(index<histor.length-1)&&<>/ </>}</h5>)}\r\n                  </div>\r\n                  </div>\r\n                  <h2 style={{paddingLeft:\"2vw\",paddingBottom:\"0\",marginBottom:\"0\",paddingTop:\"0.5vh\",marginTop:\"0.5vh\"}}>Subcategories of {trunklabellevel}: {trunklabel}</h2>\r\n                  <div style={{paddingLeft:\"2vw\",marginTop:\"0.5vh\"}}>\r\n                  {searchlevel&&<button style={{maxWidth:\"20vw\",display:\"inline\"}} onClick={upOneLevel}>Up One Level</button>}\r\n                  </div>\r\n                  <div style={{display:\"flex\",width:\"100vw\",overflowX:\"scroll\"}}>\r\n\r\n                  {keys&&keys.map((key,index)=><div style={{marginLeft:\"2vw\",width:\"20vw\"}}><div>{titleone&&<h3 >{titleone}</h3>}</div><button style={{backgroundColor:colors[index],display:\"block\"}} onClick={(e) => narrowOptions(e,true)} value={key}>{key.split(\": \")[1]}</button>{(Object.keys(taxonom[`${key}`]).length>0)&&<div>{titletwo&&<h4>{titletwo}</h4>}</div>}\r\n                  {taxonom[`${key}`]&&Object.keys(taxonom[`${key}`]).map(item=><button style={{backgroundColor:colors[index],display:\"block\"}}  onClick={(e) => narrowOptions(e,true,key)} value={item}>{item.split(\": \")[1]}</button>)}\r\n                  </div>)}\r\n                  </div>\r\n                  </div>\r\n                  </div></>)\r\n                }\r\n                const areEqual = (prevProps, nextProps) => true;\r\n\r\n                export default React.memo(Tree, areEqual);\r\n",{"ruleId":"61","severity":1,"message":"62","line":1,"column":8,"nodeType":"63","messageId":"64","endLine":1,"endColumn":12},{"ruleId":"61","severity":1,"message":"65","line":3,"column":16,"nodeType":"63","messageId":"64","endLine":3,"endColumn":24},{"ruleId":"61","severity":1,"message":"66","line":3,"column":26,"nodeType":"63","messageId":"64","endLine":3,"endColumn":35},{"ruleId":"61","severity":1,"message":"67","line":1,"column":16,"nodeType":"63","messageId":"64","endLine":1,"endColumn":22},{"ruleId":"61","severity":1,"message":"68","line":12,"column":5,"nodeType":"63","messageId":"64","endLine":12,"endColumn":17},{"ruleId":"69","severity":1,"message":"70","line":20,"column":5,"nodeType":"71","endLine":20,"endColumn":7,"suggestions":"72"},{"ruleId":"73","severity":1,"message":"74","line":25,"column":21,"nodeType":"75","messageId":"76","endLine":25,"endColumn":23},{"ruleId":"73","severity":1,"message":"74","line":40,"column":21,"nodeType":"75","messageId":"76","endLine":40,"endColumn":23},{"ruleId":"73","severity":1,"message":"74","line":55,"column":21,"nodeType":"75","messageId":"76","endLine":55,"endColumn":23},{"ruleId":"73","severity":1,"message":"74","line":70,"column":21,"nodeType":"75","messageId":"76","endLine":70,"endColumn":23},{"ruleId":"73","severity":1,"message":"74","line":85,"column":21,"nodeType":"75","messageId":"76","endLine":85,"endColumn":23},{"ruleId":"73","severity":1,"message":"74","line":100,"column":21,"nodeType":"75","messageId":"76","endLine":100,"endColumn":23},{"ruleId":"73","severity":1,"message":"74","line":114,"column":21,"nodeType":"75","messageId":"76","endLine":114,"endColumn":23},{"ruleId":"73","severity":1,"message":"74","line":168,"column":19,"nodeType":"75","messageId":"76","endLine":168,"endColumn":21},{"ruleId":"73","severity":1,"message":"74","line":171,"column":19,"nodeType":"75","messageId":"76","endLine":171,"endColumn":21},{"ruleId":"73","severity":1,"message":"74","line":174,"column":19,"nodeType":"75","messageId":"76","endLine":174,"endColumn":21},{"ruleId":"73","severity":1,"message":"74","line":177,"column":19,"nodeType":"75","messageId":"76","endLine":177,"endColumn":21},{"ruleId":"73","severity":1,"message":"74","line":180,"column":19,"nodeType":"75","messageId":"76","endLine":180,"endColumn":21},{"ruleId":"73","severity":1,"message":"74","line":183,"column":19,"nodeType":"75","messageId":"76","endLine":183,"endColumn":21},{"ruleId":"73","severity":1,"message":"74","line":186,"column":19,"nodeType":"75","messageId":"76","endLine":186,"endColumn":21},{"ruleId":"73","severity":1,"message":"74","line":195,"column":34,"nodeType":"75","messageId":"76","endLine":195,"endColumn":36},{"ruleId":"61","severity":1,"message":"77","line":378,"column":23,"nodeType":"63","messageId":"64","endLine":378,"endColumn":28},{"ruleId":"61","severity":1,"message":"78","line":378,"column":29,"nodeType":"63","messageId":"64","endLine":378,"endColumn":34},{"ruleId":"61","severity":1,"message":"79","line":378,"column":35,"nodeType":"63","messageId":"64","endLine":378,"endColumn":41},{"ruleId":"61","severity":1,"message":"80","line":379,"column":23,"nodeType":"63","messageId":"64","endLine":379,"endColumn":37},{"ruleId":"61","severity":1,"message":"81","line":414,"column":35,"nodeType":"63","messageId":"64","endLine":414,"endColumn":40},{"ruleId":"61","severity":1,"message":"81","line":459,"column":31,"nodeType":"63","messageId":"64","endLine":459,"endColumn":36},{"ruleId":"73","severity":1,"message":"74","line":521,"column":28,"nodeType":"75","messageId":"76","endLine":521,"endColumn":30},{"ruleId":"73","severity":1,"message":"74","line":524,"column":28,"nodeType":"75","messageId":"76","endLine":524,"endColumn":30},{"ruleId":"73","severity":1,"message":"74","line":527,"column":28,"nodeType":"75","messageId":"76","endLine":527,"endColumn":30},{"ruleId":"73","severity":1,"message":"74","line":530,"column":28,"nodeType":"75","messageId":"76","endLine":530,"endColumn":30},{"ruleId":"73","severity":1,"message":"74","line":533,"column":28,"nodeType":"75","messageId":"76","endLine":533,"endColumn":30},{"ruleId":"73","severity":1,"message":"74","line":536,"column":28,"nodeType":"75","messageId":"76","endLine":536,"endColumn":30},{"ruleId":"82","severity":1,"message":"83","line":548,"column":40,"nodeType":"84","messageId":"85","endLine":548,"endColumn":42},{"ruleId":"86","severity":1,"message":"87","line":573,"column":19,"nodeType":"88","endLine":573,"endColumn":127},{"ruleId":"86","severity":1,"message":"87","line":574,"column":19,"nodeType":"88","endLine":574,"endColumn":136},{"ruleId":"86","severity":1,"message":"87","line":577,"column":70,"nodeType":"88","endLine":577,"endColumn":108},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'descriptions' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getHighestLevelOrganismData'. Either include it or remove the dependency array.","ArrayExpression",["89"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'theta' is assigned a value but never used.","'input' is defined but never used.","'button' is defined but never used.","'numberofgroups' is assigned a value but never used.","'index' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"90","fix":"91"},"Update the dependencies array to be: [getHighestLevelOrganismData]",{"range":"92","text":"93"},[522,524],"[getHighestLevelOrganismData]"]